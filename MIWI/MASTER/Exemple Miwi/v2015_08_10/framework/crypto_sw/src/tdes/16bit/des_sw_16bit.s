/******************************************************************************
 Software License Agreement:

 The software supplied herewith by Microchip Technology Incorporated
 (the "Company") for its PICmicro(r) Microcontroller is intended and
 supplied to you, the Company's customer, for use solely and
 exclusively on Microchip PICmicro Microcontroller products. The
 software is owned by the Company and/or its supplier, and is
 protected under applicable copyright laws. All rights are reserved.
 Any use in violation of the foregoing restrictions may subject the
 user to criminal sanctions under applicable laws, as well as to
 civil liability for the breach of the terms and conditions of this
 license.

 THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION. NO WARRANTIES,
 WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
********************************************************************/

.equ VALID_ID,0
    .ifdecl __dsPIC33E
        .include "p33Exxxx.inc"
    .endif

    .ifdecl __dsPIC33F
        .include "p33Fxxxx.inc"
    .endif

    .ifdecl __dsPIC30F
        .include "p30Fxxxx.inc"
    .endif

    .ifdecl __PIC24E
        .include "p24Exxxx.inc"
    .endif

    .ifdecl __PIC24H
        .include "p24Hxxxx.inc"
    .endif

    .ifdecl __PIC24F
        .include "p24Fxxxx.inc"
    .endif

    .ifdecl __PIC24FK
        .include "p24Fxxxx.inc"
    .endif

.if VALID_ID <> 1
    .error "Processor ID not specified in generic include files.  New ASM30 assembler needs to be downloaded?"
.endif

.ifdecl __HAS_EDS
    .equ    PSVPAG,DSRPAG    
.endif


;Version 0.4
; requirements:
;  all code and tables must fit in one PSV page

;DES.s

.global _calcSubKeys
.global _calcSubKeys2
.global _des

.text

;************************* DES *************************;
; -- Working register usage --------------------------------------------------------------------------
; W0  - (param) Pointer to output buffer
; W1  - (param) Pointer to input buffer
; W2  - (param) Pointer to the round keys
; W3  - (param) Encryption/Decryption selection bit (bit 0 = 1 for encryption, and = 0 for decryption)
; W4  - (local) temp math buffer
; W5  - (local) temp math buffer
; W6  - (local) temp math buffer
; W7  - (local) temp math buffer
; W8  - (local) TBD
; W9  - (local) TBD
; W10 - (local) TBD
; W11 - (local) TBD
; W12 - (local) TBD
; W13 - (local) TBD
;
; Note: don't need to save/restore W0, W1, W2, or W3 locally since 
;  these are used for the parameters of this function and their values
;  should not be needed outside of this function.  
;----------------------------------------------------------------------------------------------------
.global _des
_des:    ;this will encrypt or decrypt (change _mode to select feature - mode.lsb = 1 is encrypt)
    push PSVPAG
.ifndecl __HAS_EDS
    push CORCON
.endif

    ;Need to save all working registersed used for local storage and any parameters that need to maintain
    ;  their values after returning from the function
    push W0
    push W1
    push W2
    push W3
    push W4
    push W5
    push W6
    push W7
    push W8
    push W9
    push W10
    push W11
    push W12
    push W13

    ;We are going to push W0 on to the stack to free up the register since we don't need this pointer
    ; until the end of the routine
    push W0

    ;We are going to push W3 (mode) onto the stack and access it from there to free up the working register
    ; since we don't access it very often
    push W3

    mov W1,W12
    mov W2,W13

    clr W0    ;LSW of L
    clr W1  ;MSW of L
    clr W2  ;LSB of R
    clr W3  ;MSW of R

    ;transpose [W3 W2 W1 W0] = IP[M];
    btsc [W12],#0x6
    bset W3,#0x8
    btsc [W12],#0x4
    bset W3,#0x0
    btsc [W12],#0x2
    bset W2,#0x8
    btsc [W12],#0x0
    bset W2,#0x0
    btsc [W12],#0x7
    bset W1,#0x8
    btsc [W12],#0x5
    bset W1,#0x0
    btsc [W12],#0x3
    bset W0,#0x8
    btsc [W12],#0x1
    bset W0,#0x0

    btsc [W12],#0xE
    bset W3,#0x9
    btsc [W12],#0xC
    bset W3,#0x1
    btsc [W12],#0xA
    bset W2,#0x9
    btsc [W12],#0x8
    bset W2,#0x1
    btsc [W12],#0xF
    bset W1,#0x9
    btsc [W12],#0xD
    bset W1,#0x1
    btsc [W12],#0xB
    bset W0,#0x9
    btsc [W12++],#0x9
    bset W0,#0x1

    btsc [W12],#0x6
    bset W3,#0xA
    btsc [W12],#0x4
    bset W3,#0x2
    btsc [W12],#0x2
    bset W2,#0xA
    btsc [W12],#0x0
    bset W2,#0x2
    btsc [W12],#0x7
    bset W1,#0xA
    btsc [W12],#0x5
    bset W1,#0x2
    btsc [W12],#0x3
    bset W0,#0xA
    btsc [W12],#0x1
    bset W0,#0x2

    btsc [W12],#0xE
    bset W3,#0xB
    btsc [W12],#0xC
    bset W3,#0x3
    btsc [W12],#0xA
    bset W2,#0xB
    btsc [W12],#0x8
    bset W2,#0x3
    btsc [W12],#0xF
    bset W1,#0xB
    btsc [W12],#0xD
    bset W1,#0x3
    btsc [W12],#0xB
    bset W0,#0xB
    btsc [W12++],#0x9
    bset W0,#0x3

    btsc [W12],#0x6
    bset W3,#0xC
    btsc [W12],#0x4
    bset W3,#0x4
    btsc [W12],#0x2
    bset W2,#0xC
    btsc [W12],#0x0
    bset W2,#0x4
    btsc [W12],#0x7
    bset W1,#0xC
    btsc [W12],#0x5
    bset W1,#0x4
    btsc [W12],#0x3
    bset W0,#0xC
    btsc [W12],#0x1
    bset W0,#0x4

    btsc [W12],#0xE
    bset W3,#0xD
    btsc [W12],#0xC
    bset W3,#0x5
    btsc [W12],#0xA
    bset W2,#0xD
    btsc [W12],#0x8
    bset W2,#0x5
    btsc [W12],#0xF
    bset W1,#0xD
    btsc [W12],#0xD
    bset W1,#0x5
    btsc [W12],#0xB
    bset W0,#0xD
    btsc [W12++],#0x9
    bset W0,#0x5

    btsc [W12],#0x6
    bset W3,#0xE
    btsc [W12],#0x4
    bset W3,#0x6
    btsc [W12],#0x2
    bset W2,#0xE
    btsc [W12],#0x0
    bset W2,#0x6
    btsc [W12],#0x7
    bset W1,#0xE
    btsc [W12],#0x5
    bset W1,#0x6
    btsc [W12],#0x3
    bset W0,#0xE
    btsc [W12],#0x1
    bset W0,#0x6

    btsc [W12],#0xE
    bset W3,#0xF
    btsc [W12],#0xC
    bset W3,#0x7
    btsc [W12],#0xA
    bset W2,#0xF
    btsc [W12],#0x8
    bset W2,#0x7
    btsc [W12],#0xF
    bset W1,#0xF
    btsc [W12],#0xD
    bset W1,#0x7
    btsc [W12],#0xB
    bset W0,#0xF
    btsc [W12],#0x9
    bset W0,#0x7

    ;prepare for 8 rounds
    mov #0x08,W10
    push W10

    ;enable Program space visibility
.ifndecl __HAS_EDS
    bset CORCON,#0x2
.endif

    ;setup the PSV pointer
    mov #psvpage(S8),W10
    mov W10,PSVPAG

    clr W6    ;clear the upper byte of this register to use as an index

    ;Load the E table pointer
    mov #psvoffset(E_Table)+#0x8000,W9        ;+0x8000 to set the PSV bit

    clr W4    ;leave this outside of the loop because the last step before the loopback is to clear it.

;****************** start of the loop *******************
; -- Working register usage --------------------------------------------------------------------------
; W0  - (input)Initial permutation (LSW of L), L-1 every loop after first
; W1  - (input)Initial permutation (MSW of L), L-1 every loop after first
; W2  - (input)Initial permutation (LSW of R), R-1 every loop after first
; W3  - (input)Initial permutation (MSW of R), R-1 every loop after first
; W4  - (local) TBD
; W5  - (local) TBD
; W6  - (local) TBD
; W7  - (local) TBD
; W8  - (local) temp pointer to S tables
; W9  - (local) Pointer to the E table
; W10 - (local) TBD
; W11 - (local) TBD
; W12 - (local) temp pointer to S tables
; W13 - (local) pointers to round keys
;----------------------------------------------------------------------------------------------------
DESLoop:

    clr W5
    clr W6
    clr W7

    ;E(R.n-1), place each in a [x x 1 2 3 4 5 6] format so that S[E(R.n-1)] is easy
    ;lookup E(R.n-1)

    lsr W1,#0x7,W11
    bclr W11,#0x0
    btsc W1,#0xF
    bset W4,#0x0    
    mov [W9+W11],W10
    btsc W1,#0x8
    bset W6,#0xD
    ior W10,W7,W7

    rlnc W1,W11
    and #0x1FE,W11
    btsc W1,#0x7
    bset W7,#0x0    
    mov [W9+W11],W10
    btsc W1,#0x0
    bset W5,#0xD
    ior W10,W6,W6

    lsr W0,#0x7,W11
    bclr W11,#0x0
    btsc W0,#0xF
    bset W6,#0x0    
    mov [W9+W11],W10
    btsc W0,#0x8
    bset W4,#0xD
    ior W10,W5,W5

    rlnc W0,W11
    and #0x1FE,W11
    btsc W0,#0x7
    bset W5,#0x0    
    mov [W9+W11],W10
    btsc W0,#0x0
    bset W7,#0xD
    ior W10,W4,W4

    ;K XOR E(R.n-1)
    xor W4,[W13++],W4
    xor W5,[W13++],W5
    xor W6,[W13++],W6
    xor W7,[W13++],W7

    ;if we are in decrypt mode then decrement the pointer instead of going forward
    mov [W15-4],W10
    btss W10,#0x0
    sub #0x10,W13

    ;Since P and the S tables do not have 
    ;  any variable modification between the two steps, we can combine them into one step

    ;lookup S8(B8) and S7(B7) (RAW dependencies removed, thus a little hard to read)

    ;Now calculate L.(n+1) = L.(n-1) XOR f.n(R.(n-1))

    mov #psvoffset(S1P_table)+#0x8000,W12
    lsr W7,#0x6,W11    ;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
    add W11,W12,W12
    mov #psvoffset(S2P_table)+#0x8000,W8    ;split of RAW dependency by preloading pointer for next block
    mov.d [W12],W10
    xor W10,W3,W3
    xor W11,W2,W2


    sl W7,#0x2,W11
    and #0xFF,W11
    add W11,W8,W8
    mov #psvoffset(S3P_table)+#0x8000,W12    ;split of RAW dependency by preloading pointer for next block
    mov.d [W8],W10
    xor W10,W3,W3
    xor W11,W2,W2


    lsr W6,#0x6,W11    ;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
    add W11,W12,W12
    mov #psvoffset(S4P_table)+#0x8000,W8    ;split of RAW dependency by preloading pointer for next block
    mov.d [W12],W10
    xor W10,W3,W3
    xor W11,W2,W2


    sl W6,#0x2,W11
    and #0xFF,W11
    add W11,W8,W8
    mov #psvoffset(S5P_table)+#0x8000,W12    ;split of RAW dependency by preloading pointer for next block
    mov.d [W8],W10
    xor W10,W3,W3
    xor W11,W2,W2


    lsr W5,#0x6,W11    ;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
    add W11,W12,W12
    mov #psvoffset(S6P_table)+#0x8000,W8    ;split of RAW dependency by preloading pointer for next block
    mov.d [W12],W10
    xor W10,W3,W3
    xor W11,W2,W2


    sl W5,#0x2,W11
    and #0xFF,W11
    add W11,W8,W8
    mov #psvoffset(S7P_table)+#0x8000,W12    ;split of RAW dependency by preloading pointer for next block
    mov.d [W8],W10
    xor W10,W3,W3
    xor W11,W2,W2


    lsr W4,#0x6,W11    ;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
    add W11,W12,W12
    mov #psvoffset(S8P_table)+#0x8000,W8    ;split of RAW dependency by preloading pointer for next block
    mov.d [W12],W10
    xor W10,W3,W3
    xor W11,W2,W2


    sl W4,#0x2,W11
    and #0xFF,W11
    add W11,W8,W8
    clr W4                ;split of RAW dependency by clearing W4 for next round
    mov.d [W8],W10
    xor W10,W3,W3
    xor W11,W2,W2

    ;Done with L.(n+1) = L.(n-1) XOR f.n(R.(n-1))

    ;Now calculate R.(n+1) = R.(n-1) XOR f.(n+1)(L.(n+1))

    ;E(L.n+1), place each in a [x x 1 2 3 4 5 6] format so that S[E(L.n+1)] is easy
    ;lookup E(L.n+1)


    clr W5
    clr W6
    clr W7

    lsr W3,#0x7,W11
    bclr W11,#0x0
    btsc W3,#0xF
    bset W4,#0x0    
    mov [W9+W11],W10
    btsc W3,#0x8
    bset W6,#0xD
    ior W10,W7,W7

    rlnc W3,W11
    and #0x1FE,W11
    btsc W3,#0x7
    bset W7,#0x0    
    mov [W9+W11],W10
    btsc W3,#0x0
    bset W5,#0xD
    ior W10,W6,W6

    lsr W2,#0x7,W11
    bclr W11,#0x0
    btsc W2,#0xF
    bset W6,#0x0    
    mov [W9+W11],W10
    btsc W2,#0x8
    bset W4,#0xD
    ior W10,W5,W5

    rlnc W2,W11
    and #0x1FE,W11
    btsc W2,#0x7
    bset W5,#0x0    
    mov [W9+W11],W10
    btsc W2,#0x0
    bset W7,#0xD
    ior W10,W4,W4

    ;K XOR E(R.n-1)
    xor W4,[W13++],W4
    xor W5,[W13++],W5
    xor W6,[W13++],W6
    xor W7,[W13++],W7

    ;if we are in decrypt mode then decrement the pointer instead of going forward
    mov [W15-4],W10
    btss W10,#0x0
    sub #0x10,W13

    ;Since P and the S tables do not have 
    ;  any variable modification between the two steps, we can combine them into one step

    ;lookup S8(B8) and S7(B7) (RAW dependencies removed, thus a little hard to read)

    mov #psvoffset(S1P_table)+#0x8000,W12
    lsr W7,#0x6,W11    ;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
    add W11,W12,W12
    mov #psvoffset(S2P_table)+#0x8000,W8    ;split of RAW dependency by preloading pointer for next block
    mov.d [W12],W10
    xor W10,W1,W1
    xor W11,W0,W0


    sl W7,#0x2,W11
    and #0xFF,W11
    add W11,W8,W8
    mov #psvoffset(S3P_table)+#0x8000,W12    ;split of RAW dependency by preloading pointer for next block
    mov.d [W8],W10
    xor W10,W1,W1
    xor W11,W0,W0


    lsr W6,#0x6,W11    ;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
    add W11,W12,W12
    mov #psvoffset(S4P_table)+#0x8000,W8    ;split of RAW dependency by preloading pointer for next block
    mov.d [W12],W10
    xor W10,W1,W1
    xor W11,W0,W0


    sl W6,#0x2,W11
    and #0xFF,W11
    add W11,W8,W8
    mov #psvoffset(S5P_table)+#0x8000,W12    ;split of RAW dependency by preloading pointer for next block
    mov.d [W8],W10
    xor W10,W1,W1
    xor W11,W0,W0


    lsr W5,#0x6,W11    ;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
    add W11,W12,W12
    mov #psvoffset(S6P_table)+#0x8000,W8    ;split of RAW dependency by preloading pointer for next block
    mov.d [W12],W10
    xor W10,W1,W1
    xor W11,W0,W0


    sl W5,#0x2,W11
    and #0xFF,W11
    add W11,W8,W8
    mov #psvoffset(S7P_table)+#0x8000,W12    ;split of RAW dependency by preloading pointer for next block
    mov.d [W8],W10
    xor W10,W1,W1
    xor W11,W0,W0


    lsr W4,#0x6,W11    ;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
    add W11,W12,W12
    mov #psvoffset(S8P_table)+#0x8000,W8    ;split of RAW dependency by preloading pointer for next block
    mov.d [W12],W10
    xor W10,W1,W1
    xor W11,W0,W0


    sl W4,#0x2,W11
    and #0xFF,W11
    add W11,W8,W8
    clr W4                ;split of RAW dependency by clearing W4 for next round
    mov.d [W8],W10
    xor W10,W1,W1
    xor W11,W0,W0

    ;see if we are done with 16 rounds
    mov [W15-2],W10
    dec W10,W10
    mov W10,[W15-2]
    bra NZ,DESLoop

    ;****************** end of the loop *******************

    ;Pop the loop count off of the stack (no longer needed)
    pop W12

    ;Pop the mode input off of the stack (no longer need it)
    pop W12

    ;Pop the pointer to the output buffer off of the stack (since we now need to write
    ; to that buffer).
    pop W12

    ;do final IP^-1 permutation
    clr [W12++]
    clr [W12++]
    clr [W12++]
    clr [W12]
    

    btsc W3,#0xE
    bset [W12],#0x7
    btsc W1,#0xE
    bset [W12],#0x6
    btsc W3,#0x6
    bset [W12],#0x5
    btsc W1,#0x6
    bset [W12],#0x4
    btsc W2,#0xE
    bset [W12],#0x3
    btsc W0,#0xE
    bset [W12],#0x2
    btsc W2,#0x6
    bset [W12],#0x1
    btsc W0,#0x6
    bset [W12],#0x0

    btsc W3,#0xF
    bset [W12],#0xF
    btsc W1,#0xF
    bset [W12],#0xE
    btsc W3,#0x7
    bset [W12],#0xD
    btsc W1,#0x7
    bset [W12],#0xC
    btsc W2,#0xF
    bset [W12],#0xB
    btsc W0,#0xF
    bset [W12],#0xA
    btsc W2,#0x7
    bset [W12],#0x9
    btsc W0,#0x7
    bset [W12],#0x8

    sub #0x2,W12

    btsc W3,#0xC
    bset [W12],#0x7
    btsc W1,#0xC
    bset [W12],#0x6
    btsc W3,#0x4
    bset [W12],#0x5
    btsc W1,#0x4
    bset [W12],#0x4
    btsc W2,#0xC
    bset [W12],#0x3
    btsc W0,#0xC
    bset [W12],#0x2
    btsc W2,#0x4
    bset [W12],#0x1
    btsc W0,#0x4
    bset [W12],#0x0

    btsc W3,#0xD
    bset [W12],#0xF
    btsc W1,#0xD
    bset [W12],#0xE
    btsc W3,#0x5
    bset [W12],#0xD
    btsc W1,#0x5
    bset [W12],#0xC
    btsc W2,#0xD
    bset [W12],#0xB
    btsc W0,#0xD
    bset [W12],#0xA
    btsc W2,#0x5
    bset [W12],#0x9
    btsc W0,#0x5
    bset [W12],#0x8

    sub #0x2,W12

    btsc W3,#0xA
    bset [W12],#0x7
    btsc W1,#0xA
    bset [W12],#0x6
    btsc W3,#0x2
    bset [W12],#0x5
    btsc W1,#0x2
    bset [W12],#0x4
    btsc W2,#0xA
    bset [W12],#0x3
    btsc W0,#0xA
    bset [W12],#0x2
    btsc W2,#0x2
    bset [W12],#0x1
    btsc W0,#0x2
    bset [W12],#0x0

    btsc W3,#0xB
    bset [W12],#0xF
    btsc W1,#0xB
    bset [W12],#0xE
    btsc W3,#0x3
    bset [W12],#0xD
    btsc W1,#0x3
    bset [W12],#0xC
    btsc W2,#0xB
    bset [W12],#0xB
    btsc W0,#0xB
    bset [W12],#0xA
    btsc W2,#0x3
    bset [W12],#0x9
    btsc W0,#0x3
    bset [W12],#0x8

    sub #0x2,W12

    btsc W3,#0x8
    bset [W12],#0x7
    btsc W1,#0x8
    bset [W12],#0x6
    btsc W3,#0x0
    bset [W12],#0x5
    btsc W1,#0x0
    bset [W12],#0x4
    btsc W2,#0x8
    bset [W12],#0x3
    btsc W0,#0x8
    bset [W12],#0x2
    btsc W2,#0x0
    bset [W12],#0x1
    btsc W0,#0x0
    bset [W12],#0x0

    btsc W3,#0x9
    bset [W12],#0xF
    btsc W1,#0x9
    bset [W12],#0xE
    btsc W3,#0x1
    bset [W12],#0xD
    btsc W1,#0x1
    bset [W12],#0xC
    btsc W2,#0x9
    bset [W12],#0xB
    btsc W0,#0x9
    bset [W12],#0xA
    btsc W2,#0x1
    bset [W12],#0x9
    btsc W0,#0x1
    bset [W12],#0x8

    ;Pop everything else that was used in this function
    pop W13
    pop W12
    pop W11
    pop W10
    pop W9
    pop W8
    pop W7
    pop W6
    pop W5
    pop W4
    pop W3
    pop W2
    pop W1
    pop W0

.ifndecl __HAS_EDS
    pop CORCON
.endif
    pop PSVPAG

return




;*****************************************************************************************************
;*************************************** New Functions ***********************************************
;*****************************************************************************************************


;*************************************** calcSubKeys2() **********************************************
; -- Working register usage --------------------------------------------------------------------------
; W0  - Pointer to where to write the resulting round keys
; W1  - Pointer to the key
; W2  - temp Kp
; W3  - temp counter, temp Kp+2
; W4  - temp pointer, temp Kp+4
; W5  - temp Kp+6
; W6  - temp storage
; W7  - 
; W8  - 
; W9  - 
; W10 - 
; W11 - 
; W12 - 
; W13 - 
; W14 - 
;----------------------------------------------------------------------------------------------------
;*****************************************************************************************************
;this assumes that _Key has been updated before being called
;this assumes that _subKeyBlock is pointing to the LSB of a 48 word block that will hold the subkeys
_calcSubKeys2:
    push W0
    push W1
    push W2
    push W3
    push W4
    push W5
    push W6
    
    ;clear old keys
    ;BugFix1 - old loop was running 0x30 (48) times.  There are 64 words (128 bytes) of 
    ;sub-keys that need to be calculated per block. 
    mov #0x40,W3
    mov W0,W4
ClearOldKeys2:
    clr.w [W4++]
    dec W3,W3
    bra NZ,ClearOldKeys2

    clr WREG2
    clr WREG3
    clr WREG4
    clr WREG5

    ;Key+7
    btsc [W1],#0x7
    bset WREG5,#0x0
    btsc [W1],#0x6
    bset WREG4+1,#0x0
    btsc [W1],#0x5
    bset WREG4,#0x0
    btsc [W1],#0x4
    bset WREG2,#0x0
    btsc [W1],#0x3
    bset WREG2,#0x4
    btsc [W1],#0x2
    bset WREG2+1,#0x4
    btsc [W1],#0x1
    bset WREG3,#0x4

    ;Key+6
    btsc [W1],#0xF
    bset WREG5,#0x1
    btsc [W1],#0xE
    bset WREG4+1,#0x1
    btsc [W1],#0xD
    bset WREG4,#0x1
    btsc [W1],#0xC
    bset WREG2,#0x1
    btsc [W1],#0xB
    bset WREG2,#0x5
    btsc [W1],#0xA
    bset WREG2+1,#0x5
    btsc [W1++],#0x9
    bset WREG3,#0x5

    ;Key+5
    btsc [W1],#0x7
    bset WREG5,#0x2
    btsc [W1],#0x6
    bset WREG4+1,#0x2
    btsc [W1],#0x5
    bset WREG4,#0x2
    btsc [W1],#0x4
    bset WREG2,#0x2
    btsc [W1],#0x3
    bset WREG2,#0x6
    btsc [W1],#0x2
    bset WREG2+1,#0x6
    btsc [W1],#0x1
    bset WREG3,#0x6

    ;Key+4
    btsc [W1],#0xF
    bset WREG5,#0x3
    btsc [W1],#0xE
    bset WREG4+1,#0x3
    btsc [W1],#0xD
    bset WREG4,#0x3
    btsc [W1],#0xC
    bset WREG2,#0x3
    btsc [W1],#0xB
    bset WREG2,#0x7
    btsc [W1],#0xA
    bset WREG2+1,#0x7
    btsc [W1++],#0x9
    bset WREG3,#0x7

    ;Key+3
    btsc [W1],#0x7
    bset WREG5,#0x4
    btsc [W1],#0x6
    bset WREG4+1,#0x4
    btsc [W1],#0x5
    bset WREG4,#0x4
    btsc [W1],#0x4
    bset WREG3+1,#0x4
    btsc [W1],#0x3
    bset WREG2+1,#0x0
    btsc [W1],#0x2
    bset WREG3,#0x0
    btsc [W1],#0x1
    bset WREG3+1,#0x0

    ;Key+2
    btsc [W1],#0xF
    bset WREG5,#0x5
    btsc [W1],#0xE
    bset WREG4+1,#0x5
    btsc [W1],#0xD
    bset WREG4,#0x5
    btsc [W1],#0xC
    bset WREG3+1,#0x5
    btsc [W1],#0xB
    bset WREG2+1,#0x1
    btsc [W1],#0xA
    bset WREG3,#0x1
    btsc [W1++],#0x9
    bset WREG3+1,#0x1

    ;Key+1
    btsc [W1],#0x7
    bset WREG5,#0x6
    btsc [W1],#0x6
    bset WREG4+1,#0x6
    btsc [W1],#0x5
    bset WREG4,#0x6
    btsc [W1],#0x4
    bset WREG3+1,#0x6
    btsc [W1],#0x3
    bset WREG2+1,#0x2
    btsc [W1],#0x2
    bset WREG3,#0x2
    btsc [W1],#0x1
    bset WREG3+1,#0x2

    ;Key+0
    btsc [W1],#0xF
    bset WREG5,#0x7
    btsc [W1],#0xE
    bset WREG4+1,#0x7
    btsc [W1],#0xD
    bset WREG4,#0x7
    btsc [W1],#0xC
    bset WREG3+1,#0x7
    btsc [W1],#0xB
    bset WREG2+1,#0x3
    btsc [W1],#0xA
    bset WREG3,#0x3
    btsc [W1++],#0x9
    bset WREG3+1,#0x3

    ;prepare to calculate Kn
    mov #0x8000,W1
KeyScheduler2:    
    ;rotate Cn and Dn
    bclr SR,#0x0
    rlc WREG2
    rlc WREG3
    rlc WREG4
    rlc.b WREG5
    btsc WREG3+1,#0x4    
    bset WREG2,#0x0    
    bclr WREG3+1,#0x4
    btsc SR,#0x0    
    bset WREG3+1,#0x4
    
    mov #0b1100000010000001,W6
    and W6,W1,W6
    bra NZ,NoSecondShift2

    ;rotate Cn and Dn
    bclr SR,#0x0
    rlc WREG2
    rlc WREG3
    rlc WREG4
    rlc.b WREG5
    btsc WREG3+1,#0x4    
    bset WREG2,#0x0    
    bclr WREG3+1,#0x4
    btsc SR,#0x0    
    bset WREG3+1,#0x4

NoSecondShift2:
    ;calc PC^-2 of Cn/Dn

    ;for variables that exist in 48
    ;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
    ; 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0
    ;[        5            ][        4             ][        3             ][        2             ][          1           ][          0             ]
    ;for variables that exist in 56
    ;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56
    ; 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0
    ;[        6            ][        5             ][        4             ][        3             ][          2           ][          1            ][          0             ]
    ;for variables that exist in 64
    ;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64
    ; 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0
    ;[        7            ][        6             ][        5             ][         4            ][          3           ][          2            ][          1         ][          0             ]


    ;store the results in _Kn
    ;stored as [x x 1 2 3 4 5 6] so that S substitution is easier.
    btsc WREG3+1,#0x0
    bset.b [W0],#0x0
    btsc WREG3+1,#0x3
    bset.b [W0],#0x1
    btsc WREG3,#0x4
    bset.b [W0],#0x2
    btsc WREG2,#0x6
    bset.b [W0],#0x3
    btsc WREG2+1,#0x6
    bset.b [W0],#0x4
    btsc WREG2+1,#0x2
    bset.b [W0],#0x5

    inc W0,W0

    btsc WREG2,#0x3
    bset.b [W0],#0x0
    btsc WREG3,#0x6
    bset.b [W0],#0x1
    btsc WREG2,#0x0
    bset.b [W0],#0x2
    btsc WREG3,#0x1
    bset.b [W0],#0x3
    btsc WREG2,#0x7
    bset.b [W0],#0x4
    btsc WREG2+1,#0x4
    bset.b [W0],#0x5

    inc W0,W0

    btsc WREG2+1,#0x0
    bset.b [W0],#0x0
    btsc WREG3,#0x7
    bset.b [W0],#0x1
    btsc WREG2+1,#0x3
    bset.b [W0],#0x2
    btsc WREG2,#0x5
    bset.b [W0],#0x3    
    btsc WREG3,#0x0
    bset.b [W0],#0x4
    btsc WREG3+1,#0x2
    bset.b [W0],#0x5

    inc W0,W0

    btsc WREG2,#0x1
    bset.b [W0],#0x0
    btsc WREG2+1,#0x1
    bset.b [W0],#0x1
    btsc WREG3,#0x3
    bset.b [W0],#0x2
    btsc WREG3+1,#0x1
    bset.b [W0],#0x3
    btsc WREG2,#0x4
    bset.b [W0],#0x4
    btsc WREG2+1,#0x7
    bset.b [W0],#0x5

    inc W0,W0

    btsc WREG5,#0x6
    bset.b [W0],#0x0
    btsc WREG4+1,#0x3
    bset.b [W0],#0x1
    btsc WREG4,#0x4
    bset.b [W0],#0x2
    btsc WREG3+1,#0x5
    bset.b [W0],#0x3
    btsc WREG5,#0x1
    bset.b [W0],#0x4
    btsc WREG4+1,#0x0
    bset.b [W0],#0x5

    inc W0,W0

    btsc WREG5,#0x0
    bset.b [W0],#0x0
    btsc WREG3+1,#0x6
    bset.b [W0],#0x1
    btsc WREG5,#0x4
    bset.b [W0],#0x2
    btsc WREG4+1,#0x4
    bset.b [W0],#0x3
    btsc WREG4,#0x5
    bset.b [W0],#0x4
    btsc WREG4,#0x1
    bset.b [W0],#0x5

    inc W0,W0

    btsc WREG4+1,#0x6
    bset.b [W0],#0x0
    btsc WREG4,#0x3
    bset.b [W0],#0x1
    btsc WREG5,#0x2
    bset.b [W0],#0x2
    btsc WREG4+1,#0x1
    bset.b [W0],#0x3
    btsc WREG3+1,#0x4
    bset.b [W0],#0x4
    btsc WREG5,#0x5
    bset.b [W0],#0x5

    inc W0,W0

    btsc WREG5,#0x3
    bset.b [W0],#0x0
    btsc WREG5,#0x7
    bset.b [W0],#0x1
    btsc WREG4,#0x0
    bset.b [W0],#0x2
    btsc WREG4+1,#0x5
    bset.b [W0],#0x3
    btsc WREG4,#0x7
    bset.b [W0],#0x4
    btsc WREG4+1,#0x2
    bset.b [W0],#0x5

    inc W0,W0

    ;see if we are done with 16 rounds
    bclr SR,#0x0
    rrc W1,W1
    bra NZ,KeyScheduler2

    pop W6
    pop W5
    pop W4
    pop W3
    pop W2
    pop W1
    pop W0
return


.section *,psv

;       0x00,01,02,03,04,05,06,07,08,09,0a,0b,0c,0d,0e,0f,10,11,12,13,14,15,16,17,18,19,1a,1b,1c,1d,1e,1f,20,21,22,23,24,25,26,27,28,29,2a,2b,2c,2d,2e,2f,30,31,32,33,34,35,36,37,38,39,3a,3b,3c,3d,3e,3f
;          0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63
S8: .byte 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7,  1, 4, 10, 12,  9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8,  2, 13, 0, 15,  6, 12, 10, 9, 13, 0, 15, 3,  3, 5,  5, 6, 8, 11
S7: .byte 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3,  9, 5,  7, 12,  5, 2, 10, 15,  6, 8,  1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4,  7, 10, 14, 7, 10, 9, 15, 5,  6, 0,  8, 15,   0, 14,  5, 2,  9, 3,  2, 12
S6: .byte 12,  10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12,  6, 9, 8, 5, 0, 6, 13, 1, 3, 13,  4, 14,  14, 0,  7, 11,  5, 3, 11, 8, 9, 4, 14, 3, 15, 2,  5, 12,  2, 9,  8, 5, 12, 15,  3, 10, 7, 11,  0, 14,  4, 1, 10, 7,  1, 6, 13, 0, 11, 8,  6, 13
S5: .byte 2, 14,12,11,  4,2,  1,12,  7,4, 10,7, 11,13,  6,1, 8,5,  5,0,  3,15, 15,10, 13,3,  0,9, 14,8,  9,6, 4,11,  2,8,  1,12, 11,7, 10,1, 13,14,  7,2,  8,13, 15,6,  9,15, 12,0,  5,9,  6,10,  3,4,  0,5, 14,3
S4: .byte 7, 13,13,8, 14,11,  3,5,  0,6,  6,15,  9,0, 10,3, 1,4,  2,7,  8,2,  5,12, 11,1, 12,10,  4,14, 15,9, 10,3,  6,15,  9,0,  0,6, 12,10, 11,1,  7,13, 13,8, 15,9,  1,4,  3,5, 14,11,  5,12,  2,7,  8,2,  4,14
S3: .byte 10,13,  0,7,  9,0, 14,9,  6,3,  3,4, 15,6,  5,10,  1,2, 13,8, 12,5,  7,14, 11,12,  4,11,  2,15,  8,1, 13,1,  6,10,  4,13,  9,0,  8,6, 15,9,  3,8,  0,7, 11,4,  1,15,  2,14, 12,3,  5,11, 10,5, 14,2,  7,12
S2: .byte 15,3,  1,13,  8,4, 14,7,  6,15, 11,2,  3,8,  4,14, 9,12,  7,0,  2,1, 13,10, 12,6,  0,9,  5,11, 10,5,0,13, 14,8,  7,10, 11,1, 10,3,  4,15, 13,4,  1,2, 5,11,  8,6, 12,7,  6,12,  9,0,  3,5,  2,14, 15,9
S1:    .byte 14, 0, 4,15,13, 7, 1,4 , 2,14,15, 2,11,13, 8, 1, 3,10,10, 6, 6,12,12,11, 5, 9, 9, 5, 0, 3, 7, 8, 4,15, 1,12,14, 8, 8, 2,13, 4, 6, 9, 2, 1,11, 7,15, 5,12,11, 9, 3, 7,14, 3,10,10, 0, 5, 6, 0,13

E_Table:
    .byte 0x00, 0x00
    .byte 0x02, 0x00
    .byte 0x04, 0x00
    .byte 0x06, 0x00
    .byte 0x08, 0x00
    .byte 0x0A, 0x00
    .byte 0x0C, 0x00
    .byte 0x0E, 0x00
    .byte 0x10, 0x01
    .byte 0x12, 0x01
    .byte 0x14, 0x01
    .byte 0x16, 0x01
    .byte 0x18, 0x01
    .byte 0x1A, 0x01
    .byte 0x1C, 0x01
    .byte 0x1E, 0x01
    .byte 0x20, 0x02
    .byte 0x22, 0x02
    .byte 0x24, 0x02
    .byte 0x26, 0x02
    .byte 0x28, 0x02
    .byte 0x2A, 0x02
    .byte 0x2C, 0x02
    .byte 0x2E, 0x02
    .byte 0x30, 0x03
    .byte 0x32, 0x03
    .byte 0x34, 0x03
    .byte 0x36, 0x03
    .byte 0x38, 0x03
    .byte 0x3A, 0x03
    .byte 0x3C, 0x03
    .byte 0x3E, 0x03
    .byte 0x00, 0x04
    .byte 0x02, 0x04
    .byte 0x04, 0x04
    .byte 0x06, 0x04
    .byte 0x08, 0x04
    .byte 0x0A, 0x04
    .byte 0x0C, 0x04
    .byte 0x0E, 0x04
    .byte 0x10, 0x05
    .byte 0x12, 0x05
    .byte 0x14, 0x05
    .byte 0x16, 0x05
    .byte 0x18, 0x05
    .byte 0x1A, 0x05
    .byte 0x1C, 0x05
    .byte 0x1E, 0x05
    .byte 0x20, 0x06
    .byte 0x22, 0x06
    .byte 0x24, 0x06
    .byte 0x26, 0x06
    .byte 0x28, 0x06
    .byte 0x2A, 0x06
    .byte 0x2C, 0x06
    .byte 0x2E, 0x06
    .byte 0x30, 0x07
    .byte 0x32, 0x07
    .byte 0x34, 0x07
    .byte 0x36, 0x07
    .byte 0x38, 0x07
    .byte 0x3A, 0x07
    .byte 0x3C, 0x07
    .byte 0x3E, 0x07
    .byte 0x00, 0x08
    .byte 0x02, 0x08
    .byte 0x04, 0x08
    .byte 0x06, 0x08
    .byte 0x08, 0x08
    .byte 0x0A, 0x08
    .byte 0x0C, 0x08
    .byte 0x0E, 0x08
    .byte 0x10, 0x09
    .byte 0x12, 0x09
    .byte 0x14, 0x09
    .byte 0x16, 0x09
    .byte 0x18, 0x09
    .byte 0x1A, 0x09
    .byte 0x1C, 0x09
    .byte 0x1E, 0x09
    .byte 0x20, 0x0A
    .byte 0x22, 0x0A
    .byte 0x24, 0x0A
    .byte 0x26, 0x0A
    .byte 0x28, 0x0A
    .byte 0x2A, 0x0A
    .byte 0x2C, 0x0A
    .byte 0x2E, 0x0A
    .byte 0x30, 0x0B
    .byte 0x32, 0x0B
    .byte 0x34, 0x0B
    .byte 0x36, 0x0B
    .byte 0x38, 0x0B
    .byte 0x3A, 0x0B
    .byte 0x3C, 0x0B
    .byte 0x3E, 0x0B
    .byte 0x00, 0x0C
    .byte 0x02, 0x0C
    .byte 0x04, 0x0C
    .byte 0x06, 0x0C
    .byte 0x08, 0x0C
    .byte 0x0A, 0x0C
    .byte 0x0C, 0x0C
    .byte 0x0E, 0x0C
    .byte 0x10, 0x0D
    .byte 0x12, 0x0D
    .byte 0x14, 0x0D
    .byte 0x16, 0x0D
    .byte 0x18, 0x0D
    .byte 0x1A, 0x0D
    .byte 0x1C, 0x0D
    .byte 0x1E, 0x0D
    .byte 0x20, 0x0E
    .byte 0x22, 0x0E
    .byte 0x24, 0x0E
    .byte 0x26, 0x0E
    .byte 0x28, 0x0E
    .byte 0x2A, 0x0E
    .byte 0x2C, 0x0E
    .byte 0x2E, 0x0E
    .byte 0x30, 0x0F
    .byte 0x32, 0x0F
    .byte 0x34, 0x0F
    .byte 0x36, 0x0F
    .byte 0x38, 0x0F
    .byte 0x3A, 0x0F
    .byte 0x3C, 0x0F
    .byte 0x3E, 0x0F
    .byte 0x00, 0x10
    .byte 0x02, 0x10
    .byte 0x04, 0x10
    .byte 0x06, 0x10
    .byte 0x08, 0x10
    .byte 0x0A, 0x10
    .byte 0x0C, 0x10
    .byte 0x0E, 0x10
    .byte 0x10, 0x11
    .byte 0x12, 0x11
    .byte 0x14, 0x11
    .byte 0x16, 0x11
    .byte 0x18, 0x11
    .byte 0x1A, 0x11
    .byte 0x1C, 0x11
    .byte 0x1E, 0x11
    .byte 0x20, 0x12
    .byte 0x22, 0x12
    .byte 0x24, 0x12
    .byte 0x26, 0x12
    .byte 0x28, 0x12
    .byte 0x2A, 0x12
    .byte 0x2C, 0x12
    .byte 0x2E, 0x12
    .byte 0x30, 0x13
    .byte 0x32, 0x13
    .byte 0x34, 0x13
    .byte 0x36, 0x13
    .byte 0x38, 0x13
    .byte 0x3A, 0x13
    .byte 0x3C, 0x13
    .byte 0x3E, 0x13
    .byte 0x00, 0x14
    .byte 0x02, 0x14
    .byte 0x04, 0x14
    .byte 0x06, 0x14
    .byte 0x08, 0x14
    .byte 0x0A, 0x14
    .byte 0x0C, 0x14
    .byte 0x0E, 0x14
    .byte 0x10, 0x15
    .byte 0x12, 0x15
    .byte 0x14, 0x15
    .byte 0x16, 0x15
    .byte 0x18, 0x15
    .byte 0x1A, 0x15
    .byte 0x1C, 0x15
    .byte 0x1E, 0x15
    .byte 0x20, 0x16
    .byte 0x22, 0x16
    .byte 0x24, 0x16
    .byte 0x26, 0x16
    .byte 0x28, 0x16
    .byte 0x2A, 0x16
    .byte 0x2C, 0x16
    .byte 0x2E, 0x16
    .byte 0x30, 0x17
    .byte 0x32, 0x17
    .byte 0x34, 0x17
    .byte 0x36, 0x17
    .byte 0x38, 0x17
    .byte 0x3A, 0x17
    .byte 0x3C, 0x17
    .byte 0x3E, 0x17
    .byte 0x00, 0x18
    .byte 0x02, 0x18
    .byte 0x04, 0x18
    .byte 0x06, 0x18
    .byte 0x08, 0x18
    .byte 0x0A, 0x18
    .byte 0x0C, 0x18
    .byte 0x0E, 0x18
    .byte 0x10, 0x19
    .byte 0x12, 0x19
    .byte 0x14, 0x19
    .byte 0x16, 0x19
    .byte 0x18, 0x19
    .byte 0x1A, 0x19
    .byte 0x1C, 0x19
    .byte 0x1E, 0x19
    .byte 0x20, 0x1A
    .byte 0x22, 0x1A
    .byte 0x24, 0x1A
    .byte 0x26, 0x1A
    .byte 0x28, 0x1A
    .byte 0x2A, 0x1A
    .byte 0x2C, 0x1A
    .byte 0x2E, 0x1A
    .byte 0x30, 0x1B
    .byte 0x32, 0x1B
    .byte 0x34, 0x1B
    .byte 0x36, 0x1B
    .byte 0x38, 0x1B
    .byte 0x3A, 0x1B
    .byte 0x3C, 0x1B
    .byte 0x3E, 0x1B
    .byte 0x00, 0x1C
    .byte 0x02, 0x1C
    .byte 0x04, 0x1C
    .byte 0x06, 0x1C
    .byte 0x08, 0x1C
    .byte 0x0A, 0x1C
    .byte 0x0C, 0x1C
    .byte 0x0E, 0x1C
    .byte 0x10, 0x1D
    .byte 0x12, 0x1D
    .byte 0x14, 0x1D
    .byte 0x16, 0x1D
    .byte 0x18, 0x1D
    .byte 0x1A, 0x1D
    .byte 0x1C, 0x1D
    .byte 0x1E, 0x1D
    .byte 0x20, 0x1E
    .byte 0x22, 0x1E
    .byte 0x24, 0x1E
    .byte 0x26, 0x1E
    .byte 0x28, 0x1E
    .byte 0x2A, 0x1E
    .byte 0x2C, 0x1E
    .byte 0x2E, 0x1E
    .byte 0x30, 0x1F
    .byte 0x32, 0x1F
    .byte 0x34, 0x1F
    .byte 0x36, 0x1F
    .byte 0x38, 0x1F
    .byte 0x3A, 0x1F
    .byte 0x3C, 0x1F
    .byte 0x3E, 0x1F
    
    ;S1P table
S1P_table:
.byte 0x80,0x00,0x00,0x82
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x80
.byte 0x80,0x00,0x02,0x82
.byte 0x80,0x00,0x02,0x80
.byte 0x00,0x00,0x02,0x82
.byte 0x00,0x00,0x02,0x00
.byte 0x00,0x00,0x00,0x80
.byte 0x00,0x00,0x00,0x02
.byte 0x80,0x00,0x00,0x82
.byte 0x80,0x00,0x02,0x82
.byte 0x00,0x00,0x00,0x02
.byte 0x80,0x00,0x02,0x02
.byte 0x80,0x00,0x02,0x80
.byte 0x80,0x00,0x00,0x00
.byte 0x00,0x00,0x02,0x00
.byte 0x00,0x00,0x02,0x02
.byte 0x80,0x00,0x00,0x02
.byte 0x80,0x00,0x00,0x02
.byte 0x00,0x00,0x00,0x82
.byte 0x00,0x00,0x00,0x82
.byte 0x80,0x00,0x00,0x80
.byte 0x80,0x00,0x00,0x80
.byte 0x80,0x00,0x02,0x02
.byte 0x00,0x00,0x02,0x80
.byte 0x80,0x00,0x02,0x00
.byte 0x80,0x00,0x02,0x00
.byte 0x00,0x00,0x02,0x80
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x02,0x02
.byte 0x00,0x00,0x02,0x82
.byte 0x80,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x80
.byte 0x80,0x00,0x02,0x82
.byte 0x00,0x00,0x02,0x00
.byte 0x80,0x00,0x00,0x80
.byte 0x80,0x00,0x00,0x82
.byte 0x80,0x00,0x00,0x00
.byte 0x80,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x02
.byte 0x80,0x00,0x02,0x80
.byte 0x00,0x00,0x00,0x80
.byte 0x00,0x00,0x00,0x82
.byte 0x80,0x00,0x02,0x00
.byte 0x00,0x00,0x00,0x02
.byte 0x00,0x00,0x02,0x00
.byte 0x80,0x00,0x02,0x02
.byte 0x00,0x00,0x02,0x82
.byte 0x80,0x00,0x02,0x82
.byte 0x00,0x00,0x02,0x80
.byte 0x80,0x00,0x00,0x80
.byte 0x80,0x00,0x02,0x02
.byte 0x80,0x00,0x02,0x00
.byte 0x00,0x00,0x02,0x02
.byte 0x00,0x00,0x02,0x82
.byte 0x80,0x00,0x00,0x82
.byte 0x00,0x00,0x02,0x02
.byte 0x80,0x00,0x00,0x02
.byte 0x80,0x00,0x00,0x02
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x02,0x80
.byte 0x00,0x00,0x00,0x82
.byte 0x00,0x00,0x00,0x00
.byte 0x80,0x00,0x02,0x80
S2P_table:
.byte 0x08,0x40,0x10,0x40
.byte 0x00,0x40,0x00,0x40
.byte 0x00,0x00,0x00,0x40
.byte 0x08,0x00,0x10,0x40
.byte 0x08,0x00,0x00,0x00
.byte 0x00,0x00,0x10,0x00
.byte 0x08,0x40,0x10,0x00
.byte 0x00,0x40,0x10,0x40
.byte 0x00,0x40,0x10,0x00
.byte 0x08,0x40,0x10,0x40
.byte 0x08,0x40,0x00,0x40
.byte 0x00,0x40,0x00,0x00
.byte 0x00,0x40,0x00,0x40
.byte 0x08,0x00,0x00,0x00
.byte 0x00,0x00,0x10,0x00
.byte 0x08,0x40,0x10,0x00
.byte 0x08,0x00,0x00,0x40
.byte 0x08,0x00,0x10,0x00
.byte 0x00,0x40,0x10,0x40
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x40,0x00,0x00
.byte 0x00,0x00,0x00,0x40
.byte 0x08,0x00,0x10,0x40
.byte 0x08,0x40,0x00,0x00
.byte 0x08,0x00,0x10,0x00
.byte 0x00,0x40,0x10,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x08,0x00,0x00,0x40
.byte 0x00,0x00,0x10,0x40
.byte 0x08,0x40,0x00,0x40
.byte 0x08,0x40,0x00,0x00
.byte 0x00,0x00,0x10,0x40
.byte 0x00,0x00,0x00,0x00
.byte 0x08,0x00,0x10,0x40
.byte 0x08,0x40,0x10,0x00
.byte 0x08,0x00,0x00,0x00
.byte 0x00,0x40,0x10,0x40
.byte 0x08,0x40,0x00,0x00
.byte 0x08,0x40,0x00,0x40
.byte 0x00,0x00,0x00,0x40
.byte 0x08,0x40,0x00,0x00
.byte 0x00,0x40,0x00,0x40
.byte 0x00,0x00,0x10,0x00
.byte 0x08,0x40,0x10,0x40
.byte 0x08,0x00,0x10,0x40
.byte 0x00,0x00,0x10,0x00
.byte 0x00,0x00,0x00,0x40
.byte 0x00,0x40,0x00,0x00
.byte 0x00,0x00,0x10,0x40
.byte 0x08,0x40,0x00,0x40
.byte 0x08,0x00,0x00,0x00
.byte 0x00,0x40,0x10,0x00
.byte 0x08,0x00,0x10,0x00
.byte 0x00,0x40,0x10,0x40
.byte 0x00,0x40,0x10,0x00
.byte 0x08,0x00,0x10,0x00
.byte 0x08,0x00,0x00,0x40
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x40,0x00,0x40
.byte 0x00,0x00,0x10,0x40
.byte 0x00,0x40,0x00,0x00
.byte 0x08,0x40,0x10,0x00
.byte 0x08,0x40,0x10,0x40
.byte 0x08,0x00,0x00,0x40
S3P_table:
.byte 0x00,0x00,0x04,0x01
.byte 0x01,0x04,0x00,0x01
.byte 0x00,0x00,0x00,0x00
.byte 0x01,0x04,0x04,0x00
.byte 0x00,0x04,0x00,0x01
.byte 0x00,0x00,0x00,0x00
.byte 0x01,0x00,0x04,0x01
.byte 0x00,0x04,0x00,0x01
.byte 0x01,0x00,0x04,0x00
.byte 0x00,0x04,0x04,0x00
.byte 0x00,0x04,0x04,0x00
.byte 0x01,0x00,0x00,0x00
.byte 0x01,0x04,0x04,0x01
.byte 0x01,0x00,0x04,0x00
.byte 0x01,0x04,0x00,0x00
.byte 0x00,0x00,0x04,0x01
.byte 0x00,0x04,0x00,0x00
.byte 0x00,0x00,0x04,0x00
.byte 0x01,0x04,0x00,0x01
.byte 0x00,0x00,0x00,0x01
.byte 0x01,0x00,0x00,0x01
.byte 0x01,0x04,0x00,0x00
.byte 0x01,0x04,0x04,0x00
.byte 0x01,0x00,0x04,0x01
.byte 0x00,0x04,0x04,0x01
.byte 0x01,0x00,0x00,0x01
.byte 0x01,0x00,0x00,0x00
.byte 0x00,0x04,0x04,0x01
.byte 0x00,0x00,0x04,0x00
.byte 0x01,0x04,0x04,0x01
.byte 0x00,0x00,0x00,0x01
.byte 0x00,0x04,0x00,0x00
.byte 0x01,0x04,0x00,0x01
.byte 0x00,0x04,0x00,0x00
.byte 0x01,0x00,0x04,0x00
.byte 0x00,0x00,0x04,0x01
.byte 0x01,0x00,0x00,0x00
.byte 0x01,0x04,0x00,0x01
.byte 0x00,0x04,0x00,0x01
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x01
.byte 0x01,0x00,0x04,0x00
.byte 0x01,0x04,0x04,0x01
.byte 0x00,0x04,0x00,0x01
.byte 0x00,0x04,0x04,0x00
.byte 0x00,0x00,0x00,0x01
.byte 0x00,0x00,0x00,0x00
.byte 0x01,0x04,0x04,0x00
.byte 0x00,0x04,0x04,0x01
.byte 0x01,0x00,0x00,0x00
.byte 0x00,0x04,0x00,0x00
.byte 0x01,0x04,0x04,0x01
.byte 0x00,0x00,0x04,0x00
.byte 0x01,0x00,0x04,0x01
.byte 0x01,0x00,0x00,0x01
.byte 0x00,0x04,0x04,0x00
.byte 0x01,0x04,0x00,0x00
.byte 0x00,0x04,0x04,0x01
.byte 0x00,0x00,0x04,0x01
.byte 0x01,0x04,0x00,0x00
.byte 0x01,0x00,0x04,0x01
.byte 0x00,0x00,0x04,0x00
.byte 0x01,0x04,0x04,0x00
.byte 0x01,0x00,0x00,0x01
S4P_table:
.byte 0x40,0x80,0x00,0x10
.byte 0x00,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x10
.byte 0x00,0x00,0x40,0x00
.byte 0x40,0x00,0x40,0x10
.byte 0x40,0x80,0x40,0x00
.byte 0x40,0x80,0x00,0x00
.byte 0x00,0x80,0x00,0x10
.byte 0x00,0x00,0x00,0x00
.byte 0x40,0x00,0x00,0x10
.byte 0x40,0x00,0x00,0x10
.byte 0x40,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x40,0x00,0x40,0x00
.byte 0x40,0x80,0x00,0x00
.byte 0x00,0x80,0x00,0x00
.byte 0x00,0x00,0x00,0x10
.byte 0x40,0x00,0x00,0x00
.byte 0x40,0x80,0x00,0x10
.byte 0x00,0x00,0x40,0x00
.byte 0x40,0x00,0x00,0x00
.byte 0x00,0x80,0x00,0x10
.byte 0x00,0x00,0x40,0x10
.byte 0x40,0x80,0x40,0x00
.byte 0x00,0x80,0x00,0x00
.byte 0x00,0x00,0x40,0x10
.byte 0x40,0x00,0x40,0x00
.byte 0x00,0x00,0x00,0x10
.byte 0x40,0x00,0x40,0x10
.byte 0x40,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x00
.byte 0x40,0x00,0x40,0x00
.byte 0x40,0x80,0x00,0x00
.byte 0x40,0x00,0x00,0x10
.byte 0x40,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x40,0x00,0x00,0x10
.byte 0x00,0x00,0x40,0x10
.byte 0x40,0x00,0x40,0x00
.byte 0x40,0x80,0x40,0x00
.byte 0x00,0x80,0x00,0x00
.byte 0x40,0x80,0x00,0x10
.byte 0x00,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x10
.byte 0x00,0x00,0x40,0x00
.byte 0x40,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x00
.byte 0x00,0x80,0x00,0x00
.byte 0x00,0x00,0x00,0x10
.byte 0x40,0x80,0x00,0x00
.byte 0x00,0x80,0x00,0x10
.byte 0x40,0x00,0x40,0x10
.byte 0x40,0x80,0x40,0x00
.byte 0x00,0x80,0x00,0x10
.byte 0x00,0x00,0x40,0x10
.byte 0x40,0x00,0x00,0x00
.byte 0x40,0x80,0x00,0x10
.byte 0x00,0x00,0x40,0x00
.byte 0x40,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x10
.byte 0x40,0x00,0x40,0x10
S5P_table:
.byte 0x00,0x00,0x80,0x00
.byte 0x04,0x01,0x80,0x00
.byte 0x04,0x01,0x00,0x00
.byte 0x00,0x21,0x80,0x00
.byte 0x04,0x00,0x00,0x00
.byte 0x00,0x00,0x80,0x00
.byte 0x00,0x20,0x00,0x00
.byte 0x04,0x01,0x00,0x00
.byte 0x04,0x20,0x80,0x00
.byte 0x04,0x00,0x00,0x00
.byte 0x00,0x01,0x80,0x00
.byte 0x04,0x20,0x80,0x00
.byte 0x00,0x21,0x80,0x00
.byte 0x04,0x21,0x00,0x00
.byte 0x04,0x00,0x80,0x00
.byte 0x00,0x20,0x00,0x00
.byte 0x00,0x01,0x00,0x00
.byte 0x04,0x20,0x00,0x00
.byte 0x04,0x20,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x20,0x80,0x00
.byte 0x04,0x21,0x80,0x00
.byte 0x04,0x21,0x80,0x00
.byte 0x00,0x01,0x80,0x00
.byte 0x04,0x21,0x00,0x00
.byte 0x00,0x20,0x80,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x21,0x00,0x00
.byte 0x04,0x01,0x80,0x00
.byte 0x00,0x01,0x00,0x00
.byte 0x00,0x21,0x00,0x00
.byte 0x04,0x00,0x80,0x00
.byte 0x04,0x00,0x00,0x00
.byte 0x00,0x21,0x80,0x00
.byte 0x00,0x00,0x80,0x00
.byte 0x00,0x01,0x00,0x00
.byte 0x00,0x20,0x00,0x00
.byte 0x04,0x01,0x00,0x00
.byte 0x00,0x21,0x80,0x00
.byte 0x04,0x20,0x80,0x00
.byte 0x00,0x01,0x80,0x00
.byte 0x00,0x20,0x00,0x00
.byte 0x04,0x21,0x00,0x00
.byte 0x04,0x01,0x80,0x00
.byte 0x04,0x20,0x80,0x00
.byte 0x00,0x00,0x80,0x00
.byte 0x00,0x01,0x00,0x00
.byte 0x04,0x21,0x00,0x00
.byte 0x04,0x21,0x80,0x00
.byte 0x04,0x00,0x80,0x00
.byte 0x00,0x21,0x00,0x00
.byte 0x04,0x21,0x80,0x00
.byte 0x04,0x01,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x04,0x20,0x00,0x00
.byte 0x00,0x21,0x00,0x00
.byte 0x04,0x00,0x80,0x00
.byte 0x00,0x01,0x80,0x00
.byte 0x00,0x20,0x80,0x00
.byte 0x04,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x04,0x20,0x00,0x00
.byte 0x04,0x01,0x80,0x00
.byte 0x00,0x20,0x80,0x00
S6P_table:
.byte 0x00,0x10,0x08,0x00
.byte 0x20,0x10,0x00,0x00
.byte 0x00,0x00,0x00,0x20
.byte 0x20,0x10,0x08,0x20
.byte 0x20,0x10,0x00,0x00
.byte 0x00,0x00,0x08,0x00
.byte 0x20,0x10,0x08,0x20
.byte 0x20,0x00,0x00,0x00
.byte 0x00,0x10,0x00,0x20
.byte 0x20,0x00,0x08,0x20
.byte 0x20,0x00,0x00,0x00
.byte 0x00,0x10,0x08,0x00
.byte 0x20,0x00,0x08,0x00
.byte 0x00,0x10,0x00,0x20
.byte 0x00,0x10,0x00,0x00
.byte 0x00,0x00,0x08,0x20
.byte 0x00,0x00,0x00,0x00
.byte 0x20,0x00,0x08,0x00
.byte 0x00,0x10,0x08,0x20
.byte 0x00,0x00,0x00,0x20
.byte 0x20,0x00,0x00,0x20
.byte 0x00,0x10,0x08,0x20
.byte 0x00,0x00,0x08,0x00
.byte 0x20,0x10,0x08,0x00
.byte 0x20,0x10,0x08,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x20,0x00,0x08,0x20
.byte 0x20,0x10,0x00,0x20
.byte 0x00,0x00,0x08,0x20
.byte 0x20,0x00,0x00,0x20
.byte 0x20,0x10,0x00,0x20
.byte 0x00,0x10,0x00,0x00
.byte 0x00,0x10,0x00,0x20
.byte 0x00,0x00,0x08,0x00
.byte 0x20,0x10,0x08,0x00
.byte 0x20,0x00,0x00,0x20
.byte 0x20,0x10,0x08,0x20
.byte 0x20,0x00,0x00,0x00
.byte 0x00,0x00,0x08,0x20
.byte 0x00,0x10,0x08,0x00
.byte 0x20,0x00,0x00,0x00
.byte 0x00,0x10,0x00,0x20
.byte 0x00,0x10,0x00,0x00
.byte 0x00,0x00,0x08,0x20
.byte 0x00,0x10,0x08,0x00
.byte 0x20,0x10,0x08,0x20
.byte 0x20,0x00,0x00,0x20
.byte 0x20,0x10,0x00,0x00
.byte 0x20,0x00,0x08,0x20
.byte 0x20,0x10,0x00,0x20
.byte 0x00,0x00,0x00,0x00
.byte 0x20,0x10,0x08,0x00
.byte 0x00,0x00,0x08,0x00
.byte 0x00,0x00,0x00,0x20
.byte 0x20,0x10,0x00,0x00
.byte 0x20,0x00,0x08,0x20
.byte 0x00,0x00,0x00,0x20
.byte 0x20,0x00,0x08,0x00
.byte 0x00,0x10,0x08,0x20
.byte 0x00,0x00,0x00,0x00
.byte 0x20,0x10,0x00,0x20
.byte 0x00,0x10,0x00,0x00
.byte 0x20,0x00,0x08,0x00
.byte 0x00,0x10,0x08,0x20
S7P_table:
.byte 0x10,0x00,0x00,0x00
.byte 0x10,0x02,0x01,0x00
.byte 0x00,0x02,0x01,0x04
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x04
.byte 0x00,0x02,0x01,0x04
.byte 0x10,0x00,0x01,0x04
.byte 0x10,0x02,0x00,0x04
.byte 0x10,0x02,0x01,0x04
.byte 0x10,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x02,0x01,0x00
.byte 0x00,0x00,0x01,0x00
.byte 0x00,0x02,0x00,0x00
.byte 0x10,0x02,0x01,0x00
.byte 0x00,0x00,0x01,0x04
.byte 0x00,0x02,0x00,0x04
.byte 0x10,0x00,0x01,0x04
.byte 0x10,0x00,0x01,0x00
.byte 0x00,0x02,0x00,0x04
.byte 0x00,0x02,0x01,0x00
.byte 0x10,0x02,0x00,0x00
.byte 0x10,0x02,0x00,0x04
.byte 0x10,0x00,0x01,0x00
.byte 0x10,0x02,0x00,0x00
.byte 0x00,0x00,0x00,0x04
.byte 0x00,0x00,0x01,0x04
.byte 0x10,0x02,0x01,0x04
.byte 0x10,0x00,0x00,0x04
.byte 0x00,0x00,0x01,0x00
.byte 0x00,0x02,0x00,0x00
.byte 0x10,0x00,0x00,0x04
.byte 0x00,0x02,0x00,0x00
.byte 0x10,0x00,0x00,0x04
.byte 0x10,0x00,0x00,0x00
.byte 0x00,0x02,0x01,0x04
.byte 0x00,0x02,0x01,0x04
.byte 0x10,0x02,0x01,0x00
.byte 0x10,0x02,0x01,0x00
.byte 0x00,0x00,0x01,0x00
.byte 0x10,0x00,0x01,0x00
.byte 0x00,0x02,0x00,0x00
.byte 0x00,0x02,0x00,0x04
.byte 0x10,0x00,0x00,0x00
.byte 0x10,0x02,0x00,0x04
.byte 0x00,0x00,0x01,0x04
.byte 0x10,0x00,0x01,0x04
.byte 0x10,0x02,0x00,0x04
.byte 0x00,0x00,0x01,0x04
.byte 0x00,0x02,0x01,0x00
.byte 0x10,0x02,0x01,0x04
.byte 0x10,0x02,0x00,0x00
.byte 0x10,0x00,0x00,0x04
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x01,0x00
.byte 0x10,0x02,0x01,0x04
.byte 0x00,0x00,0x00,0x00
.byte 0x10,0x00,0x01,0x04
.byte 0x10,0x02,0x00,0x00
.byte 0x00,0x00,0x00,0x04
.byte 0x00,0x02,0x01,0x00
.byte 0x00,0x02,0x00,0x04
.byte 0x00,0x00,0x00,0x04
.byte 0x10,0x00,0x01,0x00
S8P_table:
.byte 0x00,0x08,0x20,0x08
.byte 0x00,0x00,0x00,0x08
.byte 0x02,0x00,0x00,0x00
.byte 0x02,0x08,0x20,0x08
.byte 0x00,0x08,0x00,0x00
.byte 0x00,0x08,0x20,0x08
.byte 0x00,0x00,0x20,0x00
.byte 0x00,0x08,0x00,0x00
.byte 0x02,0x00,0x20,0x00
.byte 0x02,0x08,0x00,0x00
.byte 0x02,0x08,0x20,0x08
.byte 0x02,0x00,0x00,0x08
.byte 0x02,0x08,0x00,0x08
.byte 0x02,0x00,0x20,0x08
.byte 0x00,0x00,0x00,0x08
.byte 0x00,0x00,0x20,0x00
.byte 0x02,0x08,0x00,0x00
.byte 0x00,0x08,0x20,0x00
.byte 0x00,0x08,0x00,0x08
.byte 0x00,0x00,0x20,0x08
.byte 0x02,0x00,0x00,0x08
.byte 0x02,0x00,0x20,0x00
.byte 0x02,0x08,0x20,0x00
.byte 0x02,0x08,0x00,0x08
.byte 0x00,0x00,0x20,0x08
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x02,0x08,0x20,0x00
.byte 0x00,0x08,0x20,0x00
.byte 0x00,0x08,0x00,0x08
.byte 0x02,0x00,0x20,0x08
.byte 0x02,0x00,0x00,0x00
.byte 0x02,0x00,0x20,0x08
.byte 0x02,0x00,0x00,0x00
.byte 0x02,0x08,0x00,0x08
.byte 0x00,0x00,0x00,0x08
.byte 0x00,0x00,0x20,0x00
.byte 0x02,0x08,0x20,0x00
.byte 0x00,0x00,0x00,0x08
.byte 0x02,0x00,0x20,0x08
.byte 0x00,0x08,0x00,0x08
.byte 0x00,0x00,0x20,0x00
.byte 0x00,0x08,0x20,0x00
.byte 0x02,0x08,0x00,0x00
.byte 0x02,0x08,0x20,0x00
.byte 0x00,0x08,0x00,0x00
.byte 0x02,0x00,0x00,0x00
.byte 0x00,0x08,0x20,0x08
.byte 0x00,0x00,0x00,0x00
.byte 0x02,0x08,0x20,0x08
.byte 0x02,0x00,0x20,0x00
.byte 0x00,0x08,0x20,0x00
.byte 0x02,0x08,0x00,0x00
.byte 0x00,0x08,0x00,0x08
.byte 0x00,0x08,0x20,0x08
.byte 0x00,0x00,0x00,0x00
.byte 0x02,0x08,0x20,0x08
.byte 0x02,0x00,0x00,0x08
.byte 0x02,0x00,0x00,0x08
.byte 0x00,0x00,0x20,0x08
.byte 0x00,0x00,0x20,0x08
.byte 0x02,0x00,0x20,0x00
.byte 0x00,0x08,0x00,0x00
.byte 0x02,0x08,0x00,0x08
 

    .end
