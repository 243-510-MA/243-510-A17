

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Jul 13 13:03:51 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001AAA                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _ADDRESS_DATA_PIPE0
    42  001AAA  05                 	db	5
    43  001AAB  04                 	db	4
    44  001AAC  03                 	db	3
    45  001AAD  02                 	db	2
    46  001AAE  01                 	db	1
    47                           
    48                           	psect	smallconst
    49  001000                     __psmallconst:
    50                           	opt stack 0
    51  001000  00                 	db	0
    52  001001                     _dpowers:
    53                           	opt stack 0
    54  001001  0001               	dw	1
    55  001003  000A               	dw	10
    56  001005  0064               	dw	100
    57  001007  03E8               	dw	1000
    58  001009  2710               	dw	10000
    59  00100B                     __end_of_dpowers:
    60                           	opt stack 0
    61  0000                     _ANSELA	set	3896
    62  0000                     _ANSELB	set	3897
    63  0000                     _ANSELC	set	3898
    64  0000                     _ANSELD	set	3899
    65  0000                     _ANSELE	set	3900
    66  0000                     _LATDbits	set	3980
    67  0000                     _OSCCON	set	4051
    68  0000                     _OSCTUNEbits	set	3995
    69  0000                     _PORTA	set	3968
    70  0000                     _PORTB	set	3969
    71  0000                     _PORTC	set	3970
    72  0000                     _PORTD	set	3971
    73  0000                     _PORTE	set	3972
    74  0000                     _SSP1BUF	set	4041
    75  0000                     _SSP1CON1	set	4038
    76  0000                     _SSP1STAT	set	4039
    77  0000                     _SSP1STATbits	set	4039
    78  0000                     _TRISA	set	3986
    79  0000                     _TRISAbits	set	3986
    80  0000                     _TRISB	set	3987
    81  0000                     _TRISC	set	3988
    82  0000                     _TRISCbits	set	3988
    83  0000                     _TRISD	set	3989
    84  0000                     _TRISDbits	set	3989
    85  0000                     _TRISE	set	3990
    86  00100B                     STR_1:
    87  00100B  6E                 	db	110	;'n'
    88  00100C  52                 	db	82	;'R'
    89  00100D  46                 	db	70	;'F'
    90  00100E  32                 	db	50	;'2'
    91  00100F  34                 	db	52	;'4'
    92  001010  6C                 	db	108	;'l'
    93  001011  30                 	db	48	;'0'
    94  001012  31                 	db	49	;'1'
    95  001013  20                 	db	32
    96  001014  54                 	db	84	;'T'
    97  001015  58                 	db	88	;'X'
    98  001016  20                 	db	32
    99  001017  4D                 	db	77	;'M'
   100  001018  6F                 	db	111	;'o'
   101  001019  64                 	db	100	;'d'
   102  00101A  65                 	db	101	;'e'
   103  00101B  00                 	db	0
   104  00101C                     STR_2:
   105  00101C  53                 	db	83	;'S'
   106  00101D  65                 	db	101	;'e'
   107  00101E  6E                 	db	110	;'n'
   108  00101F  64                 	db	100	;'d'
   109  001020  69                 	db	105	;'i'
   110  001021  6E                 	db	110	;'n'
   111  001022  67                 	db	103	;'g'
   112  001023  3A                 	db	58	;':'
   113  001024  20                 	db	32
   114  001025  25                 	db	37
   115  001026  30                 	db	48	;'0'
   116  001027  33                 	db	51	;'3'
   117  001028  64                 	db	100	;'d'
   118  001029  00                 	db	0
   119  0000                     
   120                           ; #config settings
   121  00102A  00                 	db	0	; dummy byte at the end
   122  0000                     
   123                           	psect	cinit
   124  001994                     __pcinit:
   125                           	opt stack 0
   126  001994                     start_initialization:
   127                           	opt stack 0
   128  001994                     __initialization:
   129                           	opt stack 0
   130                           
   131                           ; Initialize objects allocated to COMRAM (5 bytes)
   132                           ; load TBLPTR registers with __pidataCOMRAM
   133  001994  0EAA               	movlw	low __pidataCOMRAM
   134  001996  6EF6               	movwf	tblptrl,c
   135  001998  0E1A               	movlw	high __pidataCOMRAM
   136  00199A  6EF7               	movwf	tblptrh,c
   137  00199C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   138  00199E  6EF8               	movwf	tblptru,c
   139  0019A0  EE00  F055         	lfsr	0,__pdataCOMRAM
   140  0019A4  EE10 F005          	lfsr	1,5
   141  0019A8                     copy_data0:
   142  0019A8  0009               	tblrd		*+
   143  0019AA  CFF5 FFEE          	movff	tablat,postinc0
   144  0019AE  50E5               	movf	postdec1,w,c
   145  0019B0  50E1               	movf	fsr1l,w,c
   146  0019B2  E1FA               	bnz	copy_data0
   147  0019B4                     end_of_initialization:
   148                           	opt stack 0
   149  0019B4                     __end_of__initialization:
   150                           	opt stack 0
   151  0019B4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   152  0019B6  6EF8               	movwf	tblptru,c
   153  0019B8  0100               	movlb	0
   154  0019BA  EF5D  F009         	goto	_main	;jump to C main() function
   155                           tblptru	equ	0xFF8
   156                           tblptrh	equ	0xFF7
   157                           tblptrl	equ	0xFF6
   158                           tablat	equ	0xFF5
   159                           postinc0	equ	0xFEE
   160                           postdec1	equ	0xFE5
   161                           fsr1l	equ	0xFE1
   162                           
   163                           	psect	dataCOMRAM
   164  000055                     __pdataCOMRAM:
   165                           	opt stack 0
   166  000055                     _ADDRESS_DATA_PIPE0:
   167                           	opt stack 0
   168  000055                     	ds	5
   169                           tblptru	equ	0xFF8
   170                           tblptrh	equ	0xFF7
   171                           tblptrl	equ	0xFF6
   172                           tablat	equ	0xFF5
   173                           postinc0	equ	0xFEE
   174                           postdec1	equ	0xFE5
   175                           fsr1l	equ	0xFE1
   176                           
   177                           	psect	cstackCOMRAM
   178  000001                     __pcstackCOMRAM:
   179                           	opt stack 0
   180  000001                     ??_Lcd_Delay5500us:
   181  000001                     ??_isdigit:
   182  000001                     ?___wmul:
   183                           	opt stack 0
   184  000001                     ?___lwdiv:
   185                           	opt stack 0
   186  000001                     SPI1_Write@data:
   187                           	opt stack 0
   188  000001                     Delay_ms@count:
   189                           	opt stack 0
   190  000001                     ___wmul@multiplier:
   191                           	opt stack 0
   192  000001                     ___lwdiv@dividend:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0x0
   196  000001                     	ds	1
   197  000002                     ??_Lcd_Command:
   198  000002                     ??_Lcd_CharCP:
   199  000002                     NRF24L01_WriteRegister@value:
   200                           	opt stack 0
   201  000002                     _isdigit$1009:
   202                           	opt stack 0
   203  000002                     NRF24L01_WriteBuffer@buffer:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x1
   207  000002                     	ds	1
   208  000003                     ??_Delay_ms:
   209  000003                     NRF24L01_WriteRegister@Mnemonic:
   210                           	opt stack 0
   211  000003                     isdigit@c:
   212                           	opt stack 0
   213  000003                     ___wmul@multiplicand:
   214                           	opt stack 0
   215  000003                     ___lwdiv@divisor:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x2
   219  000003                     	ds	1
   220  000004                     Lcd_CharCP@c:
   221                           	opt stack 0
   222  000004                     Lcd_Command@command:
   223                           	opt stack 0
   224  000004                     NRF24L01_WriteBuffer@bytes:
   225                           	opt stack 0
   226  000004                     NRF24L01_SetMode@mode:
   227                           	opt stack 0
   228  000004                     NRF24L01_SetChannel@rf_channel:
   229                           	opt stack 0
   230  000004                     Delay_ms@i:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x3
   234  000004                     	ds	1
   235  000005                     Lcd_Init@data:
   236                           	opt stack 0
   237  000005                     Lcd_ConstText@x:
   238                           	opt stack 0
   239  000005                     Lcd_Text@x:
   240                           	opt stack 0
   241  000005                     NRF24L01_WriteBuffer@data:
   242                           	opt stack 0
   243  000005                     ___wmul@product:
   244                           	opt stack 0
   245  000005                     ___lwdiv@quotient:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x4
   249  000005                     	ds	1
   250  000006                     NRF24L01_WriteBuffer@i:
   251                           	opt stack 0
   252  000006                     Lcd_ConstText@buffer:
   253                           	opt stack 0
   254  000006                     Lcd_Text@buffer:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x5
   258  000006                     	ds	1
   259  000007                     NRF24L01_Init@rf_channel:
   260                           	opt stack 0
   261  000007                     ___lwdiv@counter:
   262                           	opt stack 0
   263  000007                     NRF24L01_SendData@buffer:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x6
   267  000007                     	ds	1
   268  000008                     ?___lwmod:
   269                           	opt stack 0
   270  000008                     Lcd_ConstText@y:
   271                           	opt stack 0
   272  000008                     Lcd_Text@y:
   273                           	opt stack 0
   274  000008                     NRF24L01_Init@mode:
   275                           	opt stack 0
   276  000008                     ___lwmod@dividend:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0x7
   280  000008                     	ds	1
   281  000009                     Lcd_ConstText@data:
   282                           	opt stack 0
   283  000009                     Lcd_Text@data:
   284                           	opt stack 0
   285                           
   286                           ; 1 bytes @ 0x8
   287  000009                     	ds	1
   288  00000A                     ___lwmod@divisor:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x9
   292  00000A                     	ds	2
   293  00000C                     ___lwmod@counter:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0xB
   297  00000C                     	ds	1
   298  00000D                     ?_sprintf:
   299                           	opt stack 0
   300  00000D                     sprintf@sp:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0xC
   304  00000D                     	ds	2
   305  00000F                     sprintf@f:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0xE
   309  00000F                     	ds	4
   310  000013                     ??_sprintf:
   311                           
   312                           ; 0 bytes @ 0x12
   313  000013                     	ds	4
   314  000017                     sprintf@ap:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x16
   318  000017                     	ds	2
   319  000019                     sprintf@prec:
   320                           	opt stack 0
   321                           
   322                           ; 1 bytes @ 0x18
   323  000019                     	ds	1
   324  00001A                     sprintf@val:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x19
   328  00001A                     	ds	2
   329  00001C                     sprintf@flag:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0x1B
   333  00001C                     	ds	1
   334  00001D                     sprintf@width:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x1C
   338  00001D                     	ds	2
   339  00001F                     sprintf@c:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x1E
   343  00001F                     	ds	1
   344  000020                     main@bufferTX:
   345                           	opt stack 0
   346                           
   347                           ; 32 bytes @ 0x1F
   348  000020                     	ds	32
   349  000040                     main@buffer1:
   350                           	opt stack 0
   351                           
   352                           ; 20 bytes @ 0x3F
   353  000040                     	ds	20
   354  000054                     main@i:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x53
   358  000054                     	ds	1
   359                           tblptru	equ	0xFF8
   360                           tblptrh	equ	0xFF7
   361                           tblptrl	equ	0xFF6
   362                           tablat	equ	0xFF5
   363                           postinc0	equ	0xFEE
   364                           postdec1	equ	0xFE5
   365                           fsr1l	equ	0xFE1
   366                           
   367 ;;
   368 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   369 ;;
   370 ;; *************** function _main *****************
   371 ;; Defined at:
   372 ;;		line 16 in file "TXmain.c"
   373 ;; Parameters:    Size  Location     Type
   374 ;;		None
   375 ;; Auto vars:     Size  Location     Type
   376 ;;  bufferTX       32   31[COMRAM] unsigned char [32]
   377 ;;  buffer1        20   63[COMRAM] unsigned char [20]
   378 ;;  i               1   83[COMRAM] unsigned char 
   379 ;; Return value:  Size  Location     Type
   380 ;;		None               void
   381 ;; Registers used:
   382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : 0/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   389 ;;      Locals:        53       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   391 ;;      Totals:        53       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   392 ;;Total ram usage:       53 bytes
   393 ;; Hardware stack levels required when called:    4
   394 ;; This function calls:
   395 ;;		_Delay_ms
   396 ;;		_Lcd_Command
   397 ;;		_Lcd_ConstText
   398 ;;		_Lcd_Init
   399 ;;		_Lcd_Text
   400 ;;		_NRF24L01_Init
   401 ;;		_NRF24L01_SendData
   402 ;;		_SPI1_Close
   403 ;;		_SPI1_Init
   404 ;;		_sprintf
   405 ;; This function is called by:
   406 ;;		Startup code after reset
   407 ;; This function uses a non-reentrant model
   408 ;;
   409                           
   410                           	psect	text0
   411  0012BA                     __ptext0:
   412                           	opt stack 0
   413  0012BA                     _main:
   414                           	opt stack 27
   415                           
   416                           ;TXmain.c: 17: unsigned char i;
   417                           ;TXmain.c: 18: char buffer1[20];
   418                           ;TXmain.c: 19: unsigned char bufferTX[32];
   419                           ;TXmain.c: 20: OSCCON = 0b01110000;
   420                           
   421                           ;incstack = 0
   422  0012BA  0E70               	movlw	112
   423  0012BC  6ED3               	movwf	4051,c	;volatile
   424                           
   425                           ;TXmain.c: 21: OSCTUNEbits.PLLEN = 1;
   426  0012BE  8C9B               	bsf	3995,6,c	;volatile
   427                           
   428                           ;TXmain.c: 22: ANSELA = 0; ANSELB = 0; ANSELC = 0; ANSELD = 0; ANSELE = 0;
   429  0012C0  0E00               	movlw	0
   430  0012C2  010F               	movlb	15	; () banked
   431  0012C4  6F38               	movwf	56,b	;volatile
   432  0012C6  0E00               	movlw	0
   433  0012C8  010F               	movlb	15	; () banked
   434  0012CA  6F39               	movwf	57,b	;volatile
   435  0012CC  0E00               	movlw	0
   436  0012CE  010F               	movlb	15	; () banked
   437  0012D0  6F3A               	movwf	58,b	;volatile
   438  0012D2  0E00               	movlw	0
   439  0012D4  010F               	movlb	15	; () banked
   440  0012D6  6F3B               	movwf	59,b	;volatile
   441  0012D8  0E00               	movlw	0
   442  0012DA  010F               	movlb	15	; () banked
   443  0012DC  6F3C               	movwf	60,b	;volatile
   444                           
   445                           ;TXmain.c: 23: PORTA = 0; PORTB = 0; PORTC = 0; PORTD = 0; PORTE = 0;
   446  0012DE  0E00               	movlw	0
   447  0012E0  6E80               	movwf	3968,c	;volatile
   448  0012E2  0E00               	movlw	0
   449  0012E4  6E81               	movwf	3969,c	;volatile
   450  0012E6  0E00               	movlw	0
   451  0012E8  6E82               	movwf	3970,c	;volatile
   452  0012EA  0E00               	movlw	0
   453  0012EC  6E83               	movwf	3971,c	;volatile
   454  0012EE  0E00               	movlw	0
   455  0012F0  6E84               	movwf	3972,c	;volatile
   456                           
   457                           ;TXmain.c: 24: TRISA = 0; TRISB = 0; TRISC = 0; TRISD = 0; TRISE = 0;
   458  0012F2  0E00               	movlw	0
   459  0012F4  6E92               	movwf	3986,c	;volatile
   460  0012F6  0E00               	movlw	0
   461  0012F8  6E93               	movwf	3987,c	;volatile
   462  0012FA  0E00               	movlw	0
   463  0012FC  6E94               	movwf	3988,c	;volatile
   464  0012FE  0E00               	movlw	0
   465  001300  6E95               	movwf	3989,c	;volatile
   466  001302  0E00               	movlw	0
   467  001304  6E96               	movwf	3990,c	;volatile
   468                           
   469                           ; BSR set to: 15
   470                           ;TXmain.c: 25: SPI1_Close();
   471  001306  EC58  F00D         	call	_SPI1_Close	;wreg free
   472                           
   473                           ;TXmain.c: 26: SPI1_Init();
   474  00130A  EC2C  F00D         	call	_SPI1_Init	;wreg free
   475                           
   476                           ;TXmain.c: 27: Lcd_Init();
   477  00130E  EC14  F00B         	call	_Lcd_Init	;wreg free
   478                           
   479                           ;TXmain.c: 28: Lcd_Command(1);
   480  001312  0E01               	movlw	1
   481  001314  EC89  F00A         	call	_Lcd_Command
   482                           
   483                           ;TXmain.c: 29: Lcd_Command(12);
   484  001318  0E0C               	movlw	12
   485  00131A  EC89  F00A         	call	_Lcd_Command
   486                           
   487                           ;TXmain.c: 30: Lcd_ConstText(1, 1, "nRF24l01 TX Mode");
   488  00131E  0E01               	movlw	1
   489  001320  6E05               	movwf	Lcd_ConstText@x,c
   490  001322  0E0B               	movlw	low STR_1
   491  001324  6E06               	movwf	Lcd_ConstText@buffer,c
   492  001326  0E10               	movlw	high STR_1
   493  001328  6E07               	movwf	Lcd_ConstText@buffer+1,c
   494  00132A  0E01               	movlw	1
   495  00132C  ECCE  F00B         	call	_Lcd_ConstText
   496                           
   497                           ;TXmain.c: 32: NRF24L01_Init(2, 0x40);
   498  001330  0E40               	movlw	64
   499  001332  6E07               	movwf	NRF24L01_Init@rf_channel,c
   500  001334  0E02               	movlw	2
   501  001336  EC75  F00B         	call	_NRF24L01_Init
   502  00133A                     l1772:
   503                           
   504                           ;TXmain.c: 34: {
   505                           ;TXmain.c: 35: bufferTX[0] = 1;
   506  00133A  0E01               	movlw	1
   507  00133C  6E20               	movwf	main@bufferTX,c
   508                           
   509                           ;TXmain.c: 36: for(i = 0; i < 8; i++)
   510  00133E  0E00               	movlw	0
   511  001340  6E54               	movwf	main@i,c
   512  001342                     l1776:
   513  001342  0E07               	movlw	7
   514  001344  6454               	cpfsgt	main@i,c
   515  001346  D001               	goto	l1780
   516  001348  D027               	goto	l1794
   517  00134A                     l1780:
   518                           
   519                           ;TXmain.c: 37: {
   520                           ;TXmain.c: 38: NRF24L01_SendData(bufferTX);
   521  00134A  0E20               	movlw	low main@bufferTX
   522  00134C  6E07               	movwf	NRF24L01_SendData@buffer,c
   523  00134E  0E00               	movlw	high main@bufferTX
   524  001350  6E08               	movwf	NRF24L01_SendData@buffer+1,c
   525  001352  ECDF  F00C         	call	_NRF24L01_SendData	;wreg free
   526                           
   527                           ;TXmain.c: 39: sprintf(buffer1, "Sending: %03d", bufferTX[0]);
   528  001356  0E40               	movlw	low main@buffer1
   529  001358  6E0D               	movwf	sprintf@sp,c
   530  00135A  0E00               	movlw	high main@buffer1
   531  00135C  6E0E               	movwf	sprintf@sp+1,c
   532  00135E  0E1C               	movlw	low STR_2
   533  001360  6E0F               	movwf	sprintf@f,c
   534  001362  0E10               	movlw	high STR_2
   535  001364  6E10               	movwf	sprintf@f+1,c
   536  001366  C020  F011         	movff	main@bufferTX,?_sprintf+4
   537  00136A  6A12               	clrf	?_sprintf+5,c
   538  00136C  EC16  F008         	call	_sprintf	;wreg free
   539                           
   540                           ;TXmain.c: 40: Lcd_Text(2, 3, buffer1);
   541  001370  0E03               	movlw	3
   542  001372  6E05               	movwf	Lcd_Text@x,c
   543  001374  0E40               	movlw	low main@buffer1
   544  001376  6E06               	movwf	Lcd_Text@buffer,c
   545  001378  0E00               	movlw	high main@buffer1
   546  00137A  6E07               	movwf	Lcd_Text@buffer+1,c
   547  00137C  0E02               	movlw	2
   548  00137E  EC02  F00C         	call	_Lcd_Text
   549                           
   550                           ;TXmain.c: 41: bufferTX[0] = bufferTX[0] << 1;
   551  001382  5020               	movf	main@bufferTX,w,c
   552  001384  2420               	addwf	main@bufferTX,w,c
   553  001386  6E20               	movwf	main@bufferTX,c
   554                           
   555                           ;TXmain.c: 42: Delay_ms(300);
   556  001388  0E01               	movlw	1
   557  00138A  6E02               	movwf	Delay_ms@count+1,c
   558  00138C  0E2C               	movlw	44
   559  00138E  6E01               	movwf	Delay_ms@count,c
   560  001390  ECB4  F00C         	call	_Delay_ms	;wreg free
   561  001394  2A54               	incf	main@i,f,c
   562  001396  D7D5               	goto	l1776
   563  001398                     l1794:
   564                           
   565                           ;TXmain.c: 43: }
   566                           ;TXmain.c: 44: bufferTX[0] = 128;
   567  001398  0E80               	movlw	128
   568  00139A  6E20               	movwf	main@bufferTX,c
   569                           
   570                           ;TXmain.c: 45: for(i = 0; i < 6; i++)
   571  00139C  0E00               	movlw	0
   572  00139E  6E54               	movwf	main@i,c
   573  0013A0                     l1796:
   574  0013A0  0E05               	movlw	5
   575  0013A2  6454               	cpfsgt	main@i,c
   576  0013A4  D001               	goto	l1800
   577  0013A6  D7C9               	goto	l1772
   578  0013A8                     l1800:
   579                           
   580                           ;TXmain.c: 46: {
   581                           ;TXmain.c: 47: bufferTX[0] = bufferTX[0] >> 1;
   582  0013A8  90D8               	bcf	status,0,c
   583  0013AA  3020               	rrcf	main@bufferTX,w,c
   584  0013AC  6E20               	movwf	main@bufferTX,c
   585                           
   586                           ;TXmain.c: 48: NRF24L01_SendData(bufferTX);
   587  0013AE  0E20               	movlw	low main@bufferTX
   588  0013B0  6E07               	movwf	NRF24L01_SendData@buffer,c
   589  0013B2  0E00               	movlw	high main@bufferTX
   590  0013B4  6E08               	movwf	NRF24L01_SendData@buffer+1,c
   591  0013B6  ECDF  F00C         	call	_NRF24L01_SendData	;wreg free
   592                           
   593                           ;TXmain.c: 49: sprintf(buffer1, "Sending: %03d", bufferTX[0]);
   594  0013BA  0E40               	movlw	low main@buffer1
   595  0013BC  6E0D               	movwf	sprintf@sp,c
   596  0013BE  0E00               	movlw	high main@buffer1
   597  0013C0  6E0E               	movwf	sprintf@sp+1,c
   598  0013C2  0E1C               	movlw	low STR_2
   599  0013C4  6E0F               	movwf	sprintf@f,c
   600  0013C6  0E10               	movlw	high STR_2
   601  0013C8  6E10               	movwf	sprintf@f+1,c
   602  0013CA  C020  F011         	movff	main@bufferTX,?_sprintf+4
   603  0013CE  6A12               	clrf	?_sprintf+5,c
   604  0013D0  EC16  F008         	call	_sprintf	;wreg free
   605                           
   606                           ;TXmain.c: 50: Lcd_Text(2, 3, buffer1);
   607  0013D4  0E03               	movlw	3
   608  0013D6  6E05               	movwf	Lcd_Text@x,c
   609  0013D8  0E40               	movlw	low main@buffer1
   610  0013DA  6E06               	movwf	Lcd_Text@buffer,c
   611  0013DC  0E00               	movlw	high main@buffer1
   612  0013DE  6E07               	movwf	Lcd_Text@buffer+1,c
   613  0013E0  0E02               	movlw	2
   614  0013E2  EC02  F00C         	call	_Lcd_Text
   615                           
   616                           ;TXmain.c: 51: Delay_ms(300);
   617  0013E6  0E01               	movlw	1
   618  0013E8  6E02               	movwf	Delay_ms@count+1,c
   619  0013EA  0E2C               	movlw	44
   620  0013EC  6E01               	movwf	Delay_ms@count,c
   621  0013EE  ECB4  F00C         	call	_Delay_ms	;wreg free
   622  0013F2  2A54               	incf	main@i,f,c
   623  0013F4  D7D5               	goto	l1796
   624  0013F6  D7FF               	goto	l244
   625  0013F8                     __end_of_main:
   626                           	opt stack 0
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           postinc0	equ	0xFEE
   632                           postdec1	equ	0xFE5
   633                           fsr1l	equ	0xFE1
   634                           status	equ	0xFD8
   635                           
   636 ;; *************** function _sprintf *****************
   637 ;; Defined at:
   638 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;  sp              2   12[COMRAM] PTR unsigned char 
   641 ;;		 -> main@buffer1(20), 
   642 ;;  f               2   14[COMRAM] PTR const unsigned char 
   643 ;;		 -> STR_3(14), STR_2(14), 
   644 ;; Auto vars:     Size  Location     Type
   645 ;;  tmpval          4    0        struct .
   646 ;;  cp              3    0        PTR const unsigned char 
   647 ;;  width           2   28[COMRAM] int 
   648 ;;  val             2   25[COMRAM] unsigned int 
   649 ;;  ap              2   22[COMRAM] PTR void [1]
   650 ;;		 -> ?_sprintf(2), 
   651 ;;  len             2    0        unsigned int 
   652 ;;  c               1   30[COMRAM] char 
   653 ;;  flag            1   27[COMRAM] unsigned char 
   654 ;;  prec            1   24[COMRAM] char 
   655 ;; Return value:  Size  Location     Type
   656 ;;                  2   12[COMRAM] int 
   657 ;; Registers used:
   658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   659 ;; Tracked objects:
   660 ;;		On entry : 0/0
   661 ;;		On exit  : 0/0
   662 ;;		Unchanged: 0/0
   663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   664 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   665 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   666 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   667 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   668 ;;Total ram usage:       19 bytes
   669 ;; Hardware stack levels used:    1
   670 ;; Hardware stack levels required when called:    1
   671 ;; This function calls:
   672 ;;		___lwdiv
   673 ;;		___lwmod
   674 ;;		___wmul
   675 ;;		_isdigit
   676 ;; This function is called by:
   677 ;;		_main
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           	psect	text1
   682  00102C                     __ptext1:
   683                           	opt stack 0
   684  00102C                     _sprintf:
   685                           	opt stack 29
   686                           
   687                           ;doprnt.c: 494: va_list ap;
   688                           ;doprnt.c: 499: signed char c;
   689                           ;doprnt.c: 501: int width;
   690                           ;doprnt.c: 506: signed char prec;
   691                           ;doprnt.c: 508: unsigned char flag;
   692                           ;doprnt.c: 523: union {
   693                           ;doprnt.c: 524: unsigned long vd;
   694                           ;doprnt.c: 525: double integ;
   695                           ;doprnt.c: 526: } tmpval;
   696                           ;doprnt.c: 528: unsigned int val;
   697                           ;doprnt.c: 529: unsigned len;
   698                           ;doprnt.c: 530: const char * cp;
   699                           ;doprnt.c: 533: *ap = __va_start();
   700                           
   701                           ;incstack = 0
   702  00102C  0E11               	movlw	low (?_sprintf+4)
   703  00102E  6E17               	movwf	sprintf@ap,c
   704  001030  0E00               	movlw	high (?_sprintf+4)
   705  001032  6E18               	movwf	sprintf@ap+1,c
   706                           
   707                           ;doprnt.c: 536: while(c = *f++) {
   708  001034  D12F               	goto	l1740
   709  001036                     l1634:
   710                           
   711                           ;doprnt.c: 538: if(c != '%')
   712  001036  0E25               	movlw	37
   713  001038  181F               	xorwf	sprintf@c,w,c
   714  00103A  B4D8               	btfsc	status,2,c
   715  00103C  D009               	goto	l1640
   716                           
   717                           ;doprnt.c: 540: {
   718                           ;doprnt.c: 541: ((*sp++ = (c)));
   719  00103E  C00D  FFD9         	movff	sprintf@sp,fsr2l
   720  001042  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   721  001046  C01F  FFDF         	movff	sprintf@c,indf2
   722  00104A  4A0D               	infsnz	sprintf@sp,f,c
   723  00104C  2A0E               	incf	sprintf@sp+1,f,c
   724                           
   725                           ;doprnt.c: 542: continue;
   726  00104E  D122               	goto	l1740
   727  001050                     l1640:
   728                           
   729                           ;doprnt.c: 543: }
   730                           ;doprnt.c: 546: width = 0;
   731  001050  0E00               	movlw	0
   732  001052  6E1E               	movwf	sprintf@width+1,c
   733  001054  0E00               	movlw	0
   734  001056  6E1D               	movwf	sprintf@width,c
   735                           
   736                           ;doprnt.c: 548: flag = 0;
   737  001058  0E00               	movlw	0
   738  00105A  6E1C               	movwf	sprintf@flag,c
   739                           
   740                           ;doprnt.c: 551: switch(*f) {
   741                           
   742                           ;doprnt.c: 550: for(;;) {
   743  00105C  D003               	goto	l1646
   744  00105E                     l1642:
   745                           
   746                           ;doprnt.c: 580: flag |= 0x04;
   747  00105E  841C               	bsf	sprintf@flag,2,c
   748                           
   749                           ;doprnt.c: 581: f++;
   750  001060  4A0F               	infsnz	sprintf@f,f,c
   751  001062  2A10               	incf	sprintf@f+1,f,c
   752  001064                     l1646:
   753  001064  C00F  FFF6         	movff	sprintf@f,tblptrl
   754  001068  C010  FFF7         	movff	sprintf@f+1,tblptrh
   755  00106C                     	if	0	;tblptru may be non-zero
   756  00106C                     	endif
   757  00106C                     	if	0	;tblptru may be non-zero
   758  00106C                     	endif
   759  00106C  0008               	tblrd		*
   760  00106E  50F5               	movf	tablat,w,c
   761                           
   762                           ; Switch size 1, requested type "space"
   763                           ; Number of cases is 1, Range of values is 48 to 48
   764                           ; switch strategies available:
   765                           ; Name         Instructions Cycles
   766                           ; simple_byte            4     3 (average)
   767                           ;	Chosen strategy is simple_byte
   768  001070  0A30               	xorlw	48	; case 48
   769  001072  B4D8               	btfsc	status,2,c
   770  001074  D7F4               	goto	l1642
   771                           
   772                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   773                           
   774                           ;doprnt.c: 586: }
   775                           
   776                           ;doprnt.c: 585: break;
   777  001076  C00F  FFF6         	movff	sprintf@f,tblptrl
   778  00107A  C010  FFF7         	movff	sprintf@f+1,tblptrh
   779  00107E                     	if	0	;tblptru may be non-zero
   780  00107E                     	endif
   781  00107E                     	if	0	;tblptru may be non-zero
   782  00107E                     	endif
   783  00107E  0008               	tblrd		*
   784  001080  50F5               	movf	tablat,w,c
   785  001082  EC07  F00D         	call	_isdigit
   786  001086  A0D8               	btfss	status,0,c
   787  001088  D032               	goto	l1662
   788                           
   789                           ;doprnt.c: 598: width = 0;
   790  00108A  0E00               	movlw	0
   791  00108C  6E1E               	movwf	sprintf@width+1,c
   792  00108E  0E00               	movlw	0
   793  001090  6E1D               	movwf	sprintf@width,c
   794  001092                     l1652:
   795                           
   796                           ;doprnt.c: 600: width *= 10;
   797  001092  C01D  F001         	movff	sprintf@width,___wmul@multiplier
   798  001096  C01E  F002         	movff	sprintf@width+1,___wmul@multiplier+1
   799  00109A  0E00               	movlw	0
   800  00109C  6E04               	movwf	___wmul@multiplicand+1,c
   801  00109E  0E0A               	movlw	10
   802  0010A0  6E03               	movwf	___wmul@multiplicand,c
   803  0010A2  ECF4  F00C         	call	___wmul	;wreg free
   804  0010A6  C001  F01D         	movff	?___wmul,sprintf@width
   805  0010AA  C002  F01E         	movff	?___wmul+1,sprintf@width+1
   806                           
   807                           ;doprnt.c: 601: width += *f++ - '0';
   808  0010AE  0ED0               	movlw	208
   809  0010B0  6E13               	movwf	??_sprintf& (0+255),c
   810  0010B2  0EFF               	movlw	255
   811  0010B4  6E14               	movwf	(??_sprintf+1)& (0+255),c
   812  0010B6  C00F  FFF6         	movff	sprintf@f,tblptrl
   813  0010BA  C010  FFF7         	movff	sprintf@f+1,tblptrh
   814  0010BE                     	if	0	;tblptru may be non-zero
   815  0010BE                     	endif
   816  0010BE                     	if	0	;tblptru may be non-zero
   817  0010BE                     	endif
   818  0010BE  0008               	tblrd		*
   819  0010C0  50F5               	movf	tablat,w,c
   820  0010C2  6E15               	movwf	(??_sprintf+2)& (0+255),c
   821  0010C4  6A16               	clrf	(??_sprintf+3)& (0+255),c
   822  0010C6  5013               	movf	??_sprintf,w,c
   823  0010C8  2615               	addwf	??_sprintf+2,f,c
   824  0010CA  5014               	movf	??_sprintf+1,w,c
   825  0010CC  2216               	addwfc	??_sprintf+3,f,c
   826  0010CE  5015               	movf	??_sprintf+2,w,c
   827  0010D0  261D               	addwf	sprintf@width,f,c
   828  0010D2  5016               	movf	??_sprintf+3,w,c
   829  0010D4  221E               	addwfc	sprintf@width+1,f,c
   830  0010D6  4A0F               	infsnz	sprintf@f,f,c
   831  0010D8  2A10               	incf	sprintf@f+1,f,c
   832                           
   833                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   834  0010DA  C00F  FFF6         	movff	sprintf@f,tblptrl
   835  0010DE  C010  FFF7         	movff	sprintf@f+1,tblptrh
   836  0010E2                     	if	0	;tblptru may be non-zero
   837  0010E2                     	endif
   838  0010E2                     	if	0	;tblptru may be non-zero
   839  0010E2                     	endif
   840  0010E2  0008               	tblrd		*
   841  0010E4  50F5               	movf	tablat,w,c
   842  0010E6  EC07  F00D         	call	_isdigit
   843  0010EA  B0D8               	btfsc	status,0,c
   844  0010EC  D7D2               	goto	l1652
   845  0010EE                     l1662:
   846  0010EE  C00F  FFF6         	movff	sprintf@f,tblptrl
   847  0010F2  C010  FFF7         	movff	sprintf@f+1,tblptrh
   848  0010F6  4A0F               	infsnz	sprintf@f,f,c
   849  0010F8  2A10               	incf	sprintf@f+1,f,c
   850  0010FA                     	if	0	;tblptru may be non-zero
   851  0010FA                     	endif
   852  0010FA                     	if	0	;tblptru may be non-zero
   853  0010FA                     	endif
   854  0010FA  0008               	tblrd		*
   855  0010FC  CFF5 F01F          	movff	tablat,sprintf@c
   856  001100  501F               	movf	sprintf@c,w,c
   857                           
   858                           ; Switch size 1, requested type "space"
   859                           ; Number of cases is 3, Range of values is 0 to 105
   860                           ; switch strategies available:
   861                           ; Name         Instructions Cycles
   862                           ; simple_byte           10     6 (average)
   863                           ;	Chosen strategy is simple_byte
   864  001102  0A00               	xorlw	0	; case 0
   865  001104  B4D8               	btfsc	status,2,c
   866  001106  D0D2               	goto	l1742
   867  001108  0A64               	xorlw	100	; case 100
   868  00110A  B4D8               	btfsc	status,2,c
   869  00110C  D003               	goto	l1664
   870  00110E  0A0D               	xorlw	13	; case 105
   871  001110  A4D8               	btfss	status,2,c
   872  001112  D0C0               	goto	l1740
   873  001114                     l1664:
   874                           
   875                           ;doprnt.c: 1253: {
   876                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   877  001114  C017  FFD9         	movff	sprintf@ap,fsr2l
   878  001118  C018  FFDA         	movff	sprintf@ap+1,fsr2h
   879  00111C  CFDE F01A          	movff	postinc2,sprintf@val
   880  001120  CFDD F01B          	movff	postdec2,sprintf@val+1
   881  001124  0E02               	movlw	2
   882  001126  2617               	addwf	sprintf@ap,f,c
   883  001128  0E00               	movlw	0
   884  00112A  2218               	addwfc	sprintf@ap+1,f,c
   885                           
   886                           ;doprnt.c: 1261: if((int)val < 0) {
   887  00112C  AE1B               	btfss	sprintf@val+1,7,c
   888  00112E  D006               	goto	l1674
   889                           
   890                           ;doprnt.c: 1262: flag |= 0x03;
   891  001130  0E03               	movlw	3
   892  001132  121C               	iorwf	sprintf@flag,f,c
   893                           
   894                           ;doprnt.c: 1263: val = -val;
   895  001134  6C1A               	negf	sprintf@val,c
   896  001136  1E1B               	comf	sprintf@val+1,f,c
   897  001138  B0D8               	btfsc	status,0,c
   898  00113A  2A1B               	incf	sprintf@val+1,f,c
   899  00113C                     l1674:
   900                           
   901                           ;doprnt.c: 1264: }
   902                           ;doprnt.c: 1266: }
   903                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   904  00113C  0E01               	movlw	1
   905  00113E  6E1F               	movwf	sprintf@c,c
   906  001140                     l1676:
   907  001140  0E05               	movlw	5
   908  001142  181F               	xorwf	sprintf@c,w,c
   909  001144  B4D8               	btfsc	status,2,c
   910  001146  D012               	goto	l1688
   911                           
   912                           ;doprnt.c: 1306: if(val < dpowers[c])
   913  001148  501F               	movf	sprintf@c,w,c
   914  00114A  0D02               	mullw	2
   915  00114C  0E01               	movlw	low _dpowers
   916  00114E  24F3               	addwf	prodl,w,c
   917  001150  6EF6               	movwf	tblptrl,c
   918  001152  0E10               	movlw	high _dpowers
   919  001154  20F4               	addwfc	prodh,w,c
   920  001156  6EF7               	movwf	tblptrh,c
   921  001158                     	if	0	;There are less than 3 active tblptr bytes
   922  001158                     	endif
   923  001158  0009               	tblrd		*+
   924  00115A  50F5               	movf	tablat,w,c
   925  00115C  5C1A               	subwf	sprintf@val,w,c
   926  00115E  0009               	tblrd		*+
   927  001160  50F5               	movf	tablat,w,c
   928  001162  581B               	subwfb	sprintf@val+1,w,c
   929  001164  A0D8               	btfss	status,0,c
   930  001166  D002               	goto	l1688
   931                           
   932                           ;doprnt.c: 1307: break;
   933  001168  2A1F               	incf	sprintf@c,f,c
   934  00116A  D7EA               	goto	l1676
   935  00116C                     l1688:
   936                           
   937                           ;doprnt.c: 1345: if(width && flag & 0x03)
   938  00116C  501D               	movf	sprintf@width,w,c
   939  00116E  101E               	iorwf	sprintf@width+1,w,c
   940  001170  B4D8               	btfsc	status,2,c
   941  001172  D009               	goto	l1694
   942  001174  C01C  F013         	movff	sprintf@flag,??_sprintf
   943  001178  0E03               	movlw	3
   944  00117A  1613               	andwf	??_sprintf,f,c
   945  00117C  B4D8               	btfsc	status,2,c
   946  00117E  D003               	goto	l1694
   947                           
   948                           ;doprnt.c: 1346: width--;
   949  001180  061D               	decf	sprintf@width,f,c
   950  001182  A0D8               	btfss	status,0,c
   951  001184  061E               	decf	sprintf@width+1,f,c
   952  001186                     l1694:
   953                           
   954                           ;doprnt.c: 1381: if(width > c)
   955  001186  0E80               	movlw	128
   956  001188  BE1F               	btfsc	sprintf@c,7,c
   957  00118A  0E7F               	movlw	127
   958  00118C  6E13               	movwf	??_sprintf& (0+255),c
   959  00118E  501D               	movf	sprintf@width,w,c
   960  001190  5C1F               	subwf	sprintf@c,w,c
   961  001192  501E               	movf	sprintf@width+1,w,c
   962  001194  0A80               	xorlw	128
   963  001196  5813               	subwfb	??_sprintf& (0+255),w,c
   964  001198  B0D8               	btfsc	status,0,c
   965  00119A  D007               	goto	l1698
   966                           
   967                           ;doprnt.c: 1382: width -= c;
   968  00119C  501F               	movf	sprintf@c,w,c
   969  00119E  5E1D               	subwf	sprintf@width,f,c
   970  0011A0  0E00               	movlw	0
   971  0011A2  BE1F               	btfsc	sprintf@c,7,c
   972  0011A4  0EFF               	movlw	255
   973  0011A6  5A1E               	subwfb	sprintf@width+1,f,c
   974  0011A8  D004               	goto	l1700
   975  0011AA                     l1698:
   976                           
   977                           ;doprnt.c: 1383: else
   978                           ;doprnt.c: 1384: width = 0;
   979  0011AA  0E00               	movlw	0
   980  0011AC  6E1E               	movwf	sprintf@width+1,c
   981  0011AE  0E00               	movlw	0
   982  0011B0  6E1D               	movwf	sprintf@width,c
   983  0011B2                     l1700:
   984                           
   985                           ;doprnt.c: 1387: if(flag & 0x04) {
   986  0011B2  A41C               	btfss	sprintf@flag,2,c
   987  0011B4  D01E               	goto	l1716
   988                           
   989                           ;doprnt.c: 1392: if(flag & 0x03)
   990  0011B6  C01C  F013         	movff	sprintf@flag,??_sprintf
   991  0011BA  0E03               	movlw	3
   992  0011BC  1613               	andwf	??_sprintf,f,c
   993  0011BE  B4D8               	btfsc	status,2,c
   994  0011C0  D008               	goto	l1708
   995                           
   996                           ;doprnt.c: 1393: ((*sp++ = ('-')));
   997  0011C2  C00D  FFD9         	movff	sprintf@sp,fsr2l
   998  0011C6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   999  0011CA  0E2D               	movlw	45
  1000  0011CC  6EDF               	movwf	indf2,c
  1001  0011CE  4A0D               	infsnz	sprintf@sp,f,c
  1002  0011D0  2A0E               	incf	sprintf@sp+1,f,c
  1003  0011D2                     l1708:
  1004                           
  1005                           ;doprnt.c: 1415: if(width)
  1006  0011D2  501D               	movf	sprintf@width,w,c
  1007  0011D4  101E               	iorwf	sprintf@width+1,w,c
  1008  0011D6  B4D8               	btfsc	status,2,c
  1009  0011D8  D02D               	goto	l1730
  1010                           
  1011                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1012                           
  1013                           ;doprnt.c: 1416: do
  1014  0011DA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1015  0011DE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1016  0011E2  0E30               	movlw	48
  1017  0011E4  6EDF               	movwf	indf2,c
  1018  0011E6  4A0D               	infsnz	sprintf@sp,f,c
  1019  0011E8  2A0E               	incf	sprintf@sp+1,f,c
  1020                           
  1021                           ;doprnt.c: 1418: while(--width);
  1022  0011EA  061D               	decf	sprintf@width,f,c
  1023  0011EC  A0D8               	btfss	status,0,c
  1024  0011EE  061E               	decf	sprintf@width+1,f,c
  1025  0011F0  D7F0               	goto	l1708
  1026  0011F2                     l1716:
  1027                           
  1028                           ;doprnt.c: 1422: {
  1029                           ;doprnt.c: 1424: if(width
  1030                           ;doprnt.c: 1428: )
  1031  0011F2  501D               	movf	sprintf@width,w,c
  1032  0011F4  101E               	iorwf	sprintf@width+1,w,c
  1033  0011F6  B4D8               	btfsc	status,2,c
  1034  0011F8  D00F               	goto	l1724
  1035  0011FA                     l1718:
  1036                           
  1037                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1038  0011FA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1039  0011FE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1040  001202  0E20               	movlw	32
  1041  001204  6EDF               	movwf	indf2,c
  1042  001206  4A0D               	infsnz	sprintf@sp,f,c
  1043  001208  2A0E               	incf	sprintf@sp+1,f,c
  1044                           
  1045                           ;doprnt.c: 1431: while(--width);
  1046  00120A  061D               	decf	sprintf@width,f,c
  1047  00120C  A0D8               	btfss	status,0,c
  1048  00120E  061E               	decf	sprintf@width+1,f,c
  1049  001210  501D               	movf	sprintf@width,w,c
  1050  001212  101E               	iorwf	sprintf@width+1,w,c
  1051  001214  A4D8               	btfss	status,2,c
  1052  001216  D7F1               	goto	l1718
  1053  001218                     l1724:
  1054                           
  1055                           ;doprnt.c: 1438: if(flag & 0x03)
  1056  001218  C01C  F013         	movff	sprintf@flag,??_sprintf
  1057  00121C  0E03               	movlw	3
  1058  00121E  1613               	andwf	??_sprintf,f,c
  1059  001220  B4D8               	btfsc	status,2,c
  1060  001222  D008               	goto	l1730
  1061                           
  1062                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1063  001224  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1064  001228  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1065  00122C  0E2D               	movlw	45
  1066  00122E  6EDF               	movwf	indf2,c
  1067  001230  4A0D               	infsnz	sprintf@sp,f,c
  1068  001232  2A0E               	incf	sprintf@sp+1,f,c
  1069  001234                     l1730:
  1070                           
  1071                           ;doprnt.c: 1469: }
  1072                           ;doprnt.c: 1472: prec = c;
  1073  001234  C01F  F019         	movff	sprintf@c,sprintf@prec
  1074                           
  1075                           ;doprnt.c: 1474: while(prec--) {
  1076  001238  D029               	goto	l1738
  1077  00123A                     l1732:
  1078                           
  1079                           ;doprnt.c: 1478: {
  1080                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1081  00123A  5019               	movf	sprintf@prec,w,c
  1082  00123C  0D02               	mullw	2
  1083  00123E  0E01               	movlw	low _dpowers
  1084  001240  24F3               	addwf	prodl,w,c
  1085  001242  6EF6               	movwf	tblptrl,c
  1086  001244  0E10               	movlw	high _dpowers
  1087  001246  20F4               	addwfc	prodh,w,c
  1088  001248  6EF7               	movwf	tblptrh,c
  1089  00124A                     	if	0	;There are less than 3 active tblptr bytes
  1090  00124A                     	endif
  1091  00124A  0009               	tblrd		*+
  1092  00124C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1093  001250  000A               	tblrd		*-
  1094  001252  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1095  001256  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
  1096  00125A  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1097  00125E  EC33  F00C         	call	___lwdiv	;wreg free
  1098  001262  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1099  001266  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1100  00126A  0E00               	movlw	0
  1101  00126C  6E0B               	movwf	___lwmod@divisor+1,c
  1102  00126E  0E0A               	movlw	10
  1103  001270  6E0A               	movwf	___lwmod@divisor,c
  1104  001272  EC5C  F00C         	call	___lwmod	;wreg free
  1105  001276  5008               	movf	?___lwmod,w,c
  1106  001278  0F30               	addlw	48
  1107  00127A  6E1F               	movwf	sprintf@c,c
  1108                           
  1109                           ;doprnt.c: 1523: }
  1110                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1111  00127C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1112  001280  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1113  001284  C01F  FFDF         	movff	sprintf@c,indf2
  1114  001288  4A0D               	infsnz	sprintf@sp,f,c
  1115  00128A  2A0E               	incf	sprintf@sp+1,f,c
  1116  00128C                     l1738:
  1117  00128C  0619               	decf	sprintf@prec,f,c
  1118  00128E  2819               	incf	sprintf@prec,w,c
  1119  001290  A4D8               	btfss	status,2,c
  1120  001292  D7D3               	goto	l1732
  1121  001294                     l1740:
  1122  001294  C00F  FFF6         	movff	sprintf@f,tblptrl
  1123  001298  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1124  00129C  4A0F               	infsnz	sprintf@f,f,c
  1125  00129E  2A10               	incf	sprintf@f+1,f,c
  1126  0012A0                     	if	0	;tblptru may be non-zero
  1127  0012A0                     	endif
  1128  0012A0                     	if	0	;tblptru may be non-zero
  1129  0012A0                     	endif
  1130  0012A0  0008               	tblrd		*
  1131  0012A2  CFF5 F01F          	movff	tablat,sprintf@c
  1132  0012A6  501F               	movf	sprintf@c,w,c
  1133  0012A8  A4D8               	btfss	status,2,c
  1134  0012AA  D6C5               	goto	l1634
  1135  0012AC                     l1742:
  1136                           
  1137                           ;doprnt.c: 1538: *sp = 0;
  1138  0012AC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1139  0012B0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1140  0012B4  0E00               	movlw	0
  1141  0012B6  6EDF               	movwf	indf2,c
  1142  0012B8  0012               	return	
  1143  0012BA                     __end_of_sprintf:
  1144                           	opt stack 0
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           prodh	equ	0xFF4
  1150                           prodl	equ	0xFF3
  1151                           postinc0	equ	0xFEE
  1152                           postdec1	equ	0xFE5
  1153                           fsr1l	equ	0xFE1
  1154                           indf2	equ	0xFDF
  1155                           postinc2	equ	0xFDE
  1156                           postdec2	equ	0xFDD
  1157                           fsr2h	equ	0xFDA
  1158                           fsr2l	equ	0xFD9
  1159                           status	equ	0xFD8
  1160                           
  1161 ;; *************** function _isdigit *****************
  1162 ;; Defined at:
  1163 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\isdigit.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  c               1    wreg     unsigned char 
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  c               1    2[COMRAM] unsigned char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;		None               void
  1170 ;; Registers used:
  1171 ;;		wreg, status,2, status,0
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1178 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;Total ram usage:        3 bytes
  1182 ;; Hardware stack levels used:    1
  1183 ;; This function calls:
  1184 ;;		Nothing
  1185 ;; This function is called by:
  1186 ;;		_sprintf
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           	psect	text2
  1191  001A0E                     __ptext2:
  1192                           	opt stack 0
  1193  001A0E                     _isdigit:
  1194                           	opt stack 29
  1195                           
  1196                           ;incstack = 0
  1197                           ;isdigit@c stored from wreg
  1198  001A0E  6E03               	movwf	isdigit@c,c
  1199  001A10  0E00               	movlw	0
  1200  001A12  6E02               	movwf	_isdigit$1009,c
  1201  001A14  0E3A               	movlw	58
  1202  001A16  6003               	cpfslt	isdigit@c,c
  1203  001A18  D005               	goto	l1522
  1204  001A1A  0E2F               	movlw	47
  1205  001A1C  6403               	cpfsgt	isdigit@c,c
  1206  001A1E  D002               	goto	l1522
  1207  001A20  0E01               	movlw	1
  1208  001A22  6E02               	movwf	_isdigit$1009,c
  1209  001A24                     l1522:
  1210  001A24  C002  F001         	movff	_isdigit$1009,??_isdigit
  1211  001A28  3001               	rrcf	??_isdigit,w,c
  1212  001A2A  0012               	return	
  1213  001A2C                     __end_of_isdigit:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           prodh	equ	0xFF4
  1220                           prodl	equ	0xFF3
  1221                           postinc0	equ	0xFEE
  1222                           postdec1	equ	0xFE5
  1223                           fsr1l	equ	0xFE1
  1224                           indf2	equ	0xFDF
  1225                           postinc2	equ	0xFDE
  1226                           postdec2	equ	0xFDD
  1227                           fsr2h	equ	0xFDA
  1228                           fsr2l	equ	0xFD9
  1229                           status	equ	0xFD8
  1230                           
  1231 ;; *************** function ___wmul *****************
  1232 ;; Defined at:
  1233 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  multiplier      2    0[COMRAM] unsigned int 
  1236 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;  product         2    4[COMRAM] unsigned int 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  2    0[COMRAM] unsigned int 
  1241 ;; Registers used:
  1242 ;;		wreg, status,2, status,0, prodl, prodh
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1248 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;Total ram usage:        6 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; This function calls:
  1255 ;;		Nothing
  1256 ;; This function is called by:
  1257 ;;		_sprintf
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text3
  1262  0019E8                     __ptext3:
  1263                           	opt stack 0
  1264  0019E8                     ___wmul:
  1265                           	opt stack 29
  1266                           
  1267                           ;incstack = 0
  1268  0019E8  5001               	movf	___wmul@multiplier,w,c
  1269  0019EA  0203               	mulwf	___wmul@multiplicand,c
  1270  0019EC  CFF3 F005          	movff	prodl,___wmul@product
  1271  0019F0  CFF4 F006          	movff	prodh,___wmul@product+1
  1272  0019F4  5001               	movf	___wmul@multiplier,w,c
  1273  0019F6  0204               	mulwf	___wmul@multiplicand+1,c
  1274  0019F8  50F3               	movf	prodl,w,c
  1275  0019FA  2606               	addwf	___wmul@product+1,f,c
  1276  0019FC  5002               	movf	___wmul@multiplier+1,w,c
  1277  0019FE  0203               	mulwf	___wmul@multiplicand,c
  1278  001A00  50F3               	movf	prodl,w,c
  1279  001A02  2606               	addwf	___wmul@product+1,f,c
  1280  001A04  C005  F001         	movff	___wmul@product,?___wmul
  1281  001A08  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1282  001A0C  0012               	return	
  1283  001A0E                     __end_of___wmul:
  1284                           	opt stack 0
  1285                           tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           prodh	equ	0xFF4
  1290                           prodl	equ	0xFF3
  1291                           postinc0	equ	0xFEE
  1292                           postdec1	equ	0xFE5
  1293                           fsr1l	equ	0xFE1
  1294                           indf2	equ	0xFDF
  1295                           postinc2	equ	0xFDE
  1296                           postdec2	equ	0xFDD
  1297                           fsr2h	equ	0xFDA
  1298                           fsr2l	equ	0xFD9
  1299                           status	equ	0xFD8
  1300                           
  1301 ;; *************** function ___lwmod *****************
  1302 ;; Defined at:
  1303 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  dividend        2    7[COMRAM] unsigned int 
  1306 ;;  divisor         2    9[COMRAM] unsigned int 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  counter         1   11[COMRAM] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  2    7[COMRAM] unsigned int 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1318 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;Total ram usage:        5 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_sprintf
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text4
  1332  0018B8                     __ptext4:
  1333                           	opt stack 0
  1334  0018B8                     ___lwmod:
  1335                           	opt stack 29
  1336                           
  1337                           ;incstack = 0
  1338  0018B8  500A               	movf	___lwmod@divisor,w,c
  1339  0018BA  100B               	iorwf	___lwmod@divisor+1,w,c
  1340  0018BC  B4D8               	btfsc	status,2,c
  1341  0018BE  D018               	goto	l715
  1342  0018C0  0E01               	movlw	1
  1343  0018C2  6E0C               	movwf	___lwmod@counter,c
  1344  0018C4  D004               	goto	l1560
  1345  0018C6                     l1558:
  1346  0018C6  90D8               	bcf	status,0,c
  1347  0018C8  360A               	rlcf	___lwmod@divisor,f,c
  1348  0018CA  360B               	rlcf	___lwmod@divisor+1,f,c
  1349  0018CC  2A0C               	incf	___lwmod@counter,f,c
  1350  0018CE                     l1560:
  1351  0018CE  AE0B               	btfss	___lwmod@divisor+1,7,c
  1352  0018D0  D7FA               	goto	l1558
  1353  0018D2                     l1562:
  1354  0018D2  500A               	movf	___lwmod@divisor,w,c
  1355  0018D4  5C08               	subwf	___lwmod@dividend,w,c
  1356  0018D6  500B               	movf	___lwmod@divisor+1,w,c
  1357  0018D8  5809               	subwfb	___lwmod@dividend+1,w,c
  1358  0018DA  A0D8               	btfss	status,0,c
  1359  0018DC  D004               	goto	l1566
  1360  0018DE  500A               	movf	___lwmod@divisor,w,c
  1361  0018E0  5E08               	subwf	___lwmod@dividend,f,c
  1362  0018E2  500B               	movf	___lwmod@divisor+1,w,c
  1363  0018E4  5A09               	subwfb	___lwmod@dividend+1,f,c
  1364  0018E6                     l1566:
  1365  0018E6  90D8               	bcf	status,0,c
  1366  0018E8  320B               	rrcf	___lwmod@divisor+1,f,c
  1367  0018EA  320A               	rrcf	___lwmod@divisor,f,c
  1368  0018EC  2E0C               	decfsz	___lwmod@counter,f,c
  1369  0018EE  D7F1               	goto	l1562
  1370  0018F0                     l715:
  1371  0018F0  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1372  0018F4  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1373  0018F8  0012               	return		;funcret
  1374  0018FA                     __end_of___lwmod:
  1375                           	opt stack 0
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           prodh	equ	0xFF4
  1381                           prodl	equ	0xFF3
  1382                           postinc0	equ	0xFEE
  1383                           postdec1	equ	0xFE5
  1384                           fsr1l	equ	0xFE1
  1385                           indf2	equ	0xFDF
  1386                           postinc2	equ	0xFDE
  1387                           postdec2	equ	0xFDD
  1388                           fsr2h	equ	0xFDA
  1389                           fsr2l	equ	0xFD9
  1390                           status	equ	0xFD8
  1391                           
  1392 ;; *************** function ___lwdiv *****************
  1393 ;; Defined at:
  1394 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;  dividend        2    0[COMRAM] unsigned int 
  1397 ;;  divisor         2    2[COMRAM] unsigned int 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  quotient        2    4[COMRAM] unsigned int 
  1400 ;;  counter         1    6[COMRAM] unsigned char 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  2    0[COMRAM] unsigned int 
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1410 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1411 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1414 ;;Total ram usage:        7 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; This function calls:
  1417 ;;		Nothing
  1418 ;; This function is called by:
  1419 ;;		_sprintf
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           	psect	text5
  1424  001866                     __ptext5:
  1425                           	opt stack 0
  1426  001866                     ___lwdiv:
  1427                           	opt stack 29
  1428                           
  1429                           ;incstack = 0
  1430  001866  0E00               	movlw	0
  1431  001868  6E06               	movwf	___lwdiv@quotient+1,c
  1432  00186A  0E00               	movlw	0
  1433  00186C  6E05               	movwf	___lwdiv@quotient,c
  1434  00186E  5003               	movf	___lwdiv@divisor,w,c
  1435  001870  1004               	iorwf	___lwdiv@divisor+1,w,c
  1436  001872  B4D8               	btfsc	status,2,c
  1437  001874  D01C               	goto	l705
  1438  001876  0E01               	movlw	1
  1439  001878  6E07               	movwf	___lwdiv@counter,c
  1440  00187A  D004               	goto	l1540
  1441  00187C                     l1538:
  1442  00187C  90D8               	bcf	status,0,c
  1443  00187E  3603               	rlcf	___lwdiv@divisor,f,c
  1444  001880  3604               	rlcf	___lwdiv@divisor+1,f,c
  1445  001882  2A07               	incf	___lwdiv@counter,f,c
  1446  001884                     l1540:
  1447  001884  AE04               	btfss	___lwdiv@divisor+1,7,c
  1448  001886  D7FA               	goto	l1538
  1449  001888                     l1542:
  1450  001888  90D8               	bcf	status,0,c
  1451  00188A  3605               	rlcf	___lwdiv@quotient,f,c
  1452  00188C  3606               	rlcf	___lwdiv@quotient+1,f,c
  1453  00188E  5003               	movf	___lwdiv@divisor,w,c
  1454  001890  5C01               	subwf	___lwdiv@dividend,w,c
  1455  001892  5004               	movf	___lwdiv@divisor+1,w,c
  1456  001894  5802               	subwfb	___lwdiv@dividend+1,w,c
  1457  001896  A0D8               	btfss	status,0,c
  1458  001898  D005               	goto	l1550
  1459  00189A  5003               	movf	___lwdiv@divisor,w,c
  1460  00189C  5E01               	subwf	___lwdiv@dividend,f,c
  1461  00189E  5004               	movf	___lwdiv@divisor+1,w,c
  1462  0018A0  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1463  0018A2  8005               	bsf	___lwdiv@quotient,0,c
  1464  0018A4                     l1550:
  1465  0018A4  90D8               	bcf	status,0,c
  1466  0018A6  3204               	rrcf	___lwdiv@divisor+1,f,c
  1467  0018A8  3203               	rrcf	___lwdiv@divisor,f,c
  1468  0018AA  2E07               	decfsz	___lwdiv@counter,f,c
  1469  0018AC  D7ED               	goto	l1542
  1470  0018AE                     l705:
  1471  0018AE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1472  0018B2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1473  0018B6  0012               	return		;funcret
  1474  0018B8                     __end_of___lwdiv:
  1475                           	opt stack 0
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           prodh	equ	0xFF4
  1481                           prodl	equ	0xFF3
  1482                           postinc0	equ	0xFEE
  1483                           postdec1	equ	0xFE5
  1484                           fsr1l	equ	0xFE1
  1485                           indf2	equ	0xFDF
  1486                           postinc2	equ	0xFDE
  1487                           postdec2	equ	0xFDD
  1488                           fsr2h	equ	0xFDA
  1489                           fsr2l	equ	0xFD9
  1490                           status	equ	0xFD8
  1491                           
  1492 ;; *************** function _SPI1_Init *****************
  1493 ;; Defined at:
  1494 ;;		line 8 in file "spi_pic18f.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;		None               void
  1501 ;; Registers used:
  1502 ;;		wreg, status,2
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_main
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text6
  1522  001A58                     __ptext6:
  1523                           	opt stack 0
  1524  001A58                     _SPI1_Init:
  1525                           	opt stack 30
  1526                           
  1527                           ;spi_pic18f.c: 9: TRISCbits.TRISC3 = 0; TRISCbits.TRISC5 = 0; TRISCbits.TRISC4 = 1; TRIS
      +                          Abits.TRISA5 = 0;
  1528                           
  1529                           ;incstack = 0
  1530  001A58  9694               	bcf	3988,3,c	;volatile
  1531  001A5A  9A94               	bcf	3988,5,c	;volatile
  1532  001A5C  8894               	bsf	3988,4,c	;volatile
  1533  001A5E  9A92               	bcf	3986,5,c	;volatile
  1534                           
  1535                           ;spi_pic18f.c: 10: SSP1STAT = 0xC0;
  1536  001A60  0EC0               	movlw	192
  1537  001A62  6EC7               	movwf	4039,c	;volatile
  1538                           
  1539                           ;spi_pic18f.c: 11: SSP1CON1 = 0x21;
  1540  001A64  0E21               	movlw	33
  1541  001A66  6EC6               	movwf	4038,c	;volatile
  1542  001A68  0012               	return		;funcret
  1543  001A6A                     __end_of_SPI1_Init:
  1544                           	opt stack 0
  1545                           tblptru	equ	0xFF8
  1546                           tblptrh	equ	0xFF7
  1547                           tblptrl	equ	0xFF6
  1548                           tablat	equ	0xFF5
  1549                           prodh	equ	0xFF4
  1550                           prodl	equ	0xFF3
  1551                           postinc0	equ	0xFEE
  1552                           postdec1	equ	0xFE5
  1553                           fsr1l	equ	0xFE1
  1554                           indf2	equ	0xFDF
  1555                           postinc2	equ	0xFDE
  1556                           postdec2	equ	0xFDD
  1557                           fsr2h	equ	0xFDA
  1558                           fsr2l	equ	0xFD9
  1559                           status	equ	0xFD8
  1560                           
  1561 ;; *************** function _SPI1_Close *****************
  1562 ;; Defined at:
  1563 ;;		line 14 in file "spi_pic18f.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;		None
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;		None
  1568 ;; Return value:  Size  Location     Type
  1569 ;;		None               void
  1570 ;; Registers used:
  1571 ;;		status,2, status,0
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;Total ram usage:        0 bytes
  1582 ;; Hardware stack levels used:    1
  1583 ;; This function calls:
  1584 ;;		Nothing
  1585 ;; This function is called by:
  1586 ;;		_main
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text7
  1591  001AB0                     __ptext7:
  1592                           	opt stack 0
  1593  001AB0                     _SPI1_Close:
  1594                           	opt stack 30
  1595                           
  1596                           ;spi_pic18f.c: 15: SSP1CON1 &= 0xDF;
  1597                           
  1598                           ;incstack = 0
  1599  001AB0  9AC6               	bcf	4038,5,c	;volatile
  1600  001AB2  0012               	return		;funcret
  1601  001AB4                     __end_of_SPI1_Close:
  1602                           	opt stack 0
  1603                           tblptru	equ	0xFF8
  1604                           tblptrh	equ	0xFF7
  1605                           tblptrl	equ	0xFF6
  1606                           tablat	equ	0xFF5
  1607                           prodh	equ	0xFF4
  1608                           prodl	equ	0xFF3
  1609                           postinc0	equ	0xFEE
  1610                           postdec1	equ	0xFE5
  1611                           fsr1l	equ	0xFE1
  1612                           indf2	equ	0xFDF
  1613                           postinc2	equ	0xFDE
  1614                           postdec2	equ	0xFDD
  1615                           fsr2h	equ	0xFDA
  1616                           fsr2l	equ	0xFD9
  1617                           status	equ	0xFD8
  1618                           
  1619 ;; *************** function _NRF24L01_SendData *****************
  1620 ;; Defined at:
  1621 ;;		line 94 in file "nrf24l01.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;  buffer          2    6[COMRAM] PTR unsigned char 
  1624 ;;		 -> main@bufferTX(32), 
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;		None
  1627 ;; Return value:  Size  Location     Type
  1628 ;;		None               void
  1629 ;; Registers used:
  1630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1636 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1639 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1640 ;;Total ram usage:        2 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    3
  1643 ;; This function calls:
  1644 ;;		_Delay_ms
  1645 ;;		_NRF24L01_SetMode
  1646 ;;		_NRF24L01_WriteBuffer
  1647 ;; This function is called by:
  1648 ;;		_main
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           	psect	text8
  1653  0019BE                     __ptext8:
  1654                           	opt stack 0
  1655  0019BE                     _NRF24L01_SendData:
  1656                           	opt stack 27
  1657                           
  1658                           ;nrf24l01.c: 95: NRF24L01_SetMode(2);
  1659                           
  1660                           ;incstack = 0
  1661  0019BE  0E02               	movlw	2
  1662  0019C0  EC7D  F00C         	call	_NRF24L01_SetMode
  1663                           
  1664                           ;nrf24l01.c: 96: NRF24L01_WriteBuffer(0xA0, buffer, 1);
  1665  0019C4  C007  F002         	movff	NRF24L01_SendData@buffer,NRF24L01_WriteBuffer@buffer
  1666  0019C8  C008  F003         	movff	NRF24L01_SendData@buffer+1,NRF24L01_WriteBuffer@buffer+1
  1667  0019CC  0E01               	movlw	1
  1668  0019CE  6E04               	movwf	NRF24L01_WriteBuffer@bytes,c
  1669  0019D0  0EA0               	movlw	160
  1670  0019D2  EC9C  F00C         	call	_NRF24L01_WriteBuffer
  1671                           
  1672                           ;nrf24l01.c: 97: LATDbits.LATD0 = 1; Delay_ms(1); LATDbits.LATD0 = 0;
  1673  0019D6  808C               	bsf	3980,0,c	;volatile
  1674  0019D8  0E00               	movlw	0
  1675  0019DA  6E02               	movwf	Delay_ms@count+1,c
  1676  0019DC  0E01               	movlw	1
  1677  0019DE  6E01               	movwf	Delay_ms@count,c
  1678  0019E0  ECB4  F00C         	call	_Delay_ms	;wreg free
  1679  0019E4  908C               	bcf	3980,0,c	;volatile
  1680  0019E6  0012               	return		;funcret
  1681  0019E8                     __end_of_NRF24L01_SendData:
  1682                           	opt stack 0
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           prodh	equ	0xFF4
  1688                           prodl	equ	0xFF3
  1689                           postinc0	equ	0xFEE
  1690                           postdec1	equ	0xFE5
  1691                           fsr1l	equ	0xFE1
  1692                           indf2	equ	0xFDF
  1693                           postinc2	equ	0xFDE
  1694                           postdec2	equ	0xFDD
  1695                           fsr2h	equ	0xFDA
  1696                           fsr2l	equ	0xFD9
  1697                           status	equ	0xFD8
  1698                           
  1699 ;; *************** function _NRF24L01_Init *****************
  1700 ;; Defined at:
  1701 ;;		line 57 in file "nrf24l01.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;  mode            1    wreg     unsigned char 
  1704 ;;  rf_channel      1    6[COMRAM] unsigned char 
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;  mode            1    7[COMRAM] unsigned char 
  1707 ;; Return value:  Size  Location     Type
  1708 ;;		None               void
  1709 ;; Registers used:
  1710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1716 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1719 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;Total ram usage:        2 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    3
  1723 ;; This function calls:
  1724 ;;		_Delay_ms
  1725 ;;		_NRF24L01_SetChannel
  1726 ;;		_NRF24L01_SetMode
  1727 ;;		_NRF24L01_WriteBuffer
  1728 ;;		_NRF24L01_WriteRegister
  1729 ;; This function is called by:
  1730 ;;		_main
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           	psect	text9
  1735  0016EA                     __ptext9:
  1736                           	opt stack 0
  1737  0016EA                     _NRF24L01_Init:
  1738                           	opt stack 27
  1739                           
  1740                           ;incstack = 0
  1741                           ;NRF24L01_Init@mode stored from wreg
  1742  0016EA  6E08               	movwf	NRF24L01_Init@mode,c
  1743                           
  1744                           ;nrf24l01.c: 58: TRISDbits.TRISD1 = 0; TRISDbits.TRISD0 = 0;
  1745  0016EC  9295               	bcf	3989,1,c	;volatile
  1746  0016EE  9095               	bcf	3989,0,c	;volatile
  1747                           
  1748                           ;nrf24l01.c: 59: LATDbits.LATD1 = 1; LATDbits.LATD0 = 0;
  1749  0016F0  828C               	bsf	3980,1,c	;volatile
  1750  0016F2  908C               	bcf	3980,0,c	;volatile
  1751                           
  1752                           ;nrf24l01.c: 60: Delay_ms(100);
  1753  0016F4  0E00               	movlw	0
  1754  0016F6  6E02               	movwf	Delay_ms@count+1,c
  1755  0016F8  0E64               	movlw	100
  1756  0016FA  6E01               	movwf	Delay_ms@count,c
  1757  0016FC  ECB4  F00C         	call	_Delay_ms	;wreg free
  1758                           
  1759                           ;nrf24l01.c: 61: NRF24L01_WriteRegister(0x00, 0x0A); Delay_ms(10);
  1760  001700  0E0A               	movlw	10
  1761  001702  6E02               	movwf	NRF24L01_WriteRegister@value,c
  1762  001704  0E00               	movlw	0
  1763  001706  EC21  F00D         	call	_NRF24L01_WriteRegister
  1764  00170A  0E00               	movlw	0
  1765  00170C  6E02               	movwf	Delay_ms@count+1,c
  1766  00170E  0E0A               	movlw	10
  1767  001710  6E01               	movwf	Delay_ms@count,c
  1768  001712  ECB4  F00C         	call	_Delay_ms	;wreg free
  1769                           
  1770                           ;nrf24l01.c: 62: NRF24L01_WriteRegister(0x01, 0x01);
  1771  001716  0E01               	movlw	1
  1772  001718  6E02               	movwf	NRF24L01_WriteRegister@value,c
  1773  00171A  0E01               	movlw	1
  1774  00171C  EC21  F00D         	call	_NRF24L01_WriteRegister
  1775                           
  1776                           ;nrf24l01.c: 63: NRF24L01_WriteRegister(0x02, 0x01);
  1777  001720  0E01               	movlw	1
  1778  001722  6E02               	movwf	NRF24L01_WriteRegister@value,c
  1779  001724  0E02               	movlw	2
  1780  001726  EC21  F00D         	call	_NRF24L01_WriteRegister
  1781                           
  1782                           ;nrf24l01.c: 64: NRF24L01_WriteRegister(0x03, 0x03);
  1783  00172A  0E03               	movlw	3
  1784  00172C  6E02               	movwf	NRF24L01_WriteRegister@value,c
  1785  00172E  0E03               	movlw	3
  1786  001730  EC21  F00D         	call	_NRF24L01_WriteRegister
  1787                           
  1788                           ;nrf24l01.c: 65: NRF24L01_WriteRegister(0x04, 0x00);
  1789  001734  0E00               	movlw	0
  1790  001736  6E02               	movwf	NRF24L01_WriteRegister@value,c
  1791  001738  0E04               	movlw	4
  1792  00173A  EC21  F00D         	call	_NRF24L01_WriteRegister
  1793                           
  1794                           ;nrf24l01.c: 66: NRF24L01_SetChannel(rf_channel);
  1795  00173E  5007               	movf	NRF24L01_Init@rf_channel,w,c
  1796  001740  EC4E  F00D         	call	_NRF24L01_SetChannel
  1797                           
  1798                           ;nrf24l01.c: 67: NRF24L01_WriteRegister(0x06, 0x0E);
  1799  001744  0E0E               	movlw	14
  1800  001746  6E02               	movwf	NRF24L01_WriteRegister@value,c
  1801  001748  0E06               	movlw	6
  1802  00174A  EC21  F00D         	call	_NRF24L01_WriteRegister
  1803                           
  1804                           ;nrf24l01.c: 69: NRF24L01_WriteBuffer(0x20 | 0x0A, ADDRESS_DATA_PIPE0, 5);
  1805  00174E  0E55               	movlw	low _ADDRESS_DATA_PIPE0
  1806  001750  6E02               	movwf	NRF24L01_WriteBuffer@buffer,c
  1807  001752  0E00               	movlw	high _ADDRESS_DATA_PIPE0
  1808  001754  6E03               	movwf	NRF24L01_WriteBuffer@buffer+1,c
  1809  001756  0E05               	movlw	5
  1810  001758  6E04               	movwf	NRF24L01_WriteBuffer@bytes,c
  1811  00175A  0E2A               	movlw	42
  1812  00175C  EC9C  F00C         	call	_NRF24L01_WriteBuffer
  1813                           
  1814                           ;nrf24l01.c: 70: NRF24L01_WriteBuffer(0x20 | 0x10, ADDRESS_DATA_PIPE0, 5);
  1815  001760  0E55               	movlw	low _ADDRESS_DATA_PIPE0
  1816  001762  6E02               	movwf	NRF24L01_WriteBuffer@buffer,c
  1817  001764  0E00               	movlw	high _ADDRESS_DATA_PIPE0
  1818  001766  6E03               	movwf	NRF24L01_WriteBuffer@buffer+1,c
  1819  001768  0E05               	movlw	5
  1820  00176A  6E04               	movwf	NRF24L01_WriteBuffer@bytes,c
  1821  00176C  0E30               	movlw	48
  1822  00176E  EC9C  F00C         	call	_NRF24L01_WriteBuffer
  1823                           
  1824                           ;nrf24l01.c: 71: NRF24L01_WriteRegister(0x11, 1);
  1825  001772  0E01               	movlw	1
  1826  001774  6E02               	movwf	NRF24L01_WriteRegister@value,c
  1827  001776  0E11               	movlw	17
  1828  001778  EC21  F00D         	call	_NRF24L01_WriteRegister
  1829                           
  1830                           ;nrf24l01.c: 73: Delay_ms(100);
  1831  00177C  0E00               	movlw	0
  1832  00177E  6E02               	movwf	Delay_ms@count+1,c
  1833  001780  0E64               	movlw	100
  1834  001782  6E01               	movwf	Delay_ms@count,c
  1835  001784  ECB4  F00C         	call	_Delay_ms	;wreg free
  1836                           
  1837                           ;nrf24l01.c: 74: NRF24L01_SetMode(mode);
  1838  001788  5008               	movf	NRF24L01_Init@mode,w,c
  1839  00178A  EC7D  F00C         	call	_NRF24L01_SetMode
  1840                           
  1841                           ;nrf24l01.c: 75: Delay_ms(100);
  1842  00178E  0E00               	movlw	0
  1843  001790  6E02               	movwf	Delay_ms@count+1,c
  1844  001792  0E64               	movlw	100
  1845  001794  6E01               	movwf	Delay_ms@count,c
  1846  001796  ECB4  F00C         	call	_Delay_ms	;wreg free
  1847  00179A  0012               	return		;funcret
  1848  00179C                     __end_of_NRF24L01_Init:
  1849                           	opt stack 0
  1850                           tblptru	equ	0xFF8
  1851                           tblptrh	equ	0xFF7
  1852                           tblptrl	equ	0xFF6
  1853                           tablat	equ	0xFF5
  1854                           prodh	equ	0xFF4
  1855                           prodl	equ	0xFF3
  1856                           postinc0	equ	0xFEE
  1857                           postdec1	equ	0xFE5
  1858                           fsr1l	equ	0xFE1
  1859                           indf2	equ	0xFDF
  1860                           postinc2	equ	0xFDE
  1861                           postdec2	equ	0xFDD
  1862                           fsr2h	equ	0xFDA
  1863                           fsr2l	equ	0xFD9
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _NRF24L01_WriteBuffer *****************
  1867 ;; Defined at:
  1868 ;;		line 32 in file "nrf24l01.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;  data            1    wreg     unsigned char 
  1871 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  1872 ;;		 -> main@bufferTX(32), ADDRESS_DATA_PIPE0(5), 
  1873 ;;  bytes           1    3[COMRAM] unsigned char 
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;  data            1    4[COMRAM] unsigned char 
  1876 ;;  i               1    5[COMRAM] unsigned char 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;		None               void
  1879 ;; Registers used:
  1880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1886 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1890 ;;Total ram usage:        5 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    1
  1893 ;; This function calls:
  1894 ;;		_SPI1_Write
  1895 ;; This function is called by:
  1896 ;;		_NRF24L01_Init
  1897 ;;		_NRF24L01_SendData
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text10
  1902  001938                     __ptext10:
  1903                           	opt stack 0
  1904  001938                     _NRF24L01_WriteBuffer:
  1905                           	opt stack 28
  1906                           
  1907                           ;incstack = 0
  1908                           ;NRF24L01_WriteBuffer@data stored from wreg
  1909  001938  6E05               	movwf	NRF24L01_WriteBuffer@data,c
  1910                           
  1911                           ;nrf24l01.c: 33: unsigned char i;
  1912                           ;nrf24l01.c: 34: LATDbits.LATD1 = 0;
  1913  00193A  928C               	bcf	3980,1,c	;volatile
  1914                           
  1915                           ;nrf24l01.c: 35: SPI1_Write(data);
  1916  00193C  5005               	movf	NRF24L01_WriteBuffer@data,w,c
  1917  00193E  EC3E  F00D         	call	_SPI1_Write
  1918                           
  1919                           ;nrf24l01.c: 36: for(i = 0; i < bytes; i++)
  1920  001942  0E00               	movlw	0
  1921  001944  6E06               	movwf	NRF24L01_WriteBuffer@i,c
  1922  001946  D00A               	goto	l1488
  1923  001948                     l1482:
  1924                           
  1925                           ;nrf24l01.c: 37: {
  1926                           ;nrf24l01.c: 38: SPI1_Write(*buffer);
  1927  001948  C002  FFD9         	movff	NRF24L01_WriteBuffer@buffer,fsr2l
  1928  00194C  C003  FFDA         	movff	NRF24L01_WriteBuffer@buffer+1,fsr2h
  1929  001950  50DF               	movf	indf2,w,c
  1930  001952  EC3E  F00D         	call	_SPI1_Write
  1931                           
  1932                           ;nrf24l01.c: 39: buffer++;
  1933  001956  4A02               	infsnz	NRF24L01_WriteBuffer@buffer,f,c
  1934  001958  2A03               	incf	NRF24L01_WriteBuffer@buffer+1,f,c
  1935  00195A  2A06               	incf	NRF24L01_WriteBuffer@i,f,c
  1936  00195C                     l1488:
  1937  00195C  5004               	movf	NRF24L01_WriteBuffer@bytes,w,c
  1938  00195E  5C06               	subwf	NRF24L01_WriteBuffer@i,w,c
  1939  001960  A0D8               	btfss	status,0,c
  1940  001962  D7F2               	goto	l1482
  1941                           
  1942                           ;nrf24l01.c: 40: }
  1943                           ;nrf24l01.c: 41: LATDbits.LATD1 = 1;
  1944  001964  828C               	bsf	3980,1,c	;volatile
  1945  001966  0012               	return		;funcret
  1946  001968                     __end_of_NRF24L01_WriteBuffer:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           postinc0	equ	0xFEE
  1955                           postdec1	equ	0xFE5
  1956                           fsr1l	equ	0xFE1
  1957                           indf2	equ	0xFDF
  1958                           postinc2	equ	0xFDE
  1959                           postdec2	equ	0xFDD
  1960                           fsr2h	equ	0xFDA
  1961                           fsr2l	equ	0xFD9
  1962                           status	equ	0xFD8
  1963                           
  1964 ;; *************** function _NRF24L01_SetMode *****************
  1965 ;; Defined at:
  1966 ;;		line 78 in file "nrf24l01.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;  mode            1    wreg     unsigned char 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  mode            1    3[COMRAM] unsigned char 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;Total ram usage:        1 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    2
  1987 ;; This function calls:
  1988 ;;		_NRF24L01_Flush
  1989 ;;		_NRF24L01_WriteRegister
  1990 ;; This function is called by:
  1991 ;;		_NRF24L01_Init
  1992 ;;		_NRF24L01_SendData
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text11
  1997  0018FA                     __ptext11:
  1998                           	opt stack 0
  1999  0018FA                     _NRF24L01_SetMode:
  2000                           	opt stack 27
  2001                           
  2002                           ;incstack = 0
  2003                           ;NRF24L01_SetMode@mode stored from wreg
  2004  0018FA  6E04               	movwf	NRF24L01_SetMode@mode,c
  2005                           
  2006                           ;nrf24l01.c: 79: NRF24L01_Flush();
  2007  0018FC  EC16  F00D         	call	_NRF24L01_Flush	;wreg free
  2008                           
  2009                           ;nrf24l01.c: 80: NRF24L01_WriteRegister(0x07, 0x70);
  2010  001900  0E70               	movlw	112
  2011  001902  6E02               	movwf	NRF24L01_WriteRegister@value,c
  2012  001904  0E07               	movlw	7
  2013  001906  EC21  F00D         	call	_NRF24L01_WriteRegister
  2014                           
  2015                           ;nrf24l01.c: 81: switch(mode)
  2016  00190A  D00E               	goto	l1512
  2017  00190C                     l1502:
  2018                           
  2019                           ;nrf24l01.c: 84: NRF24L01_WriteRegister(0x00, 0x0F);
  2020  00190C  0E0F               	movlw	15
  2021  00190E  6E02               	movwf	NRF24L01_WriteRegister@value,c
  2022  001910  0E00               	movlw	0
  2023  001912  EC21  F00D         	call	_NRF24L01_WriteRegister
  2024                           
  2025                           ;nrf24l01.c: 85: LATDbits.LATD0 = 1;
  2026  001916  808C               	bsf	3980,0,c	;volatile
  2027                           
  2028                           ;nrf24l01.c: 86: break;
  2029  001918  0012               	return	
  2030  00191A                     l1506:
  2031                           
  2032                           ;nrf24l01.c: 88: NRF24L01_WriteRegister(0x00, 0x0E);
  2033  00191A  0E0E               	movlw	14
  2034  00191C  6E02               	movwf	NRF24L01_WriteRegister@value,c
  2035  00191E  0E00               	movlw	0
  2036  001920  EC21  F00D         	call	_NRF24L01_WriteRegister
  2037                           
  2038                           ;nrf24l01.c: 89: LATDbits.LATD0 = 0;
  2039  001924  908C               	bcf	3980,0,c	;volatile
  2040                           
  2041                           ;nrf24l01.c: 91: }
  2042                           
  2043                           ;nrf24l01.c: 90: break;
  2044  001926  0012               	return	
  2045  001928                     l1512:
  2046  001928  5004               	movf	NRF24L01_SetMode@mode,w,c
  2047                           
  2048                           ; Switch size 1, requested type "space"
  2049                           ; Number of cases is 2, Range of values is 1 to 2
  2050                           ; switch strategies available:
  2051                           ; Name         Instructions Cycles
  2052                           ; simple_byte            7     4 (average)
  2053                           ;	Chosen strategy is simple_byte
  2054  00192A  0A01               	xorlw	1	; case 1
  2055  00192C  B4D8               	btfsc	status,2,c
  2056  00192E  D7EE               	goto	l1502
  2057  001930  0A03               	xorlw	3	; case 2
  2058  001932  A4D8               	btfss	status,2,c
  2059  001934  0012               	return	
  2060  001936  D7F1               	goto	l1506
  2061  001938                     __end_of_NRF24L01_SetMode:
  2062                           	opt stack 0
  2063                           tblptru	equ	0xFF8
  2064                           tblptrh	equ	0xFF7
  2065                           tblptrl	equ	0xFF6
  2066                           tablat	equ	0xFF5
  2067                           prodh	equ	0xFF4
  2068                           prodl	equ	0xFF3
  2069                           postinc0	equ	0xFEE
  2070                           postdec1	equ	0xFE5
  2071                           fsr1l	equ	0xFE1
  2072                           indf2	equ	0xFDF
  2073                           postinc2	equ	0xFDE
  2074                           postdec2	equ	0xFDD
  2075                           fsr2h	equ	0xFDA
  2076                           fsr2l	equ	0xFD9
  2077                           status	equ	0xFD8
  2078                           
  2079 ;; *************** function _NRF24L01_Flush *****************
  2080 ;; Defined at:
  2081 ;;		line 127 in file "nrf24l01.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;		None
  2086 ;; Return value:  Size  Location     Type
  2087 ;;		None               void
  2088 ;; Registers used:
  2089 ;;		wreg, cstack
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;Total ram usage:        0 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; Hardware stack levels required when called:    1
  2102 ;; This function calls:
  2103 ;;		_SPI1_Write
  2104 ;; This function is called by:
  2105 ;;		_NRF24L01_SetMode
  2106 ;;		_NRF24L01_ReadData
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text12
  2111  001A2C                     __ptext12:
  2112                           	opt stack 0
  2113  001A2C                     _NRF24L01_Flush:
  2114                           	opt stack 27
  2115                           
  2116                           ;nrf24l01.c: 128: LATDbits.LATD1 = 0;
  2117                           
  2118                           ;incstack = 0
  2119  001A2C  928C               	bcf	3980,1,c	;volatile
  2120                           
  2121                           ;nrf24l01.c: 129: SPI1_Write(0xE1);
  2122  001A2E  0EE1               	movlw	225
  2123  001A30  EC3E  F00D         	call	_SPI1_Write
  2124                           
  2125                           ;nrf24l01.c: 130: LATDbits.LATD1 = 1;
  2126  001A34  828C               	bsf	3980,1,c	;volatile
  2127                           
  2128                           ;nrf24l01.c: 131: LATDbits.LATD1 = 0;
  2129  001A36  928C               	bcf	3980,1,c	;volatile
  2130                           
  2131                           ;nrf24l01.c: 132: SPI1_Write(0xE2);
  2132  001A38  0EE2               	movlw	226
  2133  001A3A  EC3E  F00D         	call	_SPI1_Write
  2134                           
  2135                           ;nrf24l01.c: 133: LATDbits.LATD1 = 1;
  2136  001A3E  828C               	bsf	3980,1,c	;volatile
  2137  001A40  0012               	return		;funcret
  2138  001A42                     __end_of_NRF24L01_Flush:
  2139                           	opt stack 0
  2140                           tblptru	equ	0xFF8
  2141                           tblptrh	equ	0xFF7
  2142                           tblptrl	equ	0xFF6
  2143                           tablat	equ	0xFF5
  2144                           prodh	equ	0xFF4
  2145                           prodl	equ	0xFF3
  2146                           postinc0	equ	0xFEE
  2147                           postdec1	equ	0xFE5
  2148                           fsr1l	equ	0xFE1
  2149                           indf2	equ	0xFDF
  2150                           postinc2	equ	0xFDE
  2151                           postdec2	equ	0xFDD
  2152                           fsr2h	equ	0xFDA
  2153                           fsr2l	equ	0xFD9
  2154                           status	equ	0xFD8
  2155                           
  2156 ;; *************** function _NRF24L01_SetChannel *****************
  2157 ;; Defined at:
  2158 ;;		line 114 in file "nrf24l01.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;  rf_channel      1    wreg     unsigned char 
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  rf_channel      1    3[COMRAM] unsigned char 
  2163 ;; Return value:  Size  Location     Type
  2164 ;;		None               void
  2165 ;; Registers used:
  2166 ;;		wreg, status,2, status,0, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2175 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;Total ram usage:        1 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    2
  2179 ;; This function calls:
  2180 ;;		_NRF24L01_WriteRegister
  2181 ;; This function is called by:
  2182 ;;		_NRF24L01_Init
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text13
  2187  001A9C                     __ptext13:
  2188                           	opt stack 0
  2189  001A9C                     _NRF24L01_SetChannel:
  2190                           	opt stack 27
  2191                           
  2192                           ;incstack = 0
  2193                           ;NRF24L01_SetChannel@rf_channel stored from wreg
  2194  001A9C  6E04               	movwf	NRF24L01_SetChannel@rf_channel,c
  2195                           
  2196                           ;nrf24l01.c: 115: NRF24L01_WriteRegister(0x05, rf_channel);
  2197  001A9E  C004  F002         	movff	NRF24L01_SetChannel@rf_channel,NRF24L01_WriteRegister@value
  2198  001AA2  0E05               	movlw	5
  2199  001AA4  EC21  F00D         	call	_NRF24L01_WriteRegister
  2200  001AA8  0012               	return		;funcret
  2201  001AAA                     __end_of_NRF24L01_SetChannel:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           tblptrh	equ	0xFF7
  2205                           tblptrl	equ	0xFF6
  2206                           tablat	equ	0xFF5
  2207                           prodh	equ	0xFF4
  2208                           prodl	equ	0xFF3
  2209                           postinc0	equ	0xFEE
  2210                           postdec1	equ	0xFE5
  2211                           fsr1l	equ	0xFE1
  2212                           indf2	equ	0xFDF
  2213                           postinc2	equ	0xFDE
  2214                           postdec2	equ	0xFDD
  2215                           fsr2h	equ	0xFDA
  2216                           fsr2l	equ	0xFD9
  2217                           status	equ	0xFD8
  2218                           
  2219 ;; *************** function _NRF24L01_WriteRegister *****************
  2220 ;; Defined at:
  2221 ;;		line 16 in file "nrf24l01.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  Mnemonic        1    wreg     unsigned char 
  2224 ;;  value           1    1[COMRAM] unsigned char 
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;  Mnemonic        1    2[COMRAM] unsigned char 
  2227 ;; Return value:  Size  Location     Type
  2228 ;;		None               void
  2229 ;; Registers used:
  2230 ;;		wreg, status,2, status,0, cstack
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2236 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2240 ;;Total ram usage:        2 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:    1
  2243 ;; This function calls:
  2244 ;;		_SPI1_Write
  2245 ;; This function is called by:
  2246 ;;		_NRF24L01_Init
  2247 ;;		_NRF24L01_SetMode
  2248 ;;		_NRF24L01_SetChannel
  2249 ;;		_NRF24L01_ReadData
  2250 ;;		_NRF24L01_StandbyI
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text14
  2255  001A42                     __ptext14:
  2256                           	opt stack 0
  2257  001A42                     _NRF24L01_WriteRegister:
  2258                           	opt stack 27
  2259                           
  2260                           ;incstack = 0
  2261                           ;NRF24L01_WriteRegister@Mnemonic stored from wreg
  2262  001A42  6E03               	movwf	NRF24L01_WriteRegister@Mnemonic,c
  2263                           
  2264                           ;nrf24l01.c: 17: LATDbits.LATD1 = 0;
  2265  001A44  928C               	bcf	3980,1,c	;volatile
  2266                           
  2267                           ;nrf24l01.c: 18: SPI1_Write(0x20 | Mnemonic);
  2268  001A46  5003               	movf	NRF24L01_WriteRegister@Mnemonic,w,c
  2269  001A48  0920               	iorlw	32
  2270  001A4A  EC3E  F00D         	call	_SPI1_Write
  2271                           
  2272                           ;nrf24l01.c: 19: SPI1_Write(value);
  2273  001A4E  5002               	movf	NRF24L01_WriteRegister@value,w,c
  2274  001A50  EC3E  F00D         	call	_SPI1_Write
  2275                           
  2276                           ;nrf24l01.c: 20: LATDbits.LATD1 = 1;
  2277  001A54  828C               	bsf	3980,1,c	;volatile
  2278  001A56  0012               	return		;funcret
  2279  001A58                     __end_of_NRF24L01_WriteRegister:
  2280                           	opt stack 0
  2281                           tblptru	equ	0xFF8
  2282                           tblptrh	equ	0xFF7
  2283                           tblptrl	equ	0xFF6
  2284                           tablat	equ	0xFF5
  2285                           prodh	equ	0xFF4
  2286                           prodl	equ	0xFF3
  2287                           postinc0	equ	0xFEE
  2288                           postdec1	equ	0xFE5
  2289                           fsr1l	equ	0xFE1
  2290                           indf2	equ	0xFDF
  2291                           postinc2	equ	0xFDE
  2292                           postdec2	equ	0xFDD
  2293                           fsr2h	equ	0xFDA
  2294                           fsr2l	equ	0xFD9
  2295                           status	equ	0xFD8
  2296                           
  2297 ;; *************** function _SPI1_Write *****************
  2298 ;; Defined at:
  2299 ;;		line 18 in file "spi_pic18f.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  data            1    wreg     unsigned char 
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  data            1    0[COMRAM] unsigned char 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;		None               void
  2306 ;; Registers used:
  2307 ;;		wreg
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;Total ram usage:        1 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; This function calls:
  2320 ;;		Nothing
  2321 ;; This function is called by:
  2322 ;;		_NRF24L01_WriteRegister
  2323 ;;		_NRF24L01_WriteBuffer
  2324 ;;		_NRF24L01_Flush
  2325 ;;		_NRF24L01_ReadRegister
  2326 ;;		_NRF24L01_ReadBuffer
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text15
  2331  001A7C                     __ptext15:
  2332                           	opt stack 0
  2333  001A7C                     _SPI1_Write:
  2334                           	opt stack 28
  2335                           
  2336                           ;incstack = 0
  2337                           ;SPI1_Write@data stored from wreg
  2338  001A7C  6E01               	movwf	SPI1_Write@data,c
  2339                           
  2340                           ;spi_pic18f.c: 20: SSP1BUF = data;
  2341  001A7E  C001  FFC9         	movff	SPI1_Write@data,4041	;volatile
  2342  001A82                     l156:
  2343  001A82  A0C7               	btfss	4039,0,c	;volatile
  2344  001A84  D7FE               	goto	l156
  2345                           
  2346                           ;spi_pic18f.c: 22: data = SSP1BUF;
  2347  001A86  CFC9 F001          	movff	4041,SPI1_Write@data	;volatile
  2348  001A8A  0012               	return		;funcret
  2349  001A8C                     __end_of_SPI1_Write:
  2350                           	opt stack 0
  2351                           tblptru	equ	0xFF8
  2352                           tblptrh	equ	0xFF7
  2353                           tblptrl	equ	0xFF6
  2354                           tablat	equ	0xFF5
  2355                           prodh	equ	0xFF4
  2356                           prodl	equ	0xFF3
  2357                           postinc0	equ	0xFEE
  2358                           postdec1	equ	0xFE5
  2359                           fsr1l	equ	0xFE1
  2360                           indf2	equ	0xFDF
  2361                           postinc2	equ	0xFDE
  2362                           postdec2	equ	0xFDD
  2363                           fsr2h	equ	0xFDA
  2364                           fsr2l	equ	0xFD9
  2365                           status	equ	0xFD8
  2366                           
  2367 ;; *************** function _Delay_ms *****************
  2368 ;; Defined at:
  2369 ;;		line 9 in file "time_delay.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;  count           2    0[COMRAM] unsigned int 
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;  i               2    3[COMRAM] unsigned int 
  2374 ;; Return value:  Size  Location     Type
  2375 ;;		None               void
  2376 ;; Registers used:
  2377 ;;		wreg, status,2, status,0
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2383 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;Total ram usage:        5 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_NRF24L01_Init
  2393 ;;		_NRF24L01_SendData
  2394 ;;		_main
  2395 ;;		_NRF24L01_StandbyI
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text16
  2400  001968                     __ptext16:
  2401                           	opt stack 0
  2402  001968                     _Delay_ms:
  2403                           	opt stack 29
  2404                           
  2405                           ;time_delay.c: 10: unsigned int i;
  2406                           ;time_delay.c: 11: for(i = 0; i < count; i++){
  2407                           
  2408                           ;incstack = 0
  2409  001968  0E00               	movlw	0
  2410  00196A  6E05               	movwf	Delay_ms@i+1,c
  2411  00196C  0E00               	movlw	0
  2412  00196E  6E04               	movwf	Delay_ms@i,c
  2413  001970  D00A               	goto	l170
  2414  001972                     l1492:
  2415                           
  2416                           ;time_delay.c: 12: _delay((unsigned long)((1)*(64000000/4000.0)));
  2417  001972  0E15               	movlw	21
  2418  001974  6E03               	movwf	??_Delay_ms& (0+255),c
  2419  001976  0EC6               	movlw	198
  2420  001978                     u837:
  2421  001978  2EE8               	decfsz	wreg,f,c
  2422  00197A  D7FE               	goto	u837
  2423  00197C  2E03               	decfsz	??_Delay_ms& (0+255),f,c
  2424  00197E  D7FC               	goto	u837
  2425  001980  D000               	nop2	
  2426  001982  4A04               	infsnz	Delay_ms@i,f,c
  2427  001984  2A05               	incf	Delay_ms@i+1,f,c
  2428  001986                     l170:
  2429  001986  5001               	movf	Delay_ms@count,w,c
  2430  001988  5C04               	subwf	Delay_ms@i,w,c
  2431  00198A  5002               	movf	Delay_ms@count+1,w,c
  2432  00198C  5805               	subwfb	Delay_ms@i+1,w,c
  2433  00198E  B0D8               	btfsc	status,0,c
  2434  001990  0012               	return	
  2435  001992  D7EF               	goto	l1492
  2436  001994                     __end_of_Delay_ms:
  2437                           	opt stack 0
  2438                           tblptru	equ	0xFF8
  2439                           tblptrh	equ	0xFF7
  2440                           tblptrl	equ	0xFF6
  2441                           tablat	equ	0xFF5
  2442                           prodh	equ	0xFF4
  2443                           prodl	equ	0xFF3
  2444                           postinc0	equ	0xFEE
  2445                           wreg	equ	0xFE8
  2446                           postdec1	equ	0xFE5
  2447                           fsr1l	equ	0xFE1
  2448                           indf2	equ	0xFDF
  2449                           postinc2	equ	0xFDE
  2450                           postdec2	equ	0xFDD
  2451                           fsr2h	equ	0xFDA
  2452                           fsr2l	equ	0xFD9
  2453                           status	equ	0xFD8
  2454                           
  2455 ;; *************** function _Lcd_Text *****************
  2456 ;; Defined at:
  2457 ;;		line 71 in file "hd44780.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;  y               1    wreg     unsigned char 
  2460 ;;  x               1    4[COMRAM] unsigned char 
  2461 ;;  buffer          2    5[COMRAM] PTR unsigned char 
  2462 ;;		 -> main@buffer1(20), 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  y               1    7[COMRAM] unsigned char 
  2465 ;;  data            1    8[COMRAM] unsigned char 
  2466 ;; Return value:  Size  Location     Type
  2467 ;;		None               void
  2468 ;; Registers used:
  2469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2475 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2478 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;Total ram usage:        5 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    2
  2482 ;; This function calls:
  2483 ;;		_Lcd_CharCP
  2484 ;;		_Lcd_Command
  2485 ;; This function is called by:
  2486 ;;		_main
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           	psect	text17
  2491  001804                     __ptext17:
  2492                           	opt stack 0
  2493  001804                     _Lcd_Text:
  2494                           	opt stack 28
  2495                           
  2496                           ;incstack = 0
  2497                           ;Lcd_Text@y stored from wreg
  2498  001804  6E08               	movwf	Lcd_Text@y,c
  2499                           
  2500                           ;hd44780.c: 72: unsigned char data;
  2501                           ;hd44780.c: 73: switch(y){
  2502  001806  D00D               	goto	l1604
  2503  001808                     l1594:
  2504  001808  5005               	movf	Lcd_Text@x,w,c
  2505  00180A  0F7F               	addlw	127
  2506  00180C  D008               	goto	L3
  2507  00180E                     l1596:
  2508  00180E  5005               	movf	Lcd_Text@x,w,c
  2509  001810  0FBF               	addlw	191
  2510  001812  D005               	goto	L3
  2511  001814                     l1598:
  2512  001814  5005               	movf	Lcd_Text@x,w,c
  2513  001816  0F93               	addlw	147
  2514  001818  D002               	goto	L3
  2515  00181A                     l1600:
  2516  00181A  5005               	movf	Lcd_Text@x,w,c
  2517  00181C  0FD3               	addlw	211
  2518  00181E                     L3:
  2519  00181E  6E09               	movwf	Lcd_Text@data,c
  2520                           
  2521                           ;hd44780.c: 78: default: break;}
  2522  001820  D00D               	goto	l1606
  2523  001822                     l1604:
  2524  001822  5008               	movf	Lcd_Text@y,w,c
  2525                           
  2526                           ; Switch size 1, requested type "space"
  2527                           ; Number of cases is 4, Range of values is 1 to 4
  2528                           ; switch strategies available:
  2529                           ; Name         Instructions Cycles
  2530                           ; simple_byte           13     7 (average)
  2531                           ;	Chosen strategy is simple_byte
  2532  001824  0A01               	xorlw	1	; case 1
  2533  001826  B4D8               	btfsc	status,2,c
  2534  001828  D7EF               	goto	l1594
  2535  00182A  0A03               	xorlw	3	; case 2
  2536  00182C  B4D8               	btfsc	status,2,c
  2537  00182E  D7EF               	goto	l1596
  2538  001830  0A01               	xorlw	1	; case 3
  2539  001832  B4D8               	btfsc	status,2,c
  2540  001834  D7EF               	goto	l1598
  2541  001836  0A07               	xorlw	7	; case 4
  2542  001838  B4D8               	btfsc	status,2,c
  2543  00183A  D7EF               	goto	l1600
  2544  00183C                     l1606:
  2545                           
  2546                           ;hd44780.c: 79: Lcd_Command(data);
  2547  00183C  5009               	movf	Lcd_Text@data,w,c
  2548  00183E  EC89  F00A         	call	_Lcd_Command
  2549                           
  2550                           ;hd44780.c: 80: while(*buffer)
  2551  001842  D009               	goto	l1612
  2552  001844                     l1608:
  2553                           
  2554                           ;hd44780.c: 81: {
  2555                           ;hd44780.c: 82: Lcd_CharCP(*buffer);
  2556  001844  C006  FFD9         	movff	Lcd_Text@buffer,fsr2l
  2557  001848  C007  FFDA         	movff	Lcd_Text@buffer+1,fsr2h
  2558  00184C  50DF               	movf	indf2,w,c
  2559  00184E  ECFC  F009         	call	_Lcd_CharCP
  2560                           
  2561                           ;hd44780.c: 83: buffer++;
  2562  001852  4A06               	infsnz	Lcd_Text@buffer,f,c
  2563  001854  2A07               	incf	Lcd_Text@buffer+1,f,c
  2564  001856                     l1612:
  2565  001856  C006  FFD9         	movff	Lcd_Text@buffer,fsr2l
  2566  00185A  C007  FFDA         	movff	Lcd_Text@buffer+1,fsr2h
  2567  00185E  50DF               	movf	indf2,w,c
  2568  001860  B4D8               	btfsc	status,2,c
  2569  001862  0012               	return	
  2570  001864  D7EF               	goto	l1608
  2571  001866                     __end_of_Lcd_Text:
  2572                           	opt stack 0
  2573                           tblptru	equ	0xFF8
  2574                           tblptrh	equ	0xFF7
  2575                           tblptrl	equ	0xFF6
  2576                           tablat	equ	0xFF5
  2577                           prodh	equ	0xFF4
  2578                           prodl	equ	0xFF3
  2579                           postinc0	equ	0xFEE
  2580                           wreg	equ	0xFE8
  2581                           postdec1	equ	0xFE5
  2582                           fsr1l	equ	0xFE1
  2583                           indf2	equ	0xFDF
  2584                           postinc2	equ	0xFDE
  2585                           postdec2	equ	0xFDD
  2586                           fsr2h	equ	0xFDA
  2587                           fsr2l	equ	0xFD9
  2588                           status	equ	0xFD8
  2589                           
  2590 ;; *************** function _Lcd_Init *****************
  2591 ;; Defined at:
  2592 ;;		line 17 in file "hd44780.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;		None
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  data            1    4[COMRAM] unsigned char 
  2597 ;; Return value:  Size  Location     Type
  2598 ;;		None               void
  2599 ;; Registers used:
  2600 ;;		wreg, status,2, status,0, cstack
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;Total ram usage:        1 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    2
  2613 ;; This function calls:
  2614 ;;		_Lcd_Command
  2615 ;;		_Lcd_Delay5500us
  2616 ;;		_Lcd_Delay5us
  2617 ;; This function is called by:
  2618 ;;		_main
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text18
  2623  001628                     __ptext18:
  2624                           	opt stack 0
  2625  001628                     _Lcd_Init:
  2626                           	opt stack 28
  2627                           
  2628                           ;hd44780.c: 18: unsigned char data;
  2629                           ;hd44780.c: 19: TRISDbits.TRISD7 = 0; TRISDbits.TRISD6 = 0; TRISDbits.TRISD5 = 0; TRISDb
      +                          its.TRISD4 = 0; TRISDbits.TRISD3 = 0; TRISDbits.TRISD2 = 0;
  2630                           
  2631                           ;incstack = 0
  2632  001628  9E95               	bcf	3989,7,c	;volatile
  2633  00162A  9C95               	bcf	3989,6,c	;volatile
  2634  00162C  9A95               	bcf	3989,5,c	;volatile
  2635  00162E  9895               	bcf	3989,4,c	;volatile
  2636  001630  9695               	bcf	3989,3,c	;volatile
  2637  001632  9495               	bcf	3989,2,c	;volatile
  2638                           
  2639                           ;hd44780.c: 20: LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 0; LATDbits.LAT
      +                          D4 = 0; LATDbits.LATD3 = 0; LATDbits.LATD2 = 0;
  2640  001634  9E8C               	bcf	3980,7,c	;volatile
  2641  001636  9C8C               	bcf	3980,6,c	;volatile
  2642  001638  9A8C               	bcf	3980,5,c	;volatile
  2643  00163A  988C               	bcf	3980,4,c	;volatile
  2644  00163C  968C               	bcf	3980,3,c	;volatile
  2645  00163E  948C               	bcf	3980,2,c	;volatile
  2646                           
  2647                           ;hd44780.c: 21: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  2648  001640  EC46  F00D         	call	_Lcd_Delay5500us	;wreg free
  2649  001644  EC46  F00D         	call	_Lcd_Delay5500us	;wreg free
  2650  001648  EC46  F00D         	call	_Lcd_Delay5500us	;wreg free
  2651                           
  2652                           ;hd44780.c: 22: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  2653  00164C  EC46  F00D         	call	_Lcd_Delay5500us	;wreg free
  2654  001650  EC46  F00D         	call	_Lcd_Delay5500us	;wreg free
  2655  001654  EC46  F00D         	call	_Lcd_Delay5500us	;wreg free
  2656                           
  2657                           ;hd44780.c: 23: for(data = 1; data < 4; data ++)
  2658  001658  0E01               	movlw	1
  2659  00165A  6E05               	movwf	Lcd_Init@data,c
  2660  00165C                     l1104:
  2661  00165C  0E03               	movlw	3
  2662  00165E  6405               	cpfsgt	Lcd_Init@data,c
  2663  001660  D001               	goto	l17
  2664  001662  D018               	goto	l18
  2665  001664                     l17:
  2666                           
  2667                           ;hd44780.c: 24: {
  2668                           ;hd44780.c: 25: LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 1; LATDbits.LAT
      +                          D4 = 1; LATDbits.LATD3 = 0; LATDbits.LATD2 = 0;
  2669  001664  9E8C               	bcf	3980,7,c	;volatile
  2670  001666  9C8C               	bcf	3980,6,c	;volatile
  2671  001668  8A8C               	bsf	3980,5,c	;volatile
  2672  00166A  888C               	bsf	3980,4,c	;volatile
  2673  00166C  968C               	bcf	3980,3,c	;volatile
  2674  00166E  948C               	bcf	3980,2,c	;volatile
  2675                           
  2676                           ;hd44780.c: 26: LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 1; LATDbits.LAT
      +                          D4 = 1; LATDbits.LATD3 = 1; LATDbits.LATD2 = 0;
  2677  001670  9E8C               	bcf	3980,7,c	;volatile
  2678  001672  9C8C               	bcf	3980,6,c	;volatile
  2679  001674  8A8C               	bsf	3980,5,c	;volatile
  2680  001676  888C               	bsf	3980,4,c	;volatile
  2681  001678  868C               	bsf	3980,3,c	;volatile
  2682  00167A  948C               	bcf	3980,2,c	;volatile
  2683                           
  2684                           ;hd44780.c: 27: Lcd_Delay5us();
  2685  00167C  EC35  F00D         	call	_Lcd_Delay5us	;wreg free
  2686                           
  2687                           ;hd44780.c: 28: LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 1; LATDbits.LAT
      +                          D4 = 1; LATDbits.LATD3 = 0; LATDbits.LATD2 = 0;
  2688  001680  9E8C               	bcf	3980,7,c	;volatile
  2689  001682  9C8C               	bcf	3980,6,c	;volatile
  2690  001684  8A8C               	bsf	3980,5,c	;volatile
  2691  001686  888C               	bsf	3980,4,c	;volatile
  2692  001688  968C               	bcf	3980,3,c	;volatile
  2693  00168A  948C               	bcf	3980,2,c	;volatile
  2694                           
  2695                           ;hd44780.c: 29: Lcd_Delay5500us();
  2696  00168C  EC46  F00D         	call	_Lcd_Delay5500us	;wreg free
  2697  001690  2A05               	incf	Lcd_Init@data,f,c
  2698  001692  D7E4               	goto	l1104
  2699  001694                     l18:
  2700                           
  2701                           ;hd44780.c: 30: }
  2702                           ;hd44780.c: 31: LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 1; LATDbits.LAT
      +                          D4 = 0; LATDbits.LATD3 = 0; LATDbits.LATD2 = 0;
  2703  001694  9E8C               	bcf	3980,7,c	;volatile
  2704  001696  9C8C               	bcf	3980,6,c	;volatile
  2705  001698  8A8C               	bsf	3980,5,c	;volatile
  2706  00169A  988C               	bcf	3980,4,c	;volatile
  2707  00169C  968C               	bcf	3980,3,c	;volatile
  2708  00169E  948C               	bcf	3980,2,c	;volatile
  2709                           
  2710                           ;hd44780.c: 32: LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 1; LATDbits.LAT
      +                          D4 = 0; LATDbits.LATD3 = 1; LATDbits.LATD2 = 0;
  2711  0016A0  9E8C               	bcf	3980,7,c	;volatile
  2712  0016A2  9C8C               	bcf	3980,6,c	;volatile
  2713  0016A4  8A8C               	bsf	3980,5,c	;volatile
  2714  0016A6  988C               	bcf	3980,4,c	;volatile
  2715  0016A8  868C               	bsf	3980,3,c	;volatile
  2716  0016AA  948C               	bcf	3980,2,c	;volatile
  2717                           
  2718                           ;hd44780.c: 33: Lcd_Delay5us();
  2719  0016AC  EC35  F00D         	call	_Lcd_Delay5us	;wreg free
  2720                           
  2721                           ;hd44780.c: 34: LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 1; LATDbits.LAT
      +                          D4 = 0; LATDbits.LATD3 = 0; LATDbits.LATD2 = 0;
  2722  0016B0  9E8C               	bcf	3980,7,c	;volatile
  2723  0016B2  9C8C               	bcf	3980,6,c	;volatile
  2724  0016B4  8A8C               	bsf	3980,5,c	;volatile
  2725  0016B6  988C               	bcf	3980,4,c	;volatile
  2726  0016B8  968C               	bcf	3980,3,c	;volatile
  2727  0016BA  948C               	bcf	3980,2,c	;volatile
  2728                           
  2729                           ;hd44780.c: 35: Lcd_Delay5500us();
  2730  0016BC  EC46  F00D         	call	_Lcd_Delay5500us	;wreg free
  2731                           
  2732                           ;hd44780.c: 36: data = 40; Lcd_Command(data);
  2733  0016C0  0E28               	movlw	40
  2734  0016C2  6E05               	movwf	Lcd_Init@data,c
  2735  0016C4  5005               	movf	Lcd_Init@data,w,c
  2736  0016C6  EC89  F00A         	call	_Lcd_Command
  2737                           
  2738                           ;hd44780.c: 37: data = 16; Lcd_Command(data);
  2739  0016CA  0E10               	movlw	16
  2740  0016CC  6E05               	movwf	Lcd_Init@data,c
  2741  0016CE  5005               	movf	Lcd_Init@data,w,c
  2742  0016D0  EC89  F00A         	call	_Lcd_Command
  2743                           
  2744                           ;hd44780.c: 38: data = 1; Lcd_Command(data);
  2745  0016D4  0E01               	movlw	1
  2746  0016D6  6E05               	movwf	Lcd_Init@data,c
  2747  0016D8  5005               	movf	Lcd_Init@data,w,c
  2748  0016DA  EC89  F00A         	call	_Lcd_Command
  2749                           
  2750                           ;hd44780.c: 39: data = 15; Lcd_Command(data);
  2751  0016DE  0E0F               	movlw	15
  2752  0016E0  6E05               	movwf	Lcd_Init@data,c
  2753  0016E2  5005               	movf	Lcd_Init@data,w,c
  2754  0016E4  EC89  F00A         	call	_Lcd_Command
  2755  0016E8  0012               	return		;funcret
  2756  0016EA                     __end_of_Lcd_Init:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           prodh	equ	0xFF4
  2763                           prodl	equ	0xFF3
  2764                           postinc0	equ	0xFEE
  2765                           wreg	equ	0xFE8
  2766                           postdec1	equ	0xFE5
  2767                           fsr1l	equ	0xFE1
  2768                           indf2	equ	0xFDF
  2769                           postinc2	equ	0xFDE
  2770                           postdec2	equ	0xFDD
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _Lcd_ConstText *****************
  2776 ;; Defined at:
  2777 ;;		line 48 in file "hd44780.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  y               1    wreg     unsigned char 
  2780 ;;  x               1    4[COMRAM] unsigned char 
  2781 ;;  buffer          2    5[COMRAM] PTR const unsigned char 
  2782 ;;		 -> STR_1(17), 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  y               1    7[COMRAM] unsigned char 
  2785 ;;  data            1    8[COMRAM] unsigned char 
  2786 ;; Return value:  Size  Location     Type
  2787 ;;		None               void
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2795 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;Total ram usage:        5 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    2
  2802 ;; This function calls:
  2803 ;;		_Lcd_CharCP
  2804 ;;		_Lcd_Command
  2805 ;; This function is called by:
  2806 ;;		_main
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text19
  2811  00179C                     __ptext19:
  2812                           	opt stack 0
  2813  00179C                     _Lcd_ConstText:
  2814                           	opt stack 28
  2815                           
  2816                           ;incstack = 0
  2817                           ;Lcd_ConstText@y stored from wreg
  2818  00179C  6E08               	movwf	Lcd_ConstText@y,c
  2819                           
  2820                           ;hd44780.c: 49: unsigned char data;
  2821                           ;hd44780.c: 50: switch(y){
  2822  00179E  D00D               	goto	l1582
  2823  0017A0                     l1572:
  2824  0017A0  5005               	movf	Lcd_ConstText@x,w,c
  2825  0017A2  0F7F               	addlw	127
  2826  0017A4  D008               	goto	L6
  2827  0017A6                     l1574:
  2828  0017A6  5005               	movf	Lcd_ConstText@x,w,c
  2829  0017A8  0FBF               	addlw	191
  2830  0017AA  D005               	goto	L6
  2831  0017AC                     l1576:
  2832  0017AC  5005               	movf	Lcd_ConstText@x,w,c
  2833  0017AE  0F93               	addlw	147
  2834  0017B0  D002               	goto	L6
  2835  0017B2                     l1578:
  2836  0017B2  5005               	movf	Lcd_ConstText@x,w,c
  2837  0017B4  0FD3               	addlw	211
  2838  0017B6                     L6:
  2839  0017B6  6E09               	movwf	Lcd_ConstText@data,c
  2840                           
  2841                           ;hd44780.c: 55: default: break;}
  2842  0017B8  D00D               	goto	l1584
  2843  0017BA                     l1582:
  2844  0017BA  5008               	movf	Lcd_ConstText@y,w,c
  2845                           
  2846                           ; Switch size 1, requested type "space"
  2847                           ; Number of cases is 4, Range of values is 1 to 4
  2848                           ; switch strategies available:
  2849                           ; Name         Instructions Cycles
  2850                           ; simple_byte           13     7 (average)
  2851                           ;	Chosen strategy is simple_byte
  2852  0017BC  0A01               	xorlw	1	; case 1
  2853  0017BE  B4D8               	btfsc	status,2,c
  2854  0017C0  D7EF               	goto	l1572
  2855  0017C2  0A03               	xorlw	3	; case 2
  2856  0017C4  B4D8               	btfsc	status,2,c
  2857  0017C6  D7EF               	goto	l1574
  2858  0017C8  0A01               	xorlw	1	; case 3
  2859  0017CA  B4D8               	btfsc	status,2,c
  2860  0017CC  D7EF               	goto	l1576
  2861  0017CE  0A07               	xorlw	7	; case 4
  2862  0017D0  B4D8               	btfsc	status,2,c
  2863  0017D2  D7EF               	goto	l1578
  2864  0017D4                     l1584:
  2865                           
  2866                           ;hd44780.c: 56: Lcd_Command(data);
  2867  0017D4  5009               	movf	Lcd_ConstText@data,w,c
  2868  0017D6  EC89  F00A         	call	_Lcd_Command
  2869                           
  2870                           ;hd44780.c: 57: while(*buffer)
  2871  0017DA  D00A               	goto	l1590
  2872  0017DC                     l1586:
  2873                           
  2874                           ;hd44780.c: 58: {
  2875                           ;hd44780.c: 59: Lcd_CharCP(*buffer);
  2876  0017DC  C006  FFF6         	movff	Lcd_ConstText@buffer,tblptrl
  2877  0017E0  C007  FFF7         	movff	Lcd_ConstText@buffer+1,tblptrh
  2878  0017E4                     	if	0	;tblptru may be non-zero
  2879  0017E4                     	endif
  2880  0017E4                     	if	0	;tblptru may be non-zero
  2881  0017E4                     	endif
  2882  0017E4  0008               	tblrd		*
  2883  0017E6  50F5               	movf	tablat,w,c
  2884  0017E8  ECFC  F009         	call	_Lcd_CharCP
  2885                           
  2886                           ;hd44780.c: 60: buffer++;
  2887  0017EC  4A06               	infsnz	Lcd_ConstText@buffer,f,c
  2888  0017EE  2A07               	incf	Lcd_ConstText@buffer+1,f,c
  2889  0017F0                     l1590:
  2890  0017F0  C006  FFF6         	movff	Lcd_ConstText@buffer,tblptrl
  2891  0017F4  C007  FFF7         	movff	Lcd_ConstText@buffer+1,tblptrh
  2892  0017F8                     	if	0	;tblptru may be non-zero
  2893  0017F8                     	endif
  2894  0017F8                     	if	0	;tblptru may be non-zero
  2895  0017F8                     	endif
  2896  0017F8  0008               	tblrd		*
  2897  0017FA  50F5               	movf	tablat,w,c
  2898  0017FC  0900               	iorlw	0
  2899  0017FE  B4D8               	btfsc	status,2,c
  2900  001800  0012               	return	
  2901  001802  D7EC               	goto	l1586
  2902  001804                     __end_of_Lcd_ConstText:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           postinc0	equ	0xFEE
  2911                           wreg	equ	0xFE8
  2912                           postdec1	equ	0xFE5
  2913                           fsr1l	equ	0xFE1
  2914                           indf2	equ	0xFDF
  2915                           postinc2	equ	0xFDE
  2916                           postdec2	equ	0xFDD
  2917                           fsr2h	equ	0xFDA
  2918                           fsr2l	equ	0xFD9
  2919                           status	equ	0xFD8
  2920                           
  2921 ;; *************** function _Lcd_Command *****************
  2922 ;; Defined at:
  2923 ;;		line 127 in file "hd44780.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;  command         1    wreg     unsigned char 
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;  command         1    3[COMRAM] unsigned char 
  2928 ;; Return value:  Size  Location     Type
  2929 ;;		None               void
  2930 ;; Registers used:
  2931 ;;		wreg, status,2, status,0, cstack
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;Total ram usage:        3 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    1
  2944 ;; This function calls:
  2945 ;;		_Lcd_Delay5500us
  2946 ;;		_Lcd_Delay5us
  2947 ;; This function is called by:
  2948 ;;		_Lcd_Init
  2949 ;;		_Lcd_ConstText
  2950 ;;		_Lcd_Text
  2951 ;;		_main
  2952 ;;		_Lcd_WriteChar
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text20
  2957  001512                     __ptext20:
  2958                           	opt stack 0
  2959  001512                     _Lcd_Command:
  2960                           	opt stack 28
  2961                           
  2962                           ;incstack = 0
  2963                           ;Lcd_Command@command stored from wreg
  2964  001512  6E04               	movwf	Lcd_Command@command,c
  2965                           
  2966                           ;hd44780.c: 128: LATDbits.LATD3 = 0; LATDbits.LATD2 = 0;
  2967  001514  968C               	bcf	3980,3,c	;volatile
  2968  001516  948C               	bcf	3980,2,c	;volatile
  2969                           
  2970                           ;hd44780.c: 129: LATDbits.LATD7 = (command & 0b10000000)>>7; LATDbits.LATD6 = (command &
      +                           0b01000000)>>6;
  2971  001518  6A02               	clrf	??_Lcd_Command& (0+255),c
  2972  00151A  AE04               	btfss	Lcd_Command@command,7,c
  2973  00151C  D001               	bra	u25
  2974  00151E  2A02               	incf	??_Lcd_Command& (0+255),f,c
  2975  001520                     u25:
  2976  001520  0E01               	movlw	1
  2977  001522  1602               	andwf	??_Lcd_Command,f,c
  2978  001524  3202               	rrcf	??_Lcd_Command,f,c
  2979  001526  3202               	rrcf	??_Lcd_Command,f,c
  2980  001528  508C               	movf	3980,w,c	;volatile
  2981  00152A  1802               	xorwf	??_Lcd_Command,w,c
  2982  00152C  0B7F               	andlw	-129
  2983  00152E  1802               	xorwf	??_Lcd_Command,w,c
  2984  001530  6E8C               	movwf	3980,c	;volatile
  2985  001532  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  2986  001536  0E06               	movlw	6
  2987  001538  6E03               	movwf	(??_Lcd_Command+1)& (0+255),c
  2988  00153A                     u35:
  2989  00153A  90D8               	bcf	status,0,c
  2990  00153C  3202               	rrcf	??_Lcd_Command,f,c
  2991  00153E  2E03               	decfsz	(??_Lcd_Command+1)& (0+255),f,c
  2992  001540  D7FC               	goto	u35
  2993  001542  0E01               	movlw	1
  2994  001544  1602               	andwf	??_Lcd_Command,f,c
  2995  001546  3A02               	swapf	??_Lcd_Command,f,c
  2996  001548  4602               	rlncf	??_Lcd_Command,f,c
  2997  00154A  4602               	rlncf	??_Lcd_Command,f,c
  2998  00154C  508C               	movf	3980,w,c	;volatile
  2999  00154E  1802               	xorwf	??_Lcd_Command,w,c
  3000  001550  0BBF               	andlw	-65
  3001  001552  1802               	xorwf	??_Lcd_Command,w,c
  3002  001554  6E8C               	movwf	3980,c	;volatile
  3003                           
  3004                           ;hd44780.c: 130: LATDbits.LATD5 = (command & 0b00100000)>>5; LATDbits.LATD4 = (command &
      +                           0b00010000)>>4;
  3005  001556  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  3006  00155A  0E05               	movlw	5
  3007  00155C  6E03               	movwf	(??_Lcd_Command+1)& (0+255),c
  3008  00155E                     u45:
  3009  00155E  90D8               	bcf	status,0,c
  3010  001560  3202               	rrcf	??_Lcd_Command,f,c
  3011  001562  2E03               	decfsz	(??_Lcd_Command+1)& (0+255),f,c
  3012  001564  D7FC               	goto	u45
  3013  001566  0E01               	movlw	1
  3014  001568  1602               	andwf	??_Lcd_Command,f,c
  3015  00156A  3A02               	swapf	??_Lcd_Command,f,c
  3016  00156C  4602               	rlncf	??_Lcd_Command,f,c
  3017  00156E  508C               	movf	3980,w,c	;volatile
  3018  001570  1802               	xorwf	??_Lcd_Command,w,c
  3019  001572  0BDF               	andlw	-33
  3020  001574  1802               	xorwf	??_Lcd_Command,w,c
  3021  001576  6E8C               	movwf	3980,c	;volatile
  3022  001578  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  3023  00157C  3A02               	swapf	??_Lcd_Command,f,c
  3024  00157E  0E0F               	movlw	15
  3025  001580  1602               	andwf	??_Lcd_Command,f,c
  3026  001582  0E01               	movlw	1
  3027  001584  1602               	andwf	??_Lcd_Command,f,c
  3028  001586  3A02               	swapf	??_Lcd_Command,f,c
  3029  001588  508C               	movf	3980,w,c	;volatile
  3030  00158A  1802               	xorwf	??_Lcd_Command,w,c
  3031  00158C  0BEF               	andlw	-17
  3032  00158E  1802               	xorwf	??_Lcd_Command,w,c
  3033  001590  6E8C               	movwf	3980,c	;volatile
  3034                           
  3035                           ;hd44780.c: 131: _delay(10);
  3036  001592  0E03               	movlw	3
  3037  001594                     u847:
  3038  001594  2EE8               	decfsz	wreg,f,c
  3039  001596  D7FE               	goto	u847
  3040  001598  F000               	nop	
  3041                           
  3042                           ;hd44780.c: 132: LATDbits.LATD3 = 1; Lcd_Delay5us(); LATDbits.LATD3 = 0;
  3043  00159A  868C               	bsf	3980,3,c	;volatile
  3044  00159C  EC35  F00D         	call	_Lcd_Delay5us	;wreg free
  3045  0015A0  968C               	bcf	3980,3,c	;volatile
  3046                           
  3047                           ;hd44780.c: 133: LATDbits.LATD7 = (command & 0b00001000)>>3; LATDbits.LATD6 = (command &
      +                           0b00000100)>>2;
  3048  0015A2  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  3049  0015A6  90D8               	bcf	status,0,c
  3050  0015A8  3202               	rrcf	??_Lcd_Command,f,c
  3051  0015AA  90D8               	bcf	status,0,c
  3052  0015AC  3202               	rrcf	??_Lcd_Command,f,c
  3053  0015AE  90D8               	bcf	status,0,c
  3054  0015B0  3202               	rrcf	??_Lcd_Command,f,c
  3055  0015B2  0E01               	movlw	1
  3056  0015B4  1602               	andwf	??_Lcd_Command,f,c
  3057  0015B6  3202               	rrcf	??_Lcd_Command,f,c
  3058  0015B8  3202               	rrcf	??_Lcd_Command,f,c
  3059  0015BA  508C               	movf	3980,w,c	;volatile
  3060  0015BC  1802               	xorwf	??_Lcd_Command,w,c
  3061  0015BE  0B7F               	andlw	-129
  3062  0015C0  1802               	xorwf	??_Lcd_Command,w,c
  3063  0015C2  6E8C               	movwf	3980,c	;volatile
  3064  0015C4  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  3065  0015C8  90D8               	bcf	status,0,c
  3066  0015CA  3202               	rrcf	??_Lcd_Command,f,c
  3067  0015CC  90D8               	bcf	status,0,c
  3068  0015CE  3202               	rrcf	??_Lcd_Command,f,c
  3069  0015D0  0E01               	movlw	1
  3070  0015D2  1602               	andwf	??_Lcd_Command,f,c
  3071  0015D4  3A02               	swapf	??_Lcd_Command,f,c
  3072  0015D6  4602               	rlncf	??_Lcd_Command,f,c
  3073  0015D8  4602               	rlncf	??_Lcd_Command,f,c
  3074  0015DA  508C               	movf	3980,w,c	;volatile
  3075  0015DC  1802               	xorwf	??_Lcd_Command,w,c
  3076  0015DE  0BBF               	andlw	-65
  3077  0015E0  1802               	xorwf	??_Lcd_Command,w,c
  3078  0015E2  6E8C               	movwf	3980,c	;volatile
  3079                           
  3080                           ;hd44780.c: 134: LATDbits.LATD5 = (command & 0b00000010)>>1; LATDbits.LATD4 = (command &
      +                           0b00000001);
  3081  0015E4  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  3082  0015E8  90D8               	bcf	status,0,c
  3083  0015EA  3202               	rrcf	??_Lcd_Command,f,c
  3084  0015EC  0E01               	movlw	1
  3085  0015EE  1602               	andwf	??_Lcd_Command,f,c
  3086  0015F0  3A02               	swapf	??_Lcd_Command,f,c
  3087  0015F2  4602               	rlncf	??_Lcd_Command,f,c
  3088  0015F4  508C               	movf	3980,w,c	;volatile
  3089  0015F6  1802               	xorwf	??_Lcd_Command,w,c
  3090  0015F8  0BDF               	andlw	-33
  3091  0015FA  1802               	xorwf	??_Lcd_Command,w,c
  3092  0015FC  6E8C               	movwf	3980,c	;volatile
  3093  0015FE  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  3094  001602  0E01               	movlw	1
  3095  001604  1602               	andwf	??_Lcd_Command,f,c
  3096  001606  3A02               	swapf	??_Lcd_Command,f,c
  3097  001608  508C               	movf	3980,w,c	;volatile
  3098  00160A  1802               	xorwf	??_Lcd_Command,w,c
  3099  00160C  0BEF               	andlw	-17
  3100  00160E  1802               	xorwf	??_Lcd_Command,w,c
  3101  001610  6E8C               	movwf	3980,c	;volatile
  3102                           
  3103                           ;hd44780.c: 135: _delay(10);
  3104  001612  0E03               	movlw	3
  3105  001614                     u857:
  3106  001614  2EE8               	decfsz	wreg,f,c
  3107  001616  D7FE               	goto	u857
  3108  001618  F000               	nop	
  3109                           
  3110                           ;hd44780.c: 136: LATDbits.LATD3 = 1; Lcd_Delay5us(); LATDbits.LATD3 = 0;
  3111  00161A  868C               	bsf	3980,3,c	;volatile
  3112  00161C  EC35  F00D         	call	_Lcd_Delay5us	;wreg free
  3113  001620  968C               	bcf	3980,3,c	;volatile
  3114                           
  3115                           ;hd44780.c: 137: Lcd_Delay5500us();
  3116  001622  EC46  F00D         	call	_Lcd_Delay5500us	;wreg free
  3117  001626  0012               	return		;funcret
  3118  001628                     __end_of_Lcd_Command:
  3119                           	opt stack 0
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           postdec1	equ	0xFE5
  3129                           fsr1l	equ	0xFE1
  3130                           indf2	equ	0xFDF
  3131                           postinc2	equ	0xFDE
  3132                           postdec2	equ	0xFDD
  3133                           fsr2h	equ	0xFDA
  3134                           fsr2l	equ	0xFD9
  3135                           status	equ	0xFD8
  3136                           
  3137 ;; *************** function _Lcd_CharCP *****************
  3138 ;; Defined at:
  3139 ;;		line 110 in file "hd44780.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;  c               1    wreg     unsigned char 
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;  c               1    3[COMRAM] unsigned char 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;		None               void
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, status,0, cstack
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;Total ram usage:        3 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    1
  3160 ;; This function calls:
  3161 ;;		_Lcd_Delay5500us
  3162 ;;		_Lcd_Delay5us
  3163 ;; This function is called by:
  3164 ;;		_Lcd_ConstText
  3165 ;;		_Lcd_Text
  3166 ;;		_Lcd_WriteChar
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text21
  3171  0013F8                     __ptext21:
  3172                           	opt stack 0
  3173  0013F8                     _Lcd_CharCP:
  3174                           	opt stack 28
  3175                           
  3176                           ;incstack = 0
  3177                           ;Lcd_CharCP@c stored from wreg
  3178  0013F8  6E04               	movwf	Lcd_CharCP@c,c
  3179                           
  3180                           ;hd44780.c: 111: LATDbits.LATD3 = 0; LATDbits.LATD2 = 1;
  3181  0013FA  968C               	bcf	3980,3,c	;volatile
  3182  0013FC  848C               	bsf	3980,2,c	;volatile
  3183                           
  3184                           ;hd44780.c: 112: LATDbits.LATD7 = (c & 0b10000000)>>7; LATDbits.LATD6 = (c & 0b01000000)
      +                          >>6;
  3185  0013FE  6A02               	clrf	??_Lcd_CharCP& (0+255),c
  3186  001400  AE04               	btfss	Lcd_CharCP@c,7,c
  3187  001402  D001               	bra	u55
  3188  001404  2A02               	incf	??_Lcd_CharCP& (0+255),f,c
  3189  001406                     u55:
  3190  001406  0E01               	movlw	1
  3191  001408  1602               	andwf	??_Lcd_CharCP,f,c
  3192  00140A  3202               	rrcf	??_Lcd_CharCP,f,c
  3193  00140C  3202               	rrcf	??_Lcd_CharCP,f,c
  3194  00140E  508C               	movf	3980,w,c	;volatile
  3195  001410  1802               	xorwf	??_Lcd_CharCP,w,c
  3196  001412  0B7F               	andlw	-129
  3197  001414  1802               	xorwf	??_Lcd_CharCP,w,c
  3198  001416  6E8C               	movwf	3980,c	;volatile
  3199  001418  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3200  00141C  0E06               	movlw	6
  3201  00141E  6E03               	movwf	(??_Lcd_CharCP+1)& (0+255),c
  3202  001420                     u65:
  3203  001420  90D8               	bcf	status,0,c
  3204  001422  3202               	rrcf	??_Lcd_CharCP,f,c
  3205  001424  2E03               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,c
  3206  001426  D7FC               	goto	u65
  3207  001428  0E01               	movlw	1
  3208  00142A  1602               	andwf	??_Lcd_CharCP,f,c
  3209  00142C  3A02               	swapf	??_Lcd_CharCP,f,c
  3210  00142E  4602               	rlncf	??_Lcd_CharCP,f,c
  3211  001430  4602               	rlncf	??_Lcd_CharCP,f,c
  3212  001432  508C               	movf	3980,w,c	;volatile
  3213  001434  1802               	xorwf	??_Lcd_CharCP,w,c
  3214  001436  0BBF               	andlw	-65
  3215  001438  1802               	xorwf	??_Lcd_CharCP,w,c
  3216  00143A  6E8C               	movwf	3980,c	;volatile
  3217                           
  3218                           ;hd44780.c: 113: LATDbits.LATD5 = (c & 0b00100000)>>5; LATDbits.LATD4 = (c & 0b00010000)
      +                          >>4;
  3219  00143C  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3220  001440  0E05               	movlw	5
  3221  001442  6E03               	movwf	(??_Lcd_CharCP+1)& (0+255),c
  3222  001444                     u75:
  3223  001444  90D8               	bcf	status,0,c
  3224  001446  3202               	rrcf	??_Lcd_CharCP,f,c
  3225  001448  2E03               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,c
  3226  00144A  D7FC               	goto	u75
  3227  00144C  0E01               	movlw	1
  3228  00144E  1602               	andwf	??_Lcd_CharCP,f,c
  3229  001450  3A02               	swapf	??_Lcd_CharCP,f,c
  3230  001452  4602               	rlncf	??_Lcd_CharCP,f,c
  3231  001454  508C               	movf	3980,w,c	;volatile
  3232  001456  1802               	xorwf	??_Lcd_CharCP,w,c
  3233  001458  0BDF               	andlw	-33
  3234  00145A  1802               	xorwf	??_Lcd_CharCP,w,c
  3235  00145C  6E8C               	movwf	3980,c	;volatile
  3236  00145E  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3237  001462  3A02               	swapf	??_Lcd_CharCP,f,c
  3238  001464  0E0F               	movlw	15
  3239  001466  1602               	andwf	??_Lcd_CharCP,f,c
  3240  001468  0E01               	movlw	1
  3241  00146A  1602               	andwf	??_Lcd_CharCP,f,c
  3242  00146C  3A02               	swapf	??_Lcd_CharCP,f,c
  3243  00146E  508C               	movf	3980,w,c	;volatile
  3244  001470  1802               	xorwf	??_Lcd_CharCP,w,c
  3245  001472  0BEF               	andlw	-17
  3246  001474  1802               	xorwf	??_Lcd_CharCP,w,c
  3247  001476  6E8C               	movwf	3980,c	;volatile
  3248                           
  3249                           ;hd44780.c: 114: _delay(10);
  3250  001478  0E03               	movlw	3
  3251  00147A                     u867:
  3252  00147A  2EE8               	decfsz	wreg,f,c
  3253  00147C  D7FE               	goto	u867
  3254  00147E  F000               	nop	
  3255                           
  3256                           ;hd44780.c: 115: LATDbits.LATD3 = 1; Lcd_Delay5us(); LATDbits.LATD3 = 0;
  3257  001480  868C               	bsf	3980,3,c	;volatile
  3258  001482  EC35  F00D         	call	_Lcd_Delay5us	;wreg free
  3259  001486  968C               	bcf	3980,3,c	;volatile
  3260                           
  3261                           ;hd44780.c: 116: LATDbits.LATD7 = (c & 0b00001000)>>3; LATDbits.LATD6 = (c & 0b00000100)
      +                          >>2;
  3262  001488  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3263  00148C  90D8               	bcf	status,0,c
  3264  00148E  3202               	rrcf	??_Lcd_CharCP,f,c
  3265  001490  90D8               	bcf	status,0,c
  3266  001492  3202               	rrcf	??_Lcd_CharCP,f,c
  3267  001494  90D8               	bcf	status,0,c
  3268  001496  3202               	rrcf	??_Lcd_CharCP,f,c
  3269  001498  0E01               	movlw	1
  3270  00149A  1602               	andwf	??_Lcd_CharCP,f,c
  3271  00149C  3202               	rrcf	??_Lcd_CharCP,f,c
  3272  00149E  3202               	rrcf	??_Lcd_CharCP,f,c
  3273  0014A0  508C               	movf	3980,w,c	;volatile
  3274  0014A2  1802               	xorwf	??_Lcd_CharCP,w,c
  3275  0014A4  0B7F               	andlw	-129
  3276  0014A6  1802               	xorwf	??_Lcd_CharCP,w,c
  3277  0014A8  6E8C               	movwf	3980,c	;volatile
  3278  0014AA  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3279  0014AE  90D8               	bcf	status,0,c
  3280  0014B0  3202               	rrcf	??_Lcd_CharCP,f,c
  3281  0014B2  90D8               	bcf	status,0,c
  3282  0014B4  3202               	rrcf	??_Lcd_CharCP,f,c
  3283  0014B6  0E01               	movlw	1
  3284  0014B8  1602               	andwf	??_Lcd_CharCP,f,c
  3285  0014BA  3A02               	swapf	??_Lcd_CharCP,f,c
  3286  0014BC  4602               	rlncf	??_Lcd_CharCP,f,c
  3287  0014BE  4602               	rlncf	??_Lcd_CharCP,f,c
  3288  0014C0  508C               	movf	3980,w,c	;volatile
  3289  0014C2  1802               	xorwf	??_Lcd_CharCP,w,c
  3290  0014C4  0BBF               	andlw	-65
  3291  0014C6  1802               	xorwf	??_Lcd_CharCP,w,c
  3292  0014C8  6E8C               	movwf	3980,c	;volatile
  3293                           
  3294                           ;hd44780.c: 117: LATDbits.LATD5 = (c & 0b00000010)>>1; LATDbits.LATD4 = (c & 0b00000001)
      +                          ;
  3295  0014CA  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3296  0014CE  90D8               	bcf	status,0,c
  3297  0014D0  3202               	rrcf	??_Lcd_CharCP,f,c
  3298  0014D2  0E01               	movlw	1
  3299  0014D4  1602               	andwf	??_Lcd_CharCP,f,c
  3300  0014D6  3A02               	swapf	??_Lcd_CharCP,f,c
  3301  0014D8  4602               	rlncf	??_Lcd_CharCP,f,c
  3302  0014DA  508C               	movf	3980,w,c	;volatile
  3303  0014DC  1802               	xorwf	??_Lcd_CharCP,w,c
  3304  0014DE  0BDF               	andlw	-33
  3305  0014E0  1802               	xorwf	??_Lcd_CharCP,w,c
  3306  0014E2  6E8C               	movwf	3980,c	;volatile
  3307  0014E4  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3308  0014E8  0E01               	movlw	1
  3309  0014EA  1602               	andwf	??_Lcd_CharCP,f,c
  3310  0014EC  3A02               	swapf	??_Lcd_CharCP,f,c
  3311  0014EE  508C               	movf	3980,w,c	;volatile
  3312  0014F0  1802               	xorwf	??_Lcd_CharCP,w,c
  3313  0014F2  0BEF               	andlw	-17
  3314  0014F4  1802               	xorwf	??_Lcd_CharCP,w,c
  3315  0014F6  6E8C               	movwf	3980,c	;volatile
  3316                           
  3317                           ;hd44780.c: 118: _delay(10);
  3318  0014F8  0E03               	movlw	3
  3319  0014FA                     u877:
  3320  0014FA  2EE8               	decfsz	wreg,f,c
  3321  0014FC  D7FE               	goto	u877
  3322  0014FE  F000               	nop	
  3323                           
  3324                           ;hd44780.c: 119: LATDbits.LATD3 = 1; Lcd_Delay5us(); LATDbits.LATD3 = 0;
  3325  001500  868C               	bsf	3980,3,c	;volatile
  3326  001502  EC35  F00D         	call	_Lcd_Delay5us	;wreg free
  3327  001506  968C               	bcf	3980,3,c	;volatile
  3328                           
  3329                           ;hd44780.c: 120: Lcd_Delay5us(); Lcd_Delay5500us();
  3330  001508  EC35  F00D         	call	_Lcd_Delay5us	;wreg free
  3331  00150C  EC46  F00D         	call	_Lcd_Delay5500us	;wreg free
  3332  001510  0012               	return		;funcret
  3333  001512                     __end_of_Lcd_CharCP:
  3334                           	opt stack 0
  3335                           tblptru	equ	0xFF8
  3336                           tblptrh	equ	0xFF7
  3337                           tblptrl	equ	0xFF6
  3338                           tablat	equ	0xFF5
  3339                           prodh	equ	0xFF4
  3340                           prodl	equ	0xFF3
  3341                           postinc0	equ	0xFEE
  3342                           wreg	equ	0xFE8
  3343                           postdec1	equ	0xFE5
  3344                           fsr1l	equ	0xFE1
  3345                           indf2	equ	0xFDF
  3346                           postinc2	equ	0xFDE
  3347                           postdec2	equ	0xFDD
  3348                           fsr2h	equ	0xFDA
  3349                           fsr2l	equ	0xFD9
  3350                           status	equ	0xFD8
  3351                           
  3352 ;; *************** function _Lcd_Delay5us *****************
  3353 ;; Defined at:
  3354 ;;		line 143 in file "hd44780.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;		None               void
  3361 ;; Registers used:
  3362 ;;		wreg
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;Total ram usage:        0 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; This function calls:
  3375 ;;		Nothing
  3376 ;; This function is called by:
  3377 ;;		_Lcd_Init
  3378 ;;		_Lcd_CharCP
  3379 ;;		_Lcd_Command
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text22
  3384  001A6A                     __ptext22:
  3385                           	opt stack 0
  3386  001A6A                     _Lcd_Delay5us:
  3387                           	opt stack 28
  3388                           
  3389                           ;hd44780.c: 144: _delay((unsigned long)((5)*(64000000/4000000.0)));
  3390                           
  3391                           ;incstack = 0
  3392  001A6A  0E1A               	movlw	26
  3393  001A6C                     u887:
  3394  001A6C  2EE8               	decfsz	wreg,f,c
  3395  001A6E  D7FE               	goto	u887
  3396  001A70  D000               	nop2		;nop
  3397                           
  3398                           ;hd44780.c: 145: _delay((unsigned long)((5)*(64000000/4000000.0)));
  3399  001A72  0E1A               	movlw	26
  3400  001A74                     u897:
  3401  001A74  2EE8               	decfsz	wreg,f,c
  3402  001A76  D7FE               	goto	u897
  3403  001A78  D000               	nop2		;nop
  3404  001A7A  0012               	return		;funcret
  3405  001A7C                     __end_of_Lcd_Delay5us:
  3406                           	opt stack 0
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           tblptrl	equ	0xFF6
  3410                           tablat	equ	0xFF5
  3411                           prodh	equ	0xFF4
  3412                           prodl	equ	0xFF3
  3413                           postinc0	equ	0xFEE
  3414                           wreg	equ	0xFE8
  3415                           postdec1	equ	0xFE5
  3416                           fsr1l	equ	0xFE1
  3417                           indf2	equ	0xFDF
  3418                           postinc2	equ	0xFDE
  3419                           postdec2	equ	0xFDD
  3420                           fsr2h	equ	0xFDA
  3421                           fsr2l	equ	0xFD9
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function _Lcd_Delay5500us *****************
  3425 ;; Defined at:
  3426 ;;		line 147 in file "hd44780.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;		None               void
  3433 ;; Registers used:
  3434 ;;		wreg
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;Total ram usage:        1 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; This function calls:
  3447 ;;		Nothing
  3448 ;; This function is called by:
  3449 ;;		_Lcd_Init
  3450 ;;		_Lcd_CharCP
  3451 ;;		_Lcd_Command
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text23
  3456  001A8C                     __ptext23:
  3457                           	opt stack 0
  3458  001A8C                     _Lcd_Delay5500us:
  3459                           	opt stack 28
  3460                           
  3461                           ;hd44780.c: 148: _delay((unsigned long)((5500)*(64000000/4000000.0)));
  3462                           
  3463                           ;incstack = 0
  3464  001A8C  0E73               	movlw	115
  3465  001A8E  6E01               	movwf	??_Lcd_Delay5500us& (0+255),c
  3466  001A90  0E48               	movlw	72
  3467  001A92                     u907:
  3468  001A92  2EE8               	decfsz	wreg,f,c
  3469  001A94  D7FE               	goto	u907
  3470  001A96  2E01               	decfsz	??_Lcd_Delay5500us& (0+255),f,c
  3471  001A98  D7FC               	goto	u907
  3472  001A9A  0012               	return		;funcret
  3473  001A9C                     __end_of_Lcd_Delay5500us:
  3474                           	opt stack 0
  3475                           tblptru	equ	0xFF8
  3476                           tblptrh	equ	0xFF7
  3477                           tblptrl	equ	0xFF6
  3478                           tablat	equ	0xFF5
  3479                           prodh	equ	0xFF4
  3480                           prodl	equ	0xFF3
  3481                           postinc0	equ	0xFEE
  3482                           wreg	equ	0xFE8
  3483                           postdec1	equ	0xFE5
  3484                           fsr1l	equ	0xFE1
  3485                           indf2	equ	0xFDF
  3486                           postinc2	equ	0xFDE
  3487                           postdec2	equ	0xFDD
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           tblptru	equ	0xFF8
  3492                           tblptrh	equ	0xFF7
  3493                           tblptrl	equ	0xFF6
  3494                           tablat	equ	0xFF5
  3495                           prodh	equ	0xFF4
  3496                           prodl	equ	0xFF3
  3497                           postinc0	equ	0xFEE
  3498                           wreg	equ	0xFE8
  3499                           postdec1	equ	0xFE5
  3500                           fsr1l	equ	0xFE1
  3501                           indf2	equ	0xFDF
  3502                           postinc2	equ	0xFDE
  3503                           postdec2	equ	0xFDD
  3504                           fsr2h	equ	0xFDA
  3505                           fsr2l	equ	0xFD9
  3506                           status	equ	0xFD8
  3507                           
  3508                           	psect	rparam
  3509  0000                     tblptru	equ	0xFF8
  3510                           tblptrh	equ	0xFF7
  3511                           tblptrl	equ	0xFF6
  3512                           tablat	equ	0xFF5
  3513                           prodh	equ	0xFF4
  3514                           prodl	equ	0xFF3
  3515                           postinc0	equ	0xFEE
  3516                           wreg	equ	0xFE8
  3517                           postdec1	equ	0xFE5
  3518                           fsr1l	equ	0xFE1
  3519                           indf2	equ	0xFDF
  3520                           postinc2	equ	0xFDE
  3521                           postdec2	equ	0xFDD
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    10
    Data        5
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     84      89
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_3(CODE[14]), STR_2(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer1(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    NRF24L01_SendData@buffer	PTR unsigned char  size(2) Largest target is 32
		 -> main@bufferTX(COMRAM[32]), 

    NRF24L01_WriteBuffer@buffer	PTR unsigned char  size(2) Largest target is 32
		 -> main@bufferTX(COMRAM[32]), ADDRESS_DATA_PIPE0(COMRAM[5]), 

    Lcd_Text@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer1(COMRAM[20]), 

    Lcd_ConstText@buffer	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _NRF24L01_SendData->_NRF24L01_WriteBuffer
    _NRF24L01_Init->_NRF24L01_WriteBuffer
    _NRF24L01_WriteBuffer->_SPI1_Write
    _NRF24L01_SetMode->_NRF24L01_WriteRegister
    _NRF24L01_Flush->_SPI1_Write
    _NRF24L01_SetChannel->_NRF24L01_WriteRegister
    _NRF24L01_WriteRegister->_SPI1_Write
    _Lcd_Text->_Lcd_CharCP
    _Lcd_Text->_Lcd_Command
    _Lcd_Init->_Lcd_Command
    _Lcd_ConstText->_Lcd_CharCP
    _Lcd_ConstText->_Lcd_Command
    _Lcd_Command->_Lcd_Delay5500us
    _Lcd_CharCP->_Lcd_Delay5500us

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                53    53      0   10557
                                             31 COMRAM    53    53      0
                           _Delay_ms
                        _Lcd_Command
                      _Lcd_ConstText
                           _Lcd_Init
                           _Lcd_Text
                      _NRF24L01_Init
                  _NRF24L01_SendData
                         _SPI1_Close
                          _SPI1_Init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             28    22      6    2096
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _SPI1_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI1_Close                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NRF24L01_SendData                                    2     0      2    2126
                                              6 COMRAM     2     0      2
                           _Delay_ms
                   _NRF24L01_SetMode
               _NRF24L01_WriteBuffer
 ---------------------------------------------------------------------------------
 (1) _NRF24L01_Init                                        2     1      1    3888
                                              6 COMRAM     2     1      1
                           _Delay_ms
                _NRF24L01_SetChannel
                   _NRF24L01_SetMode
               _NRF24L01_WriteBuffer
             _NRF24L01_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _NRF24L01_WriteBuffer                                 5     2      3     490
                                              1 COMRAM     5     2      3
                         _SPI1_Write
 ---------------------------------------------------------------------------------
 (2) _NRF24L01_SetMode                                     1     1      0     928
                                              3 COMRAM     1     1      0
                     _NRF24L01_Flush
             _NRF24L01_WriteRegister
 ---------------------------------------------------------------------------------
 (3) _NRF24L01_Flush                                       0     0      0      15
                         _SPI1_Write
 ---------------------------------------------------------------------------------
 (2) _NRF24L01_SetChannel                                  1     1      0     913
                                              3 COMRAM     1     1      0
             _NRF24L01_WriteRegister
 ---------------------------------------------------------------------------------
 (3) _NRF24L01_WriteRegister                               2     1      1     891
                                              1 COMRAM     2     1      1
                         _SPI1_Write
 ---------------------------------------------------------------------------------
 (3) _SPI1_Write                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Delay_ms                                             5     3      2     558
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Text                                             5     2      3     677
                                              4 COMRAM     5     2      3
                         _Lcd_CharCP
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     210
                                              4 COMRAM     1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _Lcd_ConstText                                        5     2      3     549
                                              4 COMRAM     5     2      3
                         _Lcd_CharCP
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          3     3      0     120
                                              1 COMRAM     3     3      0
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_CharCP                                           3     3      0     120
                                              1 COMRAM     3     3      0
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (3) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Delay5500us                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _Lcd_Command
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_ConstText
     _Lcd_CharCP
       _Lcd_Delay5500us
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5500us
       _Lcd_Delay5us
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5500us
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Text
     _Lcd_CharCP
       _Lcd_Delay5500us
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5500us
       _Lcd_Delay5us
   _NRF24L01_Init
     _Delay_ms
     _NRF24L01_SetChannel
       _NRF24L01_WriteRegister
         _SPI1_Write
     _NRF24L01_SetMode
       _NRF24L01_Flush
         _SPI1_Write
       _NRF24L01_WriteRegister
         _SPI1_Write
     _NRF24L01_WriteBuffer
       _SPI1_Write
     _NRF24L01_WriteRegister
       _SPI1_Write
   _NRF24L01_SendData
     _Delay_ms
     _NRF24L01_SetMode
       _NRF24L01_Flush
         _SPI1_Write
       _NRF24L01_WriteRegister
         _SPI1_Write
     _NRF24L01_WriteBuffer
       _SPI1_Write
   _SPI1_Close
   _SPI1_Init
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     54      59       1       93.7%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      59      12        0.0%
DATA                 0      0      59       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Jul 13 13:03:51 2017

                             l17 1664                               l18 1694  
                             u25 1520                               u35 153A  
                             u45 155E                               u55 1406  
                             u65 1420                               u75 1444  
            ___wmul@multiplicand 0003                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                              l170 1986  
                            l156 1A82                              l244 13F6  
                            l705 18AE                              l715 18F0  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            u907 1A92                              u837 1978  
                            u847 1594                              u857 1614  
                            u867 147A                              u877 14FA  
                            u887 1A6C                              u897 1A74  
                            wreg 000FE8             _NRF24L01_WriteBuffer 1938  
            __end_of_Lcd_Command 1628                    _NRF24L01_Init 16EA  
                   __CFG_LVP$OFF 000000                      main@buffer1 0040  
                           l1104 165C                             l1502 190C  
                           l1600 181A                             l1512 1928  
                           l1506 191A                             l1522 1A24  
                           l1612 1856                             l1604 1822  
                           l1540 1884                             l1700 11B2  
                           l1606 183C                             l1550 18A4  
                           l1542 1888                             l1608 1844  
                           l1560 18CE                             l1640 1050  
                           l1800 13A8                             l1482 1948  
                           l1538 187C                             l1562 18D2  
                           l1730 1234                             l1642 105E  
                           l1634 1036                             l1572 17A0  
                           l1492 1972                             l1732 123A  
                           l1724 1218                             l1708 11D2  
                           l1716 11F2                             l1652 1092  
                           l1740 1294                             l1590 17F0  
                           l1574 17A6                             l1582 17BA  
                           l1566 18E6                             l1558 18C6  
                           l1718 11FA                             l1742 12AC  
                           l1662 10EE                             l1646 1064  
                           l1576 17AC                             l1584 17D4  
                           l1488 195C                             l1664 1114  
                           l1586 17DC                             l1578 17B2  
                           l1594 1808                             l1738 128C  
                           l1674 113C                             l1596 180E  
                           l1676 1140                             l1780 134A  
                           l1772 133A                             l1598 1814  
                           l1694 1186                             l1688 116C  
                           l1776 1342                             l1698 11AA  
                           l1794 1398                             l1796 13A0  
                           STR_1 100B                             STR_2 101C  
                           STR_3 101C  __size_of_NRF24L01_WriteRegister 0016  
              ??_Lcd_Delay5500us 0001                             _main 12BA  
                           fsr2h 000FDA                             fsr1l 000FE1  
                           indf2 000FDF             __end_of_Lcd_Delay5us 1A7C  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                           prodh 000FF4                             prodl 000FF3  
                           start 0000                    __CFG_IESO$OFF 000000  
                   ___param_bank 000010                       _Lcd_CharCP 13F8  
  NRF24L01_SetChannel@rf_channel 0004                   _NRF24L01_Flush 1A2C  
                   main@bufferTX 0020                      ?_SPI1_Close 0001  
                          ?_main 0001                  __end_of___lwdiv 18B8  
                __end_of___lwmod 18FA                      ?_SPI1_Write 0001  
                          _PORTA 000F80                            _PORTB 000F81  
                          _PORTC 000F82                            _PORTD 000F83  
                          _PORTE 000F84         NRF24L01_WriteBuffer@data 0005  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96            ?_NRF24L01_WriteBuffer 0002  
             __size_of_SPI1_Init 0012                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                 ?_NRF24L01_Init 0007                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
      __size_of_NRF24L01_SetMode 003E                   __CFG_EBTRB$OFF 000000  
                __end_of_dpowers 100B                  __end_of_isdigit 1A2C  
             __CFG_MCLRE$INTMCLR 000000                            main@i 0054  
                          tablat 000FF5                            status 000FD8  
                __end_of_sprintf 12BA                   __CFG_HFOFST$ON 000000  
               __end_of_Delay_ms 1994                   __CFG_PBADEN$ON 000000  
               __end_of_Lcd_Init 16EA                 __end_of_Lcd_Text 1866  
         __end_of_NRF24L01_Flush 1A42                  __initialization 1994  
                   __end_of_main 13F8            __end_of_Lcd_ConstText 1804  
         _NRF24L01_WriteRegister 1A42                      _Lcd_Command 1512  
                         ??_main 0020                    __activetblptr 000002  
   __size_of_NRF24L01_SetChannel 000E                           _ANSELA 000F38  
                         _ANSELB 000F39                           _ANSELC 000F3A  
                         _ANSELD 000F3B                           _ANSELE 000F3C  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
                 SPI1_Write@data 0001                   Lcd_Text@buffer 0006  
            __size_of_SPI1_Close 0004              __size_of_SPI1_Write 0010  
              __end_of_SPI1_Init 1A6A                   __CFG_XINST$OFF 000000  
                ?_NRF24L01_Flush 0001                      ?_Lcd_CharCP 0001  
                         ___wmul 19E8                   __CFG_STVREN$ON 000000  
                      ??___lwdiv 0005                        ??___lwmod 000C  
                  Delay_ms@count 0001           ??_NRF24L01_WriteBuffer 0005  
                ??_NRF24L01_Init 0008                     __pdataCOMRAM 0055  
                      ??_isdigit 0001                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                        ??_sprintf 0013  
          __size_of_Lcd_Delay5us 0012             NRF24L01_SetMode@mode 0004  
             Lcd_Command@command 0004                       __accesstop 0060  
        __end_of__initialization 19B4                    ___rparam_used 000001  
          NRF24L01_WriteBuffer@i 0006                   __pcstackCOMRAM 0001  
                   _Lcd_Delay5us 1A6A                  _Lcd_Delay5500us 1A8C  
                      ?_Delay_ms 0001                 _NRF24L01_SetMode 18FA  
                      ?_Lcd_Init 0001                        ?_Lcd_Text 0005  
            __size_of_Lcd_CharCP 011A                     sprintf@width 001D  
                __CFG_PLLCFG$OFF 000000               __CFG_CCP2MX$PORTC1 000000  
                        ?___wmul 0001               __CFG_CCP3MX$PORTB5 000000  
                   ??_SPI1_Close 0001                     ??_SPI1_Write 0001  
                     ??_Delay_ms 0003                       ??_Lcd_Init 0005  
                        _SSP1BUF 000FC9                       ??_Lcd_Text 0008  
             __end_of_SPI1_Close 1AB4                  __CFG_PWRTEN$OFF 000000  
                        __Hparam 0000          ?_NRF24L01_WriteRegister 0002  
                        __Lparam 0000               __end_of_SPI1_Write 1A8C  
            _NRF24L01_SetChannel 1A9C                  __size_of___wmul 0026  
                        ___lwdiv 1866          __end_of_Lcd_Delay5500us 1A9C  
                        ___lwmod 18B8                     __psmallconst 1000  
                        __pcinit 1994          NRF24L01_Init@rf_channel 0007  
                        __ramtop 1000                     ?_Lcd_Command 0001  
                        __ptext0 12BA                          __ptext1 102C  
                        __ptext2 1A0E                          __ptext3 19E8  
                        __ptext4 18B8                          __ptext5 1866  
                        __ptext6 1A58                          __ptext7 1AB0  
                        __ptext8 19BE                          __ptext9 16EA  
                        _dpowers 1001                          _isdigit 1A0E  
           ?_NRF24L01_SetChannel 0001                          _sprintf 102C  
           end_of_initialization 19B4                        Delay_ms@i 0004  
               ??_NRF24L01_Flush 0002                    __Lmediumconst 0000  
 __end_of_NRF24L01_WriteRegister 1A58              Lcd_ConstText@buffer 0006  
                   ??_Lcd_CharCP 0002                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE                        Lcd_Text@x 0005  
                      Lcd_Text@y 0008                        _SPI1_Init 1A58  
    NRF24L01_WriteRegister@value 0002                        _TRISAbits 000F92  
                      _TRISCbits 000F94                        _TRISDbits 000F95  
          ??_NRF24L01_SetChannel 0004                NRF24L01_Init@mode 0008  
             __end_of_Lcd_CharCP 1512           __size_of_Lcd_ConstText 0068  
       __end_of_NRF24L01_SetMode 1938                       ?_SPI1_Init 0001  
               ?_Lcd_Delay5500us 0001                   __end_of___wmul 1A0E  
                  __pidataCOMRAM 1AAA       NRF24L01_WriteBuffer@buffer 0002  
            start_initialization 1994    __size_of_NRF24L01_WriteBuffer 0030  
          __end_of_NRF24L01_Init 179C                __size_of_Delay_ms 002C  
              __size_of_Lcd_Init 00C2                __size_of_Lcd_Text 0062  
              _NRF24L01_SendData 19BE                         ??___wmul 0005  
             ?_NRF24L01_SendData 0007                    _Lcd_ConstText 179C  
           __size_of_Lcd_Command 0116              ??_NRF24L01_SendData 0009  
                   _isdigit$1009 0002                      sprintf@flag 001C  
        NRF24L01_SendData@buffer 0007                      sprintf@prec 0019  
      __end_of_NRF24L01_SendData 19E8                 ___lwdiv@dividend 0001  
                 ?_Lcd_ConstText 0005                      ??_SPI1_Init 0001  
                       ?___lwdiv 0001                         ?___lwmod 0008  
               __CFG_PRICLKEN$ON 000000                      __smallconst 1000  
                       ?_isdigit 0001                 ___lwdiv@quotient 0005  
                       ?_sprintf 000D   NRF24L01_WriteRegister@Mnemonic 0003  
                 ___wmul@product 0005                         _LATDbits 000F8C  
               __CFG_WDTPS$32768 000000                         _SSP1CON1 000FC6  
                       _SSP1STAT 000FC7                     Lcd_Init@data 0005  
              ___wmul@multiplier 0001                         _Delay_ms 1968  
                       _Lcd_Init 1628                         _Lcd_Text 1804  
                      copy_data0 19A8        NRF24L01_WriteBuffer@bytes 0004  
     __size_of_NRF24L01_SendData 002A                     Lcd_Text@data 0009  
                       __Hrparam 0000               _ADDRESS_DATA_PIPE0 0055  
                ??_Lcd_ConstText 0008                         __Lrparam 0000  
             __CFG_BOREN$SBORDIS 000000                __CFG_P2BMX$PORTD2 000000  
              ?_NRF24L01_SetMode 0001                 __size_of___lwdiv 0052  
             ??_NRF24L01_SetMode 0004                 __size_of___lwmod 0042  
    __end_of_NRF24L01_SetChannel 1AAA                    ?_Lcd_Delay5us 0001  
                     sprintf@val 001A                 __size_of_isdigit 001E  
                ___lwdiv@divisor 0003                  ___lwdiv@counter 0007  
                       __ptext10 1938                         __ptext11 18FA  
                       __ptext20 1512                         __ptext12 1A2C  
                       __ptext21 13F8                         __ptext13 1A9C  
                       __ptext22 1A6A                         __ptext14 1A42  
                       __ptext23 1A8C                         __ptext15 1A7C  
                       __ptext16 1968                         __ptext17 1804  
                       __ptext18 1628                         __ptext19 179C  
               __size_of_sprintf 028E                      Lcd_CharCP@c 0004  
                  __size_of_main 013E     __end_of_NRF24L01_WriteBuffer 1968  
              Lcd_ConstText@data 0009          __size_of_NRF24L01_Flush 0016  
                   _SSP1STATbits 000FC7                   ??_Lcd_Delay5us 0001  
                    _OSCTUNEbits 000F9B         __size_of_Lcd_Delay5500us 0010  
                       isdigit@c 0003         ??_NRF24L01_WriteRegister 0003  
                      sprintf@ap 0017                        sprintf@sp 000D  
               ___lwmod@dividend 0008           __size_of_NRF24L01_Init 00B2  
                  ??_Lcd_Command 0002                       _SPI1_Close 1AB0  
                       sprintf@c 001F                         sprintf@f 000F  
                     _SPI1_Write 1A7C                  ___lwmod@divisor 000A  
                ___lwmod@counter 000C                __CFG_T3CMX$PORTC0 000000  
                 Lcd_ConstText@x 0005                   Lcd_ConstText@y 0008  
              __CFG_FOSC$INTIO67 000000  
