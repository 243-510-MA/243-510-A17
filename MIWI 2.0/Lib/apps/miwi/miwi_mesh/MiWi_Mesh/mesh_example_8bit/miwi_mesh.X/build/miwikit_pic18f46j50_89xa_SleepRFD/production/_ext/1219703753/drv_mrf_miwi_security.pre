
# 1 "../../framework/driver/mrf_miwi/src/drv_mrf_miwi_security.c"

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.38\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.38\include\stdbool.h"
typedef unsigned char bool;

# 20 "../src/system_config/miwikit_pic18f46j50_89xa\gtypedefs.h"
typedef union
{
uint16_t Val;
uint8_t v[2];
struct
{
uint8_t LB;
uint8_t HB;
} uint8_t;
struct
{
 uint8_t b0:1;
 uint8_t b1:1;
 uint8_t b2:1;
 uint8_t b3:1;
 uint8_t b4:1;
 uint8_t b5:1;
 uint8_t b6:1;
 uint8_t b7:1;
 uint8_t b8:1;
 uint8_t b9:1;
 uint8_t b10:1;
 uint8_t b11:1;
 uint8_t b12:1;
 uint8_t b13:1;
 uint8_t b14:1;
 uint8_t b15:1;
} bits;
} _uint16_VAL, uint16_BITS;

typedef union
{
uint32_t Val;
uint16_t w[2];
} uint32_VAL;

# 63
uint32_t krnd(void);
void krndInit(uint16_t value);

# 133 "../src/system_config/miwikit_pic18f46j50_89xa\system.h"
typedef enum LED_t_def
{
LEDGreen,
LEDYellow,
LEDRed,
LEDCount,
}LED_t;

typedef enum LEDCmd_t_def
{
lCMD_None,
lCMD_Off,
lCMD_On,
lCMD_Blink,
lCMD_Toggle,
}LEDCmd_t;



void HardwareInit(void);
bool isButtonPressed(uint8_t index);

void ButtonTask(void);
void LEDCommand(LED_t led, LEDCmd_t cmd);
void LEDManagerTask(void);

# 69 "../src/system_config/miwikit_pic18f46j50_89xa\symbol.h"
typedef union MIWI_TICK_t
{
uint32_t Val;
}MIWI_TICK;




void InitSymbolTimer(void);
MIWI_TICK MiWi_TickGetMs(void);
uint32_t MiWi_TickGet(void);
uint32_t safeMiWi_TickGetMs(void);

# 86
void TimerDisable(void);
void TimerEnable(void);

# 94 "../../framework\driver/mrf_miwi/drv_mrf_miwi_security.h"
extern const uint8_t mySecurityKey[];

void CTR(uint8_t *text, uint8_t len, uint8_t *key, uint8_t *nounce);
void CBC_MAC(uint8_t *text, uint8_t len, uint8_t *key, uint8_t *MIC);
void CCM_Enc(uint8_t *text, uint8_t headerLen, uint8_t payloadLen, uint8_t *key);
bool CCM_Dec(uint8_t *text, uint8_t headerLen, uint8_t payloadLen, uint8_t *key);

# 68 "../../framework/driver/mrf_miwi/src/drv_mrf_miwi_security.c"
uint8_t tmpBlock[4];

# 83
const const uint8_t mySecurityKey[8] = {0x00, 0x01, 0x02,
0x03, 0x04, 0x05, 0x06, 0x07};

# 109
void encode(uint16_t *text, uint16_t *key)
{
uint16_t part1=text[0], part2=text[1];
uint16_t sum=0, delta=0x9E37;
uint8_t i;

for(i=0; i<32; i++)
{
part1 += (((part2 << 4) ^ (part2 >> 5)) + part2) ^ (sum + key[sum & 3]);
sum += delta;
part2 += (((part1 << 4) ^ (part1 >> 5)) + part1) ^ (sum + key[(sum>>11) & 3]);
}
text[0]=part1; text[1]=part2;
}

# 150
void CTR(uint8_t *text, uint8_t len, uint8_t *key, uint8_t *nounce)
{
uint8_t block = len/4+1;
uint8_t i, j;

# 160
for(i = 0; i < block; i++)
{
for(j = 0; j < 4-1; j++)
{
tmpBlock[j] = nounce[j];
}
tmpBlock[4-1] = i;
encode((uint16_t *)tmpBlock, (uint16_t *)key);
for(j = 0; j < 4; j++)
{
if( (i * 4 + j) >= len )
{
break;
}
text[i * 4 + j] ^= tmpBlock[j];
}
}

# 181
}

# 207
void CBC_MAC( uint8_t *text,
uint8_t len,
uint8_t *key,
uint8_t *MIC)
{
uint8_t block = len / 4 + 1;
uint8_t i, j;

# 220
for(i = 0; i < 4; i++)
{
MIC[i] = 0;
}

for(i = 0; i < block; i++)
{
for(j = 0; j < 4; j++)
{
if( (i * 4 + j) >= len )
{
break;
}
MIC[j] ^= text[i * 4 + j];
}
encode((uint16_t *)MIC, (uint16_t *)key);
}

# 240
}

# 272
void CCM_Enc( uint8_t *text,
uint8_t headerLen,
uint8_t payloadLen,
uint8_t *key)
{
uint8_t i;

# 284
CBC_MAC(text, (headerLen + payloadLen), key, tmpBlock);

for(i = 0; i < 4; i++)
{
text[headerLen + payloadLen + i] = tmpBlock[i];
}

for(i = 0; i < 4-1; i++)
{
tmpBlock[i] = (i < headerLen) ? text[i] : 0;
}

CTR(&(text[headerLen]), (payloadLen + 4), key, tmpBlock);

# 300
}

# 331
bool CCM_Dec(uint8_t *text, uint8_t headerLen, uint8_t payloadLen, uint8_t *key)
{
uint8_t i;

# 340
for(i = 0; i < 4-1; i++)
{
tmpBlock[i] = (i < headerLen) ? text[i] : 0;
}
CTR(&(text[headerLen]), payloadLen, key, tmpBlock);

CBC_MAC(text, (headerLen + payloadLen - 2), key, tmpBlock);
for(i = 0; i < 2; i++)
{
if( tmpBlock[i] != text[headerLen + payloadLen - 2 + i] )
{

# 354
return 0;
}
}

# 360
return 1;
}



extern uint8_t bogus;

